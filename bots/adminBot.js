const { Telegraf } = require('telegraf');
const User = require('../models/User');
const Transaction = require('../models/Transaction');
const GameHistory = require('../models/GameHistory');
const moment = require('moment');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ—Ç–∞
module.exports = (token) => {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ Admin –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', token);
  
  // Initialize the bot with passed token
  const bot = new Telegraf(token);
  
  // Admin IDs - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  const ADMIN_IDS = [8052397593, 1240742785, 418684940]; 
  
  // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const isAdmin = async (ctx, next) => {
    if (!ADMIN_IDS.includes(ctx.from.id)) {
      return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    }
    
    // Check if user exists in database and make them admin if needed
    let user = await User.findOne({ telegramId: ctx.from.id });
    
    if (!user) {
      user = new User({
        telegramId: ctx.from.id,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name || '',
        username: ctx.from.username || '',
        isAdmin: true
      });
      
      await user.save();
    } else if (!user.isAdmin) {
      user.isAdmin = true;
      await user.save();
    }
    
    return next();
  };
  
  // Apply admin check to all commands
  bot.use(isAdmin);

// Start command —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–µ–Ω—é
bot.start((ctx) => {
  ctx.reply(`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Greenlight Casino, ${ctx.from.first_name}!

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/users - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/user [telegramId] - –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/winrate [telegramId] [rate] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ (0-1)
/setbalance [telegramId] [amount] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
/ban [telegramId] - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ
/income [day|week|month|all] - –î–æ—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ 
/games [period] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
/topplayers [count] - –õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏

üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫:
/userlist [params] - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
/transactions [params] - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
/activity [period] - –û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/export [type] - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV

üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã:
/dailyreport - –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/weeklyreport - –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é 
/monthlyreport - –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü
/customreport [from] [to] - –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥

–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help [–∫–æ–º–∞–Ω–¥–∞]
  `);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
bot.command('help', async (ctx) => {
  const command = ctx.message.text.split(' ')[1];
  
  if (!command) {
    return ctx.reply(`
üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:

- /userlist - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: [sort:field] [filter:field=value] [limit:N]
  –ü—Ä–∏–º–µ—Ä: /userlist sort:balance filter:isBanned=true limit:20

- /income - –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∫–∞–∑–∏–Ω–æ
  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: [day|week|month|year|all]
  –ü—Ä–∏–º–µ—Ä: /income week

- /games - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: [period] [sort:field]
  –ü—Ä–∏–º–µ—Ä: /games month sort:profit

- /export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: [users|transactions|games]
  –ü—Ä–∏–º–µ—Ä: /export users

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help [–∫–æ–º–∞–Ω–¥–∞]
    `);
  }
  
  // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
  switch(command) {
    case 'userlist':
      return ctx.reply(`
üìã –ö–æ–º–∞–Ω–¥–∞ /userlist - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- sort:[field] - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—é (balance, winRate, lastActivity)
- filter:[field=value] - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (isBanned=true/false, isAdmin=true/false)
- limit:[N] - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- page:[N] - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä—ã:
/userlist sort:balance - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
/userlist sort:balance:asc - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
/userlist filter:isBanned=true - —Ç–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
/userlist filter:balance>1000 - —Å –±–∞–ª–∞–Ω—Å–æ–º –±–æ–ª—å—à–µ 1000
/userlist limit:10 page:2 - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      `);
    
    case 'income':
      return ctx.reply(`
üí∞ –ö–æ–º–∞–Ω–¥–∞ /income - –∞–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∫–∞–∑–∏–Ω–æ

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- day - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
- week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
- month - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
- year - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ 
- all - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- [YYYY-MM-DD] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
- [YYYY-MM-DD] [YYYY-MM-DD] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥

–ü—Ä–∏–º–µ—Ä—ã:
/income day - –¥–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/income week - –¥–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é
/income 2023-10-01 - –¥–æ—Ö–æ–¥ –∑–∞ 1 –æ–∫—Ç—è–±—Ä—è 2023
/income 2023-10-01 2023-10-31 - –¥–æ—Ö–æ–¥ –∑–∞ –æ–∫—Ç—è–±—Ä—å 2023
      `);
    
    case 'games':
      return ctx.reply(`
üéÆ –ö–æ–º–∞–Ω–¥–∞ /games - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- [period] - –ø–µ—Ä–∏–æ–¥ (day, week, month, year, all)
- sort:[field] - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (count, bets, wins, profit, margin)

–ü—Ä–∏–º–µ—Ä—ã:
/games week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä –∑–∞ –Ω–µ–¥–µ–ª—é
/games month sort:profit - –∏–≥—Ä—ã –∑–∞ –º–µ—Å—è—Ü, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–±—ã–ª–∏
/games all sort:count - –≤—Å–µ –∏–≥—Ä—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ—Å—Å–∏–π
      `);
    
    default:
      return ctx.reply(`–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /${command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
  }
});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.command('userlist', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ').slice(1);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let sortField = 'createdAt';
    let sortOrder = -1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    let filterObj = {};
    let limit = 20;
    let skip = 0;
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for (const arg of args) {
      if (arg.startsWith('sort:')) {
        const sortParam = arg.replace('sort:', '').split(':');
        sortField = sortParam[0];
        if (sortParam.length > 1 && sortParam[1] === 'asc') {
          sortOrder = 1;
        }
      } else if (arg.startsWith('filter:')) {
        const filter = arg.replace('filter:', '');
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if (filter.includes('>')) {
          const [key, value] = filter.split('>');
          filterObj[key] = { $gt: isNaN(value) ? value : Number(value) };
        } else if (filter.includes('<')) {
          const [key, value] = filter.split('<');
          filterObj[key] = { $lt: isNaN(value) ? value : Number(value) };
        } else if (filter.includes('=')) {
          const [key, value] = filter.split('=');
          filterObj[key] = value === 'true' ? true : (value === 'false' ? false : value);
        }
      } else if (arg.startsWith('limit:')) {
        limit = parseInt(arg.replace('limit:', ''));
      } else if (arg.startsWith('page:')) {
        const page = parseInt(arg.replace('page:', '')) - 1;
        skip = page >= 0 ? page * limit : 0;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortObj = {};
    sortObj[sortField] = sortOrder;
    
    // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    const totalUsers = await User.countDocuments(filterObj);
    const users = await User.find(filterObj)
                           .sort(sortObj)
                           .skip(skip)
                           .limit(limit);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
    if (users.length === 0) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.');
    }
    
    let message = `üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* (${skip+1}-${Math.min(skip+limit, totalUsers)} –∏–∑ ${totalUsers})\n\n`;
    
    for (const user of users) {
      const lastActivityDate = user.lastActivity ? 
        moment(user.lastActivity).format('DD.MM.YY HH:mm') : 'N/A';
        
      message += `üÜî ${user.telegramId} - ${user.firstName} ${user.lastName || ''}\n`;
      message += `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê | üé≤ –®–∞–Ω—Å: ${user.winRate}\n`;
      message += `üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivityDate}\n`;
      message += `${user.isBanned ? 'üö´ –ó–ê–ë–ê–ù–ï–ù' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if (totalUsers > limit) {
      const currentPage = Math.floor(skip / limit) + 1;
      const totalPages = Math.ceil(totalUsers / limit);
      message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}/${totalPages}\n`;
      
      if (currentPage > 1) {
        message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä page:${currentPage-1} –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.\n`;
      }
      
      if (currentPage < totalPages) {
        message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä page:${currentPage+1} –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.`;
      }
    }
    
    ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã userlist:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
bot.command('users', async (ctx) => {
  try {
    const users = await User.find().limit(20).sort({ createdAt: -1 });
    
    if (users.length === 0) {
      return ctx.reply('No users found.');
    }
    
    let message = 'Recent users:\n\n';
    
    for (const user of users) {
      message += `ID: ${user.telegramId}\n`;
      message += `Name: ${user.firstName} ${user.lastName || ''}\n`;
      message += `Username: ${user.username ? '@' + user.username : 'N/A'}\n`;
      message += `Balance: ${user.balance} Stars\n`;
      message += `Win Rate: ${user.winRate}\n`;
      message += `Status: ${user.isBanned ? 'üö´ BANNED' : '‚úÖ Active'}\n\n`;
    }
    
    ctx.reply(message);
  } catch (error) {
    console.error('Users command error:', error);
    ctx.reply('Error retrieving users.');
  }
});

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('user', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ');
    const telegramId = args[1];
    
    if (!telegramId) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user [telegramId]');
    }
    
    const user = await User.findOne({ telegramId });
    
    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [ deposits, bets, wins, transactions, games, lastGames, lastActivity ] = await Promise.all([
      // –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      Transaction.aggregate([
        { $match: { telegramId: parseInt(telegramId), type: 'deposit' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]),
      
      // –û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫
      Transaction.aggregate([
        { $match: { telegramId: parseInt(telegramId), type: 'bet' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } } } }
      ]),
      
      // –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
      Transaction.aggregate([
        { $match: { telegramId: parseInt(telegramId), type: 'win' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]),
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      Transaction.find({ telegramId: parseInt(telegramId) })
                .sort({ createdAt: -1 })
                .limit(5),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
      GameHistory.aggregate([
        { $match: { telegramId: parseInt(telegramId) } },
        { $group: { 
          _id: '$gameType', 
          count: { $sum: 1 },
          totalBet: { $sum: '$betAmount' },
          totalWin: { $sum: '$winAmount' },
          wins: { $sum: { $cond: [{ $eq: ['$outcome', 'win'] }, 1, 0] } }
        }}
      ]),
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã
      GameHistory.find({ telegramId: parseInt(telegramId) })
                 .sort({ createdAt: -1 })
                 .limit(5),
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      GameHistory.findOne({ telegramId: parseInt(telegramId) })
                 .sort({ createdAt: -1 })
    ]);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const lastActivityDate = lastActivity 
      ? moment(lastActivity.createdAt).format('DD.MM.YYYY HH:mm:ss')
      : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
    
    // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    const totalDeposited = deposits[0]?.total || 0;
    const totalBets = bets[0]?.total || 0;
    const totalWins = wins[0]?.total || 0;
    const profitFromUser = totalBets - totalWins;
    const profitMargin = totalBets > 0 ? (profitFromUser / totalBets) * 100 : 0;
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    let message = `üìä *–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø*\n\n`;
    message += `üë§ *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
    message += `üÜî ID: ${user.telegramId}\n`;
    message += `üë§ –ò–º—è: ${user.firstName} ${user.lastName || ''}\n`;
    message += `üî§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username ? '@' + user.username : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
    message += `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê\n`;
    message += `üé≤ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: ${user.winRate}\n`;
    message += `üö¶ –°—Ç–∞—Ç—É—Å: ${user.isBanned ? 'üö´ –ó–ê–ë–ê–ù–ï–ù' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n`;
    message += `üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivityDate}\n`;
    message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${moment(user.createdAt).format('DD.MM.YYYY')}\n\n`;
    
    message += `üíµ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `üì• –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${totalDeposited} ‚≠ê\n`;
    message += `üéÆ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${totalBets} ‚≠ê\n`;
    message += `üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: ${totalWins} ‚≠ê\n`;
    message += `üìà –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ: ${profitFromUser} ‚≠ê (${profitMargin.toFixed(2)}%)\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
    if (games.length > 0) {
      message += `üé≤ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º:*\n`;
      
      for (const game of games) {
        const gameWinRate = game.count > 0 ? (game.wins / game.count) * 100 : 0;
        const gameProfit = game.totalBet - game.totalWin;
        
        message += `${getGameEmoji(game._id)} ${capitalizeFirstLetter(game._id)}: ${game.count} –∏–≥—Ä\n`;
        message += `   –°—Ç–∞–≤–∫–∏: ${game.totalBet} ‚≠ê | –í—ã–∏–≥—Ä—ã—à–∏: ${game.totalWin} ‚≠ê\n`;
        message += `   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${gameWinRate.toFixed(2)}% | –ü—Ä–∏–±—ã–ª—å: ${gameProfit} ‚≠ê\n`;
      }
      
      message += `\n`;
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (transactions.length > 0) {
      message += `üí∏ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n`;
      
      for (const tx of transactions) {
        const txDate = moment(tx.createdAt).format('DD.MM HH:mm');
        const txType = getTransactionTypeEmoji(tx.type);
        
        message += `${txDate} ${txType} ${tx.type}: ${tx.amount > 0 ? '+' : ''}${tx.amount} ‚≠ê\n`;
      }
      
      message += `\n`;
    }
    
    ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('User command error:', error);
    ctx.reply('Error retrieving user data.');
  }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–Ω—Å–∞ –≤—ã–∏–≥—Ä—ã—à–∞
bot.command('winrate', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ');
    const telegramId = args[1];
    const winRate = parseFloat(args[2]);
    
    if (!telegramId || isNaN(winRate)) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –∏ —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /winrate [telegramId] [rate]');
    }
    
    if (winRate < 0 || winRate > 1) {
      return ctx.reply('–®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1.');
    }
    
    const user = await User.findOne({ telegramId });
    
    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–Ω—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const prevWinRate = user.winRate;
    
    user.winRate = winRate;
    await user.save();
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ctx.reply(`
‚úÖ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName || ''} (ID: ${user.telegramId})
üé≤ –°—Ç–∞—Ä—ã–π —à–∞–Ω—Å: ${prevWinRate}
üé≤ –ù–æ–≤—ã–π —à–∞–Ω—Å: ${winRate}

–ü—Ä–∏ —à–∞–Ω—Å–µ ${winRate}:
- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(winRate*100).toFixed(2)}%
- –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ: ${((1-winRate)*100).toFixed(2)}%
    `);
  } catch (error) {
    console.error('Winrate command error:', error);
    ctx.reply('Error updating win rate.');
  }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞
bot.command('setbalance', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ');
    const telegramId = args[1];
    const balance = parseInt(args[2]);
    
    if (!telegramId || isNaN(balance)) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –∏ —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance [telegramId] [amount]');
    }
    
    const user = await User.findOne({ telegramId });
    
    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const prevBalance = user.balance;
    const difference = balance - prevBalance;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = new Transaction({
      userId: user._id,
      telegramId: user.telegramId,
      amount: difference,
      type: 'admin_adjustment'
    });
    
    await transaction.save();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    user.balance = balance;
    await user.save();
    
    ctx.reply(`
‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName || ''} (ID: ${user.telegramId})
üí∞ –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: ${prevBalance} ‚≠ê
üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${balance} ‚≠ê
${difference >= 0 ? 'üìà' : 'üìâ'} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${difference > 0 ? '+' : ''}${difference} ‚≠ê

üïí –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞.
    `);
  } catch (error) {
    console.error('Setbalance command error:', error);
    ctx.reply('Error updating balance.');
  }
});

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('ban', async (ctx) => {
  try {
    const telegramId = ctx.message.text.split(' ')[1];
    
    if (!telegramId) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban [telegramId]');
    }
    
    const user = await User.findOne({ telegramId });
    
    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    user.isBanned = !user.isBanned;
    await user.save();
    
    ctx.reply(`
${user.isBanned ? 'üö´' : '‚úÖ'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} ${user.lastName || ''} (ID: ${user.telegramId}) —É—Å–ø–µ—à–Ω–æ ${user.isBanned ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}.

–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${user.isBanned ? 'üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù' : '‚úÖ –ê–ö–¢–ò–í–ï–ù'}
    `);
  } catch (error) {
    console.error('Ban command error:', error);
    ctx.reply('Error toggling ban status.');
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
bot.command('stats', async (ctx) => {
  try {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const args = ctx.message.text.split(' ');
    const period = args[1] || 'all'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let dateFilter = {};
    const now = new Date();
    
    if (period === 'day') {
      const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      dateFilter = { createdAt: { $gte: startOfDay } };
    } else if (period === 'week') {
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay());
      startOfWeek.setHours(0, 0, 0, 0);
      dateFilter = { createdAt: { $gte: startOfWeek } };
    } else if (period === 'month') {
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      dateFilter = { createdAt: { $gte: startOfMonth } };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [
      userStats,
      depositsData,
      withdrawalsData,
      betsData,
      winsData,
      gameStatsData,
      newUsers,
      activeUsers,
      bannedUsers
    ] = await Promise.all([
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      User.aggregate([
        { $group: { _id: null, total: { $sum: 1 } } }
      ]),
      
      // –î–µ–ø–æ–∑–∏—Ç—ã
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'deposit' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]),
      
      // –í—ã–≤–æ–¥—ã
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'withdrawal' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } } } }
      ]),
      
      // –°—Ç–∞–≤–∫–∏
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'bet' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } } } }
      ]),
      
      // –í—ã–∏–≥—Ä—ã—à–∏
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'win' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
      GameHistory.aggregate([
        { $match: dateFilter },
        { $group: { 
          _id: '$gameType', 
          count: { $sum: 1 },
          totalBet: { $sum: '$betAmount' },
          totalWin: { $sum: '$winAmount' },
          uniqueUsers: { $addToSet: '$telegramId' }
        }}
      ]),
      
      // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      User.countDocuments({ ...dateFilter }),
      
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–¥–µ–ª–∞–≤—à–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥)
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'bet' } },
        { $group: { _id: '$telegramId' } },
        { $group: { _id: null, count: { $sum: 1 } } }
      ]),
      
      // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      User.countDocuments({ isBanned: true })
    ]);
    
    // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    const totalUsers = userStats[0]?.total || 0;
    const deposits = depositsData[0]?.total || 0;
    const withdrawals = withdrawalsData[0]?.total || 0;
    const bets = betsData[0]?.total || 0;
    const wins = winsData[0]?.total || 0;
    
    const grossProfit = bets - wins;
    const profitMargin = bets > 0 ? (grossProfit / bets) * 100 : 0;
    const netDeposits = deposits - withdrawals;
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const activeCount = activeUsers[0]?.count || 0;
    const activeRate = totalUsers > 0 ? (activeCount / totalUsers) * 100 : 0;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const gameStats = gameStatsData.map(game => {
      const profit = game.totalBet - game.totalWin;
      const profitMargin = game.totalBet > 0 ? (profit / game.totalBet) * 100 : 0;
      const uniquePlayers = game.uniqueUsers ? game.uniqueUsers.length : 0;
      
      return {
        gameType: game._id,
        count: game.count,
        totalBet: game.totalBet,
        totalWin: game.totalWin,
        profit,
        profitMargin,
        uniquePlayers
      };
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –ø—Ä–∏–±—ã–ª–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    gameStats.sort((a, b) => b.profit - a.profit);
    
    // –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    let periodTitle = '';
    switch(period) {
      case 'day': periodTitle = '–∑–∞ —Å–µ–≥–æ–¥–Ω—è'; break;
      case 'week': periodTitle = '–∑–∞ –Ω–µ–¥–µ–ª—é'; break;
      case 'month': periodTitle = '–∑–∞ –º–µ—Å—è—Ü'; break;
      default: periodTitle = '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'; break;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let message = `üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ó–ò–ù–û* ${periodTitle}\n\n`;
    
    message += `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`;
    message += `‚Ä¢ –ù–æ–≤—ã—Ö ${periodTitle}: ${newUsers}\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö ${periodTitle}: ${activeCount} (${activeRate.toFixed(2)}%)\n`;
    message += `‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${bannedUsers}\n\n`;
    
    message += `üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n`;
    message += `‚Ä¢ –î–µ–ø–æ–∑–∏—Ç—ã: ${deposits} ‚≠ê\n`;
    message += `‚Ä¢ –í—ã–≤–æ–¥—ã: ${withdrawals} ‚≠ê\n`;
    message += `‚Ä¢ –°—Ç–∞–≤–∫–∏: ${bets} ‚≠ê\n`;
    message += `‚Ä¢ –í—ã–∏–≥—Ä—ã—à–∏: ${wins} ‚≠ê\n`;
    message += `‚Ä¢ –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: ${grossProfit} ‚≠ê (${profitMargin.toFixed(2)}%)\n`;
    message += `‚Ä¢ –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ç–æ–∫: ${netDeposits} ‚≠ê\n\n`;
    
    message += `üé≤ *–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏–≥—Ä:*\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º
    for (const game of gameStats) {
      message += `${getGameEmoji(game.gameType)} ${capitalizeFirstLetter(game.gameType)}:\n`;
      message += `  ‚Ä¢ –°–µ—Å—Å–∏–π: ${game.count} | –ò–≥—Ä–æ–∫–æ–≤: ${game.uniquePlayers}\n`;
      message += `  ‚Ä¢ –°—Ç–∞–≤–∫–∏: ${game.totalBet} ‚≠ê | –í—ã–∏–≥—Ä—ã—à–∏: ${game.totalWin} ‚≠ê\n`;
      message += `  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${game.profit} ‚≠ê (${game.profitMargin.toFixed(2)}%)\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    message += `\nüìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:*\n`;
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ROI
    if (profitMargin < 10) {
      message += `‚ö†Ô∏è –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (${profitMargin.toFixed(2)}%) –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π (10%+).\n`;
      message += `   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —à–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.\n`;
    } else if (profitMargin > 30) {
      message += `‚ö†Ô∏è –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (${profitMargin.toFixed(2)}%) —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è.\n`;
      message += `   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å —à–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤.\n`;
    } else {
      message += `‚úÖ –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (${profitMargin.toFixed(2)}%) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.\n`;
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    if (gameStats.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø—Ä–∏–±—ã–ª—å–Ω—É—é –∏ —Å–∞–º—É—é —É–±—ã—Ç–æ—á–Ω—É—é –∏–≥—Ä—É
      const mostProfitable = gameStats[0];
      const leastProfitable = gameStats[gameStats.length - 1];
      
      if (mostProfitable.profit > 0) {
        message += `üí° –°–∞–º–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∏–≥—Ä–∞: ${capitalizeFirstLetter(mostProfitable.gameType)} (${mostProfitable.profit} ‚≠ê)\n`;
      }
      
      if (leastProfitable.profit < 0) {
        message += `‚ö†Ô∏è –£–±—ã—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞: ${capitalizeFirstLetter(leastProfitable.gameType)} (${leastProfitable.profit} ‚≠ê)\n`;
        message += `   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã.\n`;
      }
    }
    
    ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Stats command error:', error);
    ctx.reply('Error retrieving statistics.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
bot.command('income', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ');
    const period = args[1] || 'all';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let dateFilter = {};
    let periodTitle = '';
    const now = new Date();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if (period === 'day') {
      const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      dateFilter = { createdAt: { $gte: startOfDay } };
      periodTitle = '–∑–∞ —Å–µ–≥–æ–¥–Ω—è';
    } else if (period === 'week') {
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay());
      startOfWeek.setHours(0, 0, 0, 0);
      dateFilter = { createdAt: { $gte: startOfWeek } };
      periodTitle = '–∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é';
    } else if (period === 'month') {
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      dateFilter = { createdAt: { $gte: startOfMonth } };
      periodTitle = '–∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü';
    } else if (period.match(/^\d{4}-\d{2}-\d{2}$/)) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
      const [year, month, day] = period.split('-').map(Number);
      const startDate = new Date(year, month - 1, day);
      const endDate = new Date(year, month - 1, day + 1);
      dateFilter = { createdAt: { $gte: startDate, $lt: endDate } };
      periodTitle = `–∑–∞ ${day}.${month}.${year}`;
    } else if (args.length >= 3 && args[1].match(/^\d{4}-\d{2}-\d{2}$/) && args[2].match(/^\d{4}-\d{2}-\d{2}$/)) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–µ –¥–∞—Ç—ã - –ø–µ—Ä–∏–æ–¥
      const [startYear, startMonth, startDay] = args[1].split('-').map(Number);
      const [endYear, endMonth, endDay] = args[2].split('-').map(Number);
      
      const startDate = new Date(startYear, startMonth - 1, startDay);
      const endDate = new Date(endYear, endMonth - 1, endDay + 1);
      
      dateFilter = { createdAt: { $gte: startDate, $lt: endDate } };
      periodTitle = `—Å ${startDay}.${startMonth}.${startYear} –ø–æ ${endDay}.${endMonth}.${endYear}`;
    } else {
      periodTitle = '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    const [
      deposits,
      withdrawals,
      bets,
      wins,
      adminAdjustments,
      dailyStats
    ] = await Promise.all([
      // –î–µ–ø–æ–∑–∏—Ç—ã
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'deposit' } },
        { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
      ]),
      
      // –í—ã–≤–æ–¥—ã
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'withdrawal' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } }, count: { $sum: 1 } } }
      ]),
      
      // –°—Ç–∞–≤–∫–∏
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'bet' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } }, count: { $sum: 1 } } }
      ]),
      
      // –í—ã–∏–≥—Ä—ã—à–∏
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'win' } },
        { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
      ]),
      
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'admin_adjustment' } },
        { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
      ]),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
      Transaction.aggregate([
        { $match: dateFilter },
        {
          $group: {
            _id: {
              year: { $year: '$createdAt' },
              month: { $month: '$createdAt' },
              day: { $dayOfMonth: '$createdAt' },
              type: '$type'
            },
            total: { $sum: '$amount' },
            count: { $sum: 1 }
          }
        },
        { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } }
      ])
    ]);
    
    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const depositsTotal = deposits[0]?.total || 0;
    const depositsCount = deposits[0]?.count || 0;
    
    const withdrawalsTotal = withdrawals[0]?.total || 0;
    const withdrawalsCount = withdrawals[0]?.count || 0;
    
    const betsTotal = bets[0]?.total || 0;
    const betsCount = bets[0]?.count || 0;
    
    const winsTotal = wins[0]?.total || 0;
    const winsCount = wins[0]?.count || 0;
    
    const adjustmentsTotal = adminAdjustments[0]?.total || 0;
    const adjustmentsCount = adminAdjustments[0]?.count || 0;
    
    // –†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    const grossProfit = betsTotal - winsTotal;
    const profitMargin = betsTotal > 0 ? (grossProfit / betsTotal) * 100 : 0;
    const netDeposits = depositsTotal - withdrawalsTotal;
    
    // –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π
    const avgDeposit = depositsCount > 0 ? depositsTotal / depositsCount : 0;
    const avgWithdrawal = withdrawalsCount > 0 ? withdrawalsTotal / withdrawalsCount : 0;
    const avgBet = betsCount > 0 ? betsTotal / betsCount : 0;
    const avgWin = winsCount > 0 ? winsTotal / winsCount : 0;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let message = `üí∞ *–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢* ${periodTitle}\n\n`;
    
    message += `üì• *–î–µ–ø–æ–∑–∏—Ç—ã:*\n`;
    message += `‚Ä¢ –°—É–º–º–∞: ${depositsTotal} ‚≠ê\n`;
    message += `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${depositsCount}\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: ${avgDeposit.toFixed(2)} ‚≠ê\n\n`;
    
    message += `üì§ *–í—ã–≤–æ–¥—ã:*\n`;
    message += `‚Ä¢ –°—É–º–º–∞: ${withdrawalsTotal} ‚≠ê\n`;
    message += `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${withdrawalsCount}\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: ${avgWithdrawal.toFixed(2)} ‚≠ê\n\n`;
    
    message += `üéÆ *–ò–≥—Ä–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n`;
    message += `‚Ä¢ –°—Ç–∞–≤–∫–∏: ${betsTotal} ‚≠ê (${betsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –í—ã–∏–≥—Ä—ã—à–∏: ${winsTotal} ‚≠ê (${winsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: ${avgBet.toFixed(2)} ‚≠ê\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à: ${avgWin.toFixed(2)} ‚≠ê\n\n`;
    
    message += `‚öñÔ∏è *–ü—Ä–∏–±—ã–ª—å –∏ –ø–æ—Ç–µ—Ä–∏:*\n`;
    message += `‚Ä¢ –ü—Ä–∏–±—ã–ª—å –æ—Ç –∏–≥—Ä: ${grossProfit} ‚≠ê\n`;
    message += `‚Ä¢ –ú–∞—Ä–∂–∞: ${profitMargin.toFixed(2)}%\n`;
    message += `‚Ä¢ –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ç–æ–∫: ${netDeposits} ‚≠ê\n`;
    message += `‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: ${adjustmentsTotal} ‚≠ê (${adjustmentsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    message += `üìä *–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n`;
    
    // RTP (Return To Player) - –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞–º
    const rtp = betsTotal > 0 ? (winsTotal / betsTotal) * 100 : 0;
    message += `‚Ä¢ RTP: ${rtp.toFixed(2)}% (–≤–æ–∑–≤—Ä–∞—Ç –∏–≥—Ä–æ–∫–∞–º)\n`;
    
    // –û–±–æ—Ä–æ—Ç - –æ–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫
    message += `‚Ä¢ –û–±–æ—Ä–æ—Ç: ${betsTotal} ‚≠ê\n`;
    
    // GGR (Gross Gaming Revenue) - –≤–∞–ª–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–æ—Ö–æ–¥
    message += `‚Ä¢ GGR: ${grossProfit} ‚≠ê (–≤–∞–ª–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–æ—Ö–æ–¥)\n`;
    
    // NGR (Net Gaming Revenue) - —á–∏—Å—Ç—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤/–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    const ngr = grossProfit + adjustmentsTotal;
    message += `‚Ä¢ NGR: ${ngr} ‚≠ê (—á–∏—Å—Ç—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–æ—Ö–æ–¥)\n`;
    
    ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Income command error:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Ö–æ–¥–æ–≤.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä
bot.command('games', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ');
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let period = 'all';
    let sortField = 'profit';
    let sortOrder = -1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for (const arg of args.slice(1)) {
      if (['day', 'week', 'month', 'year', 'all'].includes(arg)) {
        period = arg;
      } else if (arg.startsWith('sort:')) {
        sortField = arg.replace('sort:', '');
        if (sortField.endsWith(':asc')) {
          sortField = sortField.replace(':asc', '');
          sortOrder = 1;
        }
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    let dateFilter = {};
    let periodTitle = '';
    const now = new Date();
    
    if (period === 'day') {
      const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      dateFilter = { createdAt: { $gte: startOfDay } };
      periodTitle = '–∑–∞ —Å–µ–≥–æ–¥–Ω—è';
    } else if (period === 'week') {
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay());
      startOfWeek.setHours(0, 0, 0, 0);
      dateFilter = { createdAt: { $gte: startOfWeek } };
      periodTitle = '–∑–∞ –Ω–µ–¥–µ–ª—é';
    } else if (period === 'month') {
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      dateFilter = { createdAt: { $gte: startOfMonth } };
      periodTitle = '–∑–∞ –º–µ—Å—è—Ü';
    } else if (period === 'year') {
      const startOfYear = new Date(now.getFullYear(), 0, 1);
      dateFilter = { createdAt: { $gte: startOfYear } };
      periodTitle = '–∑–∞ –≥–æ–¥';
    } else {
      periodTitle = '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º
    const gameStats = await GameHistory.aggregate([
      { $match: dateFilter },
      { 
        $group: { 
          _id: '$gameType', 
          count: { $sum: 1 },
          totalBet: { $sum: '$betAmount' },
          totalWin: { $sum: '$winAmount' },
          uniqueUsers: { $addToSet: '$telegramId' },
          wins: { $sum: { $cond: [{ $eq: ['$outcome', 'win'] }, 1, 0] } },
          losses: { $sum: { $cond: [{ $eq: ['$outcome', 'lose'] }, 1, 0] } }
        }
      }
    ]);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const enhancedStats = gameStats.map(game => {
      const profit = game.totalBet - game.totalWin;
      const profitMargin = game.totalBet > 0 ? (profit / game.totalBet) * 100 : 0;
      const winRate = game.count > 0 ? (game.wins / game.count) * 100 : 0;
      const uniqueCount = game.uniqueUsers ? game.uniqueUsers.length : 0;
      const avgBet = game.count > 0 ? game.totalBet / game.count : 0;
      
      return {
        gameType: game._id,
        count: game.count,
        totalBet: game.totalBet,
        totalWin: game.totalWin,
        profit,
        profitMargin,
        winRate,
        uniqueUsers: uniqueCount,
        avgBet,
        wins: game.wins,
        losses: game.losses
      };
    });
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    enhancedStats.sort((a, b) => {
      let valueA, valueB;
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      switch(sortField) {
        case 'count': valueA = a.count; valueB = b.count; break;
        case 'bets': valueA = a.totalBet; valueB = b.totalBet; break;
        case 'wins': valueA = a.totalWin; valueB = b.totalWin; break;
        case 'margin': valueA = a.profitMargin; valueB = b.profitMargin; break;
        case 'winrate': valueA = a.winRate; valueB = b.winRate; break;
        case 'players': valueA = a.uniqueUsers; valueB = b.uniqueUsers; break;
        case 'avgbet': valueA = a.avgBet; valueB = b.avgBet; break;
        default: valueA = a.profit; valueB = b.profit; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
      }
      
      return (valueA - valueB) * sortOrder;
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üéÆ *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†* ${periodTitle}\n\n`;
    
    if (enhancedStats.length === 0) {
      message += `‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.`;
    } else {
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º
      const totalSessions = enhancedStats.reduce((sum, game) => sum + game.count, 0);
      const totalBets = enhancedStats.reduce((sum, game) => sum + game.totalBet, 0);
      const totalWins = enhancedStats.reduce((sum, game) => sum + game.totalWin, 0);
      const totalProfit = totalBets - totalWins;
      const overallMargin = totalBets > 0 ? (totalProfit / totalBets) * 100 : 0;
      
      message += `üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: ${totalSessions}\n`;
      message += `‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º —Å—Ç–∞–≤–æ–∫: ${totalBets} ‚≠ê\n`;
      message += `‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –≤—ã–∏–≥—Ä—ã—à–µ–π: ${totalWins} ‚≠ê\n`;
      message += `‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${totalProfit} ‚≠ê\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: ${overallMargin.toFixed(2)}%\n\n`;
      
      message += `üé≤ *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∏–≥—Ä–∞–º:*\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ
      for (const game of enhancedStats) {
        message += `${getGameEmoji(game.gameType)} *${capitalizeFirstLetter(game.gameType)}*\n`;
        message += `‚Ä¢ –°–µ—Å—Å–∏–∏: ${game.count} (${((game.count / totalSessions) * 100).toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ)\n`;
        message += `‚Ä¢ –ò–≥—Ä–æ–∫–∏: ${game.uniqueUsers}\n`;
        message += `‚Ä¢ –°—Ç–∞–≤–∫–∏: ${game.totalBet} ‚≠ê | –í—ã–∏–≥—Ä—ã—à–∏: ${game.totalWin} ‚≠ê\n`;
        message += `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${game.profit} ‚≠ê (–º–∞—Ä–∂–∞: ${game.profitMargin.toFixed(2)}%)\n`;
        message += `‚Ä¢ –ü–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è: ${game.wins}/${game.losses} (${game.winRate.toFixed(2)}%)\n`;
        message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: ${game.avgBet.toFixed(2)} ‚≠ê\n\n`;
      }
      
      // –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
      message += `üèÜ *–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä:*\n`;
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ—Å—Å–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
      const popularityRanking = [...enhancedStats].sort((a, b) => b.count - a.count);
      message += `‚Ä¢ –ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏: ${popularityRanking.slice(0, 3).map(g => capitalizeFirstLetter(g.gameType)).join(', ')}\n`;
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
      const profitRanking = [...enhancedStats].sort((a, b) => b.profit - a.profit);
      message += `‚Ä¢ –ü–æ –ø—Ä–∏–±—ã–ª–∏: ${profitRanking.slice(0, 3).map(g => capitalizeFirstLetter(g.gameType)).join(', ')}\n`;
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∞—Ä–∂–µ
      const marginRanking = [...enhancedStats].sort((a, b) => b.profitMargin - a.profitMargin);
      message += `‚Ä¢ –ü–æ –º–∞—Ä–∂–µ: ${marginRanking.slice(0, 3).map(g => capitalizeFirstLetter(g.gameType)).join(', ')}\n`;
    }
    
    ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Games analysis error:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
bot.command('topplayers', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ');
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let limit = 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    let metric = 'bets'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É —Å—Ç–∞–≤–æ–∫
    let period = 'all'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for (const arg of args.slice(1)) {
      if (!isNaN(parseInt(arg))) {
        limit = parseInt(arg);
      } else if (['bets', 'wins', 'profit', 'games', 'winrate', 'balance'].includes(arg)) {
        metric = arg;
      } else if (['day', 'week', 'month', 'year', 'all'].includes(arg)) {
        period = arg;
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    let dateFilter = {};
    let periodTitle = '';
    const now = new Date();
    
    if (period === 'day') {
      const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      dateFilter = { createdAt: { $gte: startOfDay } };
      periodTitle = '–∑–∞ —Å–µ–≥–æ–¥–Ω—è';
    } else if (period === 'week') {
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay());
      startOfWeek.setHours(0, 0, 0, 0);
      dateFilter = { createdAt: { $gte: startOfWeek } };
      periodTitle = '–∑–∞ –Ω–µ–¥–µ–ª—é';
    } else if (period === 'month') {
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      dateFilter = { createdAt: { $gte: startOfMonth } };
      periodTitle = '–∑–∞ –º–µ—Å—è—Ü';
    } else if (period === 'year') {
      const startOfYear = new Date(now.getFullYear(), 0, 1);
      dateFilter = { createdAt: { $gte: startOfYear } };
      periodTitle = '–∑–∞ –≥–æ–¥';
    } else {
      periodTitle = '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    let topPlayers = [];
    let metricTitle = '';
    
    if (metric === 'balance') {
      // –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∞ - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      metricTitle = '–ø–æ –±–∞–ª–∞–Ω—Å—É';
      topPlayers = await User.find({ isBanned: false })
                           .sort({ balance: -1 })
                           .limit(limit);
      
      topPlayers = topPlayers.map(user => ({
        telegramId: user.telegramId,
        firstName: user.firstName,
        lastName: user.lastName,
        username: user.username,
        value: user.balance,
        metric: 'balance'
      }));
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
      
      switch(metric) {
        case 'bets':
          metricTitle = '–ø–æ –æ–±—ä–µ–º—É —Å—Ç–∞–≤–æ–∫';
          // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Å—É–º–º–µ —Å—Ç–∞–≤–æ–∫
          const betsAgg = await Transaction.aggregate([
            { $match: { ...dateFilter, type: 'bet' } },
            { $group: { 
              _id: '$telegramId', 
              total: { $sum: { $abs: '$amount' } },
              count: { $sum: 1 }
            }},
            { $sort: { total: -1 } },
            { $limit: limit }
          ]);
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          for (const player of betsAgg) {
            const user = await User.findOne({ telegramId: player._id });
            if (user) {
              topPlayers.push({
                telegramId: user.telegramId,
                firstName: user.firstName,
                lastName: user.lastName,
                username: user.username,
                value: player.total,
                count: player.count,
                metric: 'bets'
              });
            }
          }
          break;
          
        case 'wins':
          metricTitle = '–ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º';
          // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Å—É–º–º–µ –≤—ã–∏–≥—Ä—ã—à–µ–π
          const winsAgg = await Transaction.aggregate([
            { $match: { ...dateFilter, type: 'win' } },
            { $group: { 
              _id: '$telegramId', 
              total: { $sum: '$amount' },
              count: { $sum: 1 }
            }},
            { $sort: { total: -1 } },
            { $limit: limit }
          ]);
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          for (const player of winsAgg) {
            const user = await User.findOne({ telegramId: player._id });
            if (user) {
              topPlayers.push({
                telegramId: user.telegramId,
                firstName: user.firstName,
                lastName: user.lastName,
                username: user.username,
                value: player.total,
                count: player.count,
                metric: 'wins'
              });
            }
          }
          break;
          
        case 'games':
          metricTitle = '–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä';
          // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä
          const gamesAgg = await GameHistory.aggregate([
            { $match: dateFilter },
            { $group: { 
              _id: '$telegramId', 
              count: { $sum: 1 }
            }},
            { $sort: { count: -1 } },
            { $limit: limit }
          ]);
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          for (const player of gamesAgg) {
            const user = await User.findOne({ telegramId: player._id });
            if (user) {
              topPlayers.push({
                telegramId: user.telegramId,
                firstName: user.firstName,
                lastName: user.lastName,
                username: user.username,
                value: player.count,
                metric: 'games'
              });
            }
          }
          break;
          
        case 'profit':
          metricTitle = '–ø–æ –ø—Ä–∏–±—ã–ª–∏ –∫–∞–∑–∏–Ω–æ';
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞–≤–∫–∞–º –∏ –≤—ã–∏–≥—Ä—ã—à–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const allUsers = await User.find({});
          const profitData = [];
          
          for (const user of allUsers) {
            // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–æ–∫
            const bets = await Transaction.aggregate([
              { $match: { ...dateFilter, telegramId: user.telegramId, type: 'bet' } },
              { $group: { _id: null, total: { $sum: { $abs: '$amount' } } } }
            ]);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–µ–π
            const wins = await Transaction.aggregate([
              { $match: { ...dateFilter, telegramId: user.telegramId, type: 'win' } },
              { $group: { _id: null, total: { $sum: '$amount' } } }
            ]);
            
            const betsTotal = bets[0]?.total || 0;
            const winsTotal = wins[0]?.total || 0;
            const profit = betsTotal - winsTotal;
            
            profitData.push({
              telegramId: user.telegramId,
              firstName: user.firstName,
              lastName: user.lastName,
              username: user.username,
              value: profit,
              bets: betsTotal,
              wins: winsTotal,
              metric: 'profit'
            });
          }
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          profitData.sort((a, b) => b.value - a.value);
          topPlayers = profitData.slice(0, limit);
          break;
          
        case 'winrate':
          metricTitle = '–ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ–±–µ–¥';
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const allGameUsers = await User.find({});
          const winrateData = [];
          
          for (const user of allGameUsers) {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
            const games = await GameHistory.aggregate([
              { $match: { ...dateFilter, telegramId: user.telegramId } },
              { $group: { 
                _id: null, 
                total: { $sum: 1 },
                wins: { $sum: { $cond: [{ $eq: ['$outcome', 'win'] }, 1, 0] } }
              }}
            ]);
            
            if (games.length > 0 && games[0].total >= 10) { // –ú–∏–Ω–∏–º—É–º 10 –∏–≥—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
              const total = games[0].total;
              const wins = games[0].wins;
              const winrate = (wins / total) * 100;
              
              winrateData.push({
                telegramId: user.telegramId,
                firstName: user.firstName,
                lastName: user.lastName,
                username: user.username,
                value: winrate,
                games: total,
                wins: wins,
                metric: 'winrate'
              });
            }
          }
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ–±–µ–¥ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          winrateData.sort((a, b) => b.value - a.value);
          topPlayers = winrateData.slice(0, limit);
          break;
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üèÜ *–¢–û–ü ${limit} –ò–ì–†–û–ö–û–í* ${metricTitle} ${periodTitle}\n\n`;
    
    if (topPlayers.length === 0) {
      message += `‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.`;
    } else {
      for (let i = 0; i < topPlayers.length; i++) {
        const player = topPlayers[i];
        const medal = i === 0 ? 'ü•á' : (i === 1 ? 'ü•à' : (i === 2 ? 'ü•â' : `${i+1}.`));
        
        message += `${medal} ${player.firstName} ${player.lastName || ''}\n`;
        message += `üÜî ID: ${player.telegramId}\n`;
        
        // –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç—Ä–∏–∫–∏
        switch(player.metric) {
          case 'balance':
            message += `üí∞ –ë–∞–ª–∞–Ω—Å: ${player.value} ‚≠ê\n`;
            break;
          case 'bets':
            message += `üéÆ –°—Ç–∞–≤–∫–∏: ${player.value} ‚≠ê (${player.count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
            break;
          case 'wins':
            message += `üèÜ –í—ã–∏–≥—Ä—ã—à–∏: ${player.value} ‚≠ê (${player.count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
            break;
          case 'games':
            message += `üé≤ –ò–≥—Ä: ${player.value}\n`;
            break;
          case 'profit':
            message += `üí∏ –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ: ${player.value} ‚≠ê\n`;
            message += `   (–°—Ç–∞–≤–∫–∏: ${player.bets} ‚≠ê | –í—ã–∏–≥—Ä—ã—à–∏: ${player.wins} ‚≠ê)\n`;
            break;
          case 'winrate':
            message += `üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${player.value.toFixed(2)}%\n`;
            message += `   (–ò–≥—Ä: ${player.games} | –ü–æ–±–µ–¥: ${player.wins})\n`;
            break;
        }
        
        message += `\n`;
      }
    }
    
    ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Topplayers command error:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤.');
  }
});

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
bot.command('dailyreport', async (ctx) => {
  try {
    const now = new Date();
    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const dateFilter = { createdAt: { $gte: startOfDay } };
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    const formattedDate = startOfDay.toLocaleDateString('ru-RU', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric' 
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const [
      newUsers,
      activeUsers,
      deposits,
      withdrawals,
      bets,
      wins,
      games
    ] = await Promise.all([
      // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      User.countDocuments({ ...dateFilter }),
      
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–¥–µ–ª–∞–≤—à–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É)
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'bet' } },
        { $group: { _id: '$telegramId' } },
        { $group: { _id: null, count: { $sum: 1 } } }
      ]),
      
      // –î–µ–ø–æ–∑–∏—Ç—ã
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'deposit' } },
        { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
      ]),
      
      // –í—ã–≤–æ–¥—ã
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'withdrawal' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } }, count: { $sum: 1 } } }
      ]),
      
      // –°—Ç–∞–≤–∫–∏
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'bet' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } }, count: { $sum: 1 } } }
      ]),
      
      // –í—ã–∏–≥—Ä—ã—à–∏
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'win' } },
        { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
      ]),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
      GameHistory.aggregate([
        { $match: dateFilter },
        { $group: { 
          _id: '$gameType', 
          count: { $sum: 1 },
          totalBet: { $sum: '$betAmount' },
          totalWin: { $sum: '$winAmount' }
        }}
      ])
    ]);
    
    // –†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    const activeCount = activeUsers[0]?.count || 0;
    
    const depositsTotal = deposits[0]?.total || 0;
    const depositsCount = deposits[0]?.count || 0;
    
    const withdrawalsTotal = withdrawals[0]?.total || 0;
    const withdrawalsCount = withdrawals[0]?.count || 0;
    
    const betsTotal = bets[0]?.total || 0;
    const betsCount = bets[0]?.count || 0;
    
    const winsTotal = wins[0]?.total || 0;
    const winsCount = wins[0]?.count || 0;
    
    const profit = betsTotal - winsTotal;
    const profitMargin = betsTotal > 0 ? (profit / betsTotal) * 100 : 0;
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä –ø–æ –ø—Ä–∏–±—ã–ª–∏
    const sortedGames = games.map(game => {
      return {
        gameType: game._id,
        count: game.count,
        totalBet: game.totalBet,
        totalWin: game.totalWin,
        profit: game.totalBet - game.totalWin
      };
    }).sort((a, b) => b.profit - a.profit);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    let message = `üìÖ *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢* –∑–∞ ${formattedDate}\n\n`;
    
    message += `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n`;
    message += `‚Ä¢ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${newUsers}\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${activeCount}\n\n`;
    
    message += `üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n`;
    message += `‚Ä¢ –î–µ–ø–æ–∑–∏—Ç—ã: ${depositsTotal} ‚≠ê (${depositsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –í—ã–≤–æ–¥—ã: ${withdrawalsTotal} ‚≠ê (${withdrawalsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –°—Ç–∞–≤–∫–∏: ${betsTotal} ‚≠ê (${betsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –í—ã–∏–≥—Ä—ã—à–∏: ${winsTotal} ‚≠ê (${winsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${profit} ‚≠ê (${profitMargin.toFixed(2)}%)\n\n`;
    
    message += `üéÆ *–ò–≥—Ä—ã:*\n`;
    for (const game of sortedGames) {
      const gameProfit = game.totalBet - game.totalWin;
      const gameMargin = game.totalBet > 0 ? (gameProfit / game.totalBet) * 100 : 0;
      
      message += `${getGameEmoji(game.gameType)} ${capitalizeFirstLetter(game.gameType)}: ${game.count} –∏–≥—Ä\n`;
      message += `   –ü—Ä–∏–±—ã–ª—å: ${gameProfit} ‚≠ê (${gameMargin.toFixed(2)}%)\n`;
    }
    
    message += `\nüìà *–õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–Ω—è:*\n`;
    
    // –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–Ω—è
    if (sortedGames.length > 0) {
      message += `‚Ä¢ –°–∞–º–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∏–≥—Ä–∞: ${capitalizeFirstLetter(sortedGames[0].gameType)}\n`;
    }
    
    // –ò–≥—Ä–æ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –∏–≥—Ä
    const topPlayerByGames = await GameHistory.aggregate([
      { $match: dateFilter },
      { $group: { _id: '$telegramId', count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: 1 }
    ]);
    
    if (topPlayerByGames.length > 0) {
      const topPlayer = await User.findOne({ telegramId: topPlayerByGames[0]._id });
      if (topPlayer) {
        message += `‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫: ${topPlayer.firstName} (ID: ${topPlayer.telegramId}) - ${topPlayerByGames[0].count} –∏–≥—Ä\n`;
      }
    }
    
    // –ò–≥—Ä–æ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –≤—ã–∏–≥—Ä—ã—à–µ–º
    const topPlayerByWins = await Transaction.aggregate([
      { $match: { ...dateFilter, type: 'win' } },
      { $group: { _id: '$telegramId', total: { $sum: '$amount' } } },
      { $sort: { total: -1 } },
      { $limit: 1 }
    ]);
    
    if (topPlayerByWins.length > 0) {
      const topWinner = await User.findOne({ telegramId: topPlayerByWins[0]._id });
      if (topWinner) {
        message += `‚Ä¢ –ö—Ä—É–ø–Ω–µ–π—à–∏–π –≤—ã–∏–≥—Ä—ã—à: ${topWinner.firstName} (ID: ${topWinner.telegramId}) - ${topPlayerByWins[0].total} ‚≠ê\n`;
      }
    }
    
    ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Daily report error:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.');
  }
});

// –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
bot.command('weeklyreport', async (ctx) => {
  try {
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay());
    startOfWeek.setHours(0, 0, 0, 0);
    
    const dateFilter = { createdAt: { $gte: startOfWeek } };
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
    const startDate = startOfWeek.toLocaleDateString('ru-RU', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric' 
    });
    
    const endDate = new Date().toLocaleDateString('ru-RU', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric' 
    });
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ—Ç—á–µ—Ç–µ,
    // –Ω–æ —Å –¥—Ä—É–≥–∏–º dateFilter –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    
    const [
      newUsers,
      activeUsers,
      deposits,
      withdrawals,
      bets,
      wins,
      games,
      dailyStats
    ] = await Promise.all([
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –æ—Ç—á–µ—Ç—É
      User.countDocuments({ ...dateFilter }),
      
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'bet' } },
        { $group: { _id: '$telegramId' } },
        { $group: { _id: null, count: { $sum: 1 } } }
      ]),
      
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'deposit' } },
        { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
      ]),
      
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'withdrawal' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } }, count: { $sum: 1 } } }
      ]),
      
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'bet' } },
        { $group: { _id: null, total: { $sum: { $abs: '$amount' } }, count: { $sum: 1 } } }
      ]),
      
      Transaction.aggregate([
        { $match: { ...dateFilter, type: 'win' } },
        { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
      ]),
      
      GameHistory.aggregate([
        { $match: dateFilter },
        { $group: { 
          _id: '$gameType', 
          count: { $sum: 1 },
          totalBet: { $sum: '$betAmount' },
          totalWin: { $sum: '$winAmount' }
        }}
      ]),
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
      Transaction.aggregate([
        { $match: { ...dateFilter, type: { $in: ['bet', 'win'] } } },
        {
          $group: {
            _id: {
              day: { $dayOfWeek: '$createdAt' },
              type: '$type'
            },
            total: { $sum: { $cond: [{ $eq: ['$type', 'bet'] }, { $abs: '$amount' }, '$amount'] } },
            count: { $sum: 1 }
          }
        },
        { $sort: { '_id.day': 1 } }
      ])
    ]);
    
    // –†–∞—Å—á–µ—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –æ—Ç—á–µ—Ç—É
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const dayNames = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    const dayStats = {};
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    for (let i = 0; i < 7; i++) {
      dayStats[i+1] = { bets: 0, wins: 0, profit: 0, count: 0 };
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
    for (const stat of dailyStats) {
      const day = stat._id.day;
      const type = stat._id.type;
      
      if (type === 'bet') {
        dayStats[day].bets = stat.total;
        dayStats[day].count = stat.count;
      } else if (type === 'win') {
        dayStats[day].wins = stat.total;
      }
    }
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –ø–æ –¥–Ω—è–º
    for (const day in dayStats) {
      dayStats[day].profit = dayStats[day].bets - dayStats[day].wins;
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    // ...

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let message = `üìä *–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢* (${startDate} - ${endDate})\n\n`;
    
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –æ—Ç—á–µ—Ç—É, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const activeCount = activeUsers[0]?.count || 0;
    
    const depositsTotal = deposits[0]?.total || 0;
    const depositsCount = deposits[0]?.count || 0;
    
    const withdrawalsTotal = withdrawals[0]?.total || 0;
    const withdrawalsCount = withdrawals[0]?.count || 0;
    
    const betsTotal = bets[0]?.total || 0;
    const betsCount = bets[0]?.count || 0;
    
    const winsTotal = wins[0]?.total || 0;
    const winsCount = wins[0]?.count || 0;
    
    const profit = betsTotal - winsTotal;
    const profitMargin = betsTotal > 0 ? (profit / betsTotal) * 100 : 0;
    
    message += `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n`;
    message += `‚Ä¢ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${newUsers}\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${activeCount}\n\n`;
    
    message += `üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n`;
    message += `‚Ä¢ –î–µ–ø–æ–∑–∏—Ç—ã: ${depositsTotal} ‚≠ê (${depositsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –í—ã–≤–æ–¥—ã: ${withdrawalsTotal} ‚≠ê (${withdrawalsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –°—Ç–∞–≤–∫–∏: ${betsTotal} ‚≠ê (${betsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –í—ã–∏–≥—Ä—ã—à–∏: ${winsTotal} ‚≠ê (${winsCount} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
    message += `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${profit} ‚≠ê (${profitMargin.toFixed(2)}%)\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    message += `üìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:*\n`;
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –∏ —É–±—ã—Ç–æ—á–Ω—ã–π –¥–µ–Ω—å
    let bestDay = null;
    let worstDay = null;
    let bestProfit = -Infinity;
    let worstProfit = Infinity;
    
    for (const day in dayStats) {
      const profit = dayStats[day].profit;
      
      if (dayStats[day].count > 0) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–≥—Ä—ã –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        if (profit > bestProfit) {
          bestProfit = profit;
          bestDay = day;
        }
        
        if (profit < worstProfit) {
          worstProfit = profit;
          worstDay = day;
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –≤ –æ—Ç—á–µ—Ç
      if (dayStats[day].count > 0) {
        const profitMargin = dayStats[day].bets > 0 ? (dayStats[day].profit / dayStats[day].bets) * 100 : 0;
        message += `‚Ä¢ ${dayNames[parseInt(day)-1]}: ${dayStats[day].profit} ‚≠ê (${profitMargin.toFixed(2)}%)\n`;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å
    if (bestDay !== null) {
      message += `\nüîù –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –¥–µ–Ω—å: ${dayNames[parseInt(bestDay)-1]} (${bestProfit} ‚≠ê)\n`;
    }
    
    if (worstDay !== null && worstProfit < 0) {
      message += `üìâ –°–∞–º—ã–π —É–±—ã—Ç–æ—á–Ω—ã–π –¥–µ–Ω—å: ${dayNames[parseInt(worstDay)-1]} (${worstProfit} ‚≠ê)\n`;
    }
    
    ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Weekly report error:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.');
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getGameEmoji(gameType) {
  switch(gameType) {
    case 'slots': return 'üé∞';
    case 'roulette': return 'üé≤';
    case 'guessnumber': return 'üî¢';
    case 'miner': return 'üí£';
    case 'crush': return 'üìà';
    case 'dispute': return 'üèÜ';
    default: return 'üéÆ';
  }
}

function getTransactionTypeEmoji(txType) {
  switch(txType) {
    case 'deposit': return 'üì•';
    case 'withdrawal': return 'üì§';
    case 'bet': return 'üéÆ';
    case 'win': return 'üèÜ';
    case 'admin_adjustment': return '‚öôÔ∏è';
    default: return 'üíº';
  }
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

return bot;
};