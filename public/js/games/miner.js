/**
 * miner.js - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã –ú–∞–π–Ω–µ—Ä
 * –í–µ—Ä—Å–∏—è 3.3.0
 * 
 * –£–ª—É—á—à–µ–Ω–∏—è:
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 * - –ü–æ–ª–Ω–∞—è —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
 */

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
const AUDIO_FILES = {
    background: 'https://assets.mixkit.co/music/preview/mixkit-tech-house-vibes-130.mp3',
    click: 'https://assets.mixkit.co/sfx/preview/mixkit-modern-technology-select-3124.mp3',
    reveal: 'https://assets.mixkit.co/sfx/preview/mixkit-arcade-game-jump-coin-216.mp3',
    explosion: 'https://assets.mixkit.co/sfx/preview/mixkit-explosion-with-rocks-fall-down-1699.mp3',
    win: 'https://assets.mixkit.co/sfx/preview/mixkit-winning-chimes-2015.mp3',
    cashout: 'https://assets.mixkit.co/sfx/preview/mixkit-coin-win-notification-1992.mp3',
    perfectWin: 'https://assets.mixkit.co/sfx/preview/mixkit-magical-coin-win-1936.mp3'
};

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ä–µ–¥—É
(function() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (!window.GreenLightApp) {
        console.error('[–ú–∞–π–Ω–µ—Ä] GreenLightApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        window.GreenLightApp = {
            log: function(source, message, isError) {
                if (isError) console.error(`[${source}] ${message}`);
                else console.log(`[${source}] ${message}`);
            }
        };
    }
    
    const app = window.GreenLightApp;
    app.log('–ú–∞–π–Ω–µ—Ä', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã –ú–∞–π–Ω–µ—Ä v3.3.0');
    
    // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
    const minerGame = (function() {
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
        let elements = {
            newGameBtn: null,
            cashoutBtn: null,
            minerBet: null,
            minesCount: null,
            minerGrid: null,
            potentialWin: null,
            minerResult: null,
            container: null,
            multiplierDisplay: null,
            safeCountDisplay: null,
            infoPanel: null,
            soundToggle: null,
            musicToggle: null,
            volumeControl: null
        };
        
        // –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        let audio = {
            background: null,
            click: null,
            reveal: null,
            explosion: null,
            win: null,
            cashout: null,
            perfectWin: null,
            initialized: false,
            muted: false,
            musicMuted: false,
            volume: 0.5
        };
        
        // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–∏–Ω (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        let _minesData = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        let state = {
            isPlaying: false,
            initialized: false,
            initializationStarted: false,
            animationsEnabled: true,
            gameData: {
                grid: [],
                revealedCells: [],
                totalCells: 25,  // –°–µ—Ç–∫–∞ 5x5
                minesCount: 3,
                currentMultiplier: 1,
                betAmount: 0,
                baseMultiplier: 1.0,
                maxMultiplier: 1000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
                houseEdge: 0.05, // 5% –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫–∞–∑–∏–Ω–æ –¥–ª—è —á–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã
                explosionAnimationActive: false
            }
        };
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
        const MULTIPLIER_CONFIG = {
            1: { base: 1.05, growth: 0.15, maxBonus: 1.5 },
            3: { base: 1.15, growth: 0.25, maxBonus: 2.0 },
            5: { base: 1.30, growth: 0.35, maxBonus: 2.5 },
            10: { base: 1.60, growth: 0.50, maxBonus: 3.0 },
            15: { base: 2.10, growth: 0.75, maxBonus: 4.0 },
            20: { base: 3.50, growth: 1.20, maxBonus: 6.0 },
            24: { base: 30.0, growth: 6.00, maxBonus: 15.0 }
        };
        
        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã
         */
        const initAudio = function() {
            if (audio.initialized) return;
            
            try {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞—É–¥–∏–æ
                const audioContainer = document.createElement('div');
                audioContainer.id = 'miner-audio-container';
                audioContainer.style.display = 'none';
                document.body.appendChild(audioContainer);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
                for (const [key, url] of Object.entries(AUDIO_FILES)) {
                    const audioElement = document.createElement('audio');
                    audioElement.src = url;
                    audioElement.preload = 'auto';
                    
                    if (key === 'background') {
                        audioElement.loop = true;
                        audioElement.volume = 0.3; // –ü–æ–Ω–∏–∂–µ–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
                    } else {
                        audioElement.volume = 0.5;
                    }
                    
                    audioContainer.appendChild(audioElement);
                    audio[key] = audioElement;
                }
                
                audio.initialized = true;
                app.log('–ú–∞–π–Ω–µ—Ä', '–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: ${error.message}`, true);
            }
        };
        
        /**
         * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
         */
        const playSound = function(sound) {
            if (!audio.initialized || audio.muted || !audio[sound]) return;
            
            try {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
                audio[sound].pause();
                audio[sound].currentTime = 0;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                audio[sound].volume = audio.volume;
                audio[sound].play().catch(e => {
                    // –¢–∏—Ö–æ –ª–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    app.log('–ú–∞–π–Ω–µ—Ä', `–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ ${sound} –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ: ${e.message}`);
                });
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ ${sound}: ${error.message}`, true);
            }
        };
        
        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
         */
        const toggleMusic = function() {
            if (!audio.initialized) return;
            
            try {
                audio.musicMuted = !audio.musicMuted;
                
                if (audio.musicMuted) {
                    audio.background.pause();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏
                    if (elements.musicToggle) {
                        elements.musicToggle.innerHTML = 'üîá';
                        elements.musicToggle.classList.add('muted');
                    }
                } else {
                    audio.background.play().catch(e => {
                        // –¢–∏—Ö–æ –ª–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                        app.log('–ú–∞–π–Ω–µ—Ä', `–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ: ${e.message}`);
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏
                    if (elements.musicToggle) {
                        elements.musicToggle.innerHTML = 'üîä';
                        elements.musicToggle.classList.remove('muted');
                    }
                }
                
                app.log('–ú–∞–π–Ω–µ—Ä', `–§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ ${audio.musicMuted ? '–æ—Ç–∫–ª—é—á–µ–Ω–∞' : '–≤–∫–ª—é—á–µ–Ω–∞'}`);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏: ${error.message}`, true);
            }
        };
        
        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
         */
        const toggleSound = function() {
            try {
                audio.muted = !audio.muted;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
                if (elements.soundToggle) {
                    elements.soundToggle.innerHTML = audio.muted ? 'üîá' : 'üîä';
                    if (audio.muted) {
                        elements.soundToggle.classList.add('muted');
                    } else {
                        elements.soundToggle.classList.remove('muted');
                    }
                }
                
                app.log('–ú–∞–π–Ω–µ—Ä', `–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã ${audio.muted ? '–æ—Ç–∫–ª—é—á–µ–Ω—ã' : '–≤–∫–ª—é—á–µ–Ω—ã'}`);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞: ${error.message}`, true);
            }
        };
        
        /**
         * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∞—É–¥–∏–æ
         */
        const setVolume = function(value) {
            try {
                audio.volume = Math.max(0, Math.min(1, value));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
                for (const [key, element] of Object.entries(audio)) {
                    if (element && typeof element === 'object' && element.volume !== undefined) {
                        if (key === 'background') {
                            element.volume = audio.volume * 0.3; // –î–µ—Ä–∂–∏–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É —Ç–∏—à–µ
                        } else {
                            element.volume = audio.volume;
                        }
                    }
                }
                
                app.log('–ú–∞–π–Ω–µ—Ä', `–ì—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${audio.volume}`);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: ${error.message}`, true);
            }
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —á–∞—Å—Ç–∏—Ü
         */
        const createParticleEffect = function(x, y, type) {
            try {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Å—Ç–∏—Ü, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                let particlesContainer = document.getElementById('particles-container');
                if (!particlesContainer) {
                    particlesContainer = document.createElement('div');
                    particlesContainer.id = 'particles-container';
                    particlesContainer.style.position = 'fixed';
                    particlesContainer.style.top = '0';
                    particlesContainer.style.left = '0';
                    particlesContainer.style.width = '100%';
                    particlesContainer.style.height = '100%';
                    particlesContainer.style.pointerEvents = 'none';
                    particlesContainer.style.zIndex = '9999';
                    document.body.appendChild(particlesContainer);
                }
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Å—Ç–∏—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                let particleCount, particleColors, particleSize, particleSpeed, particleLife;
                
                switch(type) {
                    case 'explosion':
                        particleCount = 50;
                        particleColors = ['#FF5252', '#FF9800', '#FFEB3B', '#FFC107', '#FF7043'];
                        particleSize = { min: 5, max: 15 };
                        particleSpeed = { min: 3, max: 10 };
                        particleLife = { min: 500, max: 1000 };
                        break;
                    case 'coins':
                        particleCount = 30;
                        particleColors = ['#FFD700', '#FFC107', '#FFEB3B', '#F9A825', '#FBC02D'];
                        particleSize = { min: 8, max: 15 };
                        particleSpeed = { min: 2, max: 8 };
                        particleLife = { min: 800, max: 1500 };
                        break;
                    case 'confetti':
                        particleCount = 100;
                        particleColors = ['#4CAF50', '#2196F3', '#9C27B0', '#E91E63', '#FFEB3B', '#FF9800'];
                        particleSize = { min: 5, max: 10 };
                        particleSpeed = { min: 2, max: 6 };
                        particleLife = { min: 1000, max: 2000 };
                        break;
                    default:
                        particleCount = 20;
                        particleColors = ['#FFFFFF', '#EEEEEE', '#DDDDDD'];
                        particleSize = { min: 3, max: 8 };
                        particleSpeed = { min: 1, max: 5 };
                        particleLife = { min: 500, max: 1000 };
                }
                
                // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
                for (let i = 0; i < particleCount; i++) {
                    setTimeout(() => {
                        const particle = document.createElement('div');
                        
                        // –°–ª—É—á–∞–π–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏—Ü
                        const color = particleColors[Math.floor(Math.random() * particleColors.length)];
                        const size = Math.random() * (particleSize.max - particleSize.min) + particleSize.min;
                        const angle = Math.random() * Math.PI * 2;
                        const speed = Math.random() * (particleSpeed.max - particleSpeed.min) + particleSpeed.min;
                        const life = Math.random() * (particleLife.max - particleLife.min) + particleLife.min;
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ —á–∞—Å—Ç–∏—Ü
                        particle.style.position = 'absolute';
                        particle.style.left = `${x}px`;
                        particle.style.top = `${y}px`;
                        particle.style.width = `${size}px`;
                        particle.style.height = `${size}px`;
                        particle.style.borderRadius = type === 'confetti' ? '2px' : '50%';
                        particle.style.backgroundColor = color;
                        particle.style.opacity = '1';
                        particle.style.pointerEvents = 'none';
                        
                        // –î–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —á–∞—Å—Ç–∏—Ü–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ñ–æ—Ä–º—É –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                        if (type === 'confetti' && Math.random() > 0.5) {
                            particle.style.width = `${size / 2}px`;
                            particle.style.height = `${size * 2}px`;
                            particle.style.transform = `rotate(${Math.random() * 360}deg)`;
                        }
                        
                        particlesContainer.appendChild(particle);
                        
                        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                        const vx = Math.cos(angle) * speed;
                        const vy = Math.sin(angle) * speed;
                        
                        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                        let posX = x;
                        let posY = y;
                        let opacity = 1;
                        let startTime = Date.now();
                        
                        // –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—É
                        const animateParticle = function() {
                            const elapsed = Date.now() - startTime;
                            if (elapsed >= life) {
                                if (particle.parentNode) {
                                    particle.parentNode.removeChild(particle);
                                }
                                return;
                            }
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
                            posX += vx;
                            posY += vy + (elapsed / life) * 5; // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
                            
                            // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
                            opacity = 1 - (elapsed / life);
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
                            particle.style.left = `${posX}px`;
                            particle.style.top = `${posY}px`;
                            particle.style.opacity = opacity.toString();
                            
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                            requestAnimationFrame(animateParticle);
                        };
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                        requestAnimationFrame(animateParticle);
                    }, Math.random() * 200); // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                }
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —á–∞—Å—Ç–∏—Ü: ${error.message}`, true);
            }
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ç—Ä—è—Å–∫–∏ —ç–∫—Ä–∞–Ω–∞
         */
        const screenShake = function(intensity = 5, duration = 500) {
            if (!state.animationsEnabled) return;
            
            try {
                const minerScreen = document.getElementById('miner-screen');
                if (!minerScreen) return;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ transform
                const originalTransform = minerScreen.style.transform || '';
                
                // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                let startTime = Date.now();
                
                // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
                const shake = function() {
                    const elapsed = Date.now() - startTime;
                    if (elapsed >= duration) {
                        minerScreen.style.transform = originalTransform;
                        return;
                    }
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                    const remaining = 1 - (elapsed / duration);
                    const currentIntensity = intensity * remaining;
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
                    const offsetX = (Math.random() - 0.5) * 2 * currentIntensity;
                    const offsetY = (Math.random() - 0.5) * 2 * currentIntensity;
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
                    minerScreen.style.transform = `${originalTransform} translate(${offsetX}px, ${offsetY}px)`;
                    
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    requestAnimationFrame(shake);
                };
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                requestAnimationFrame(shake);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä—è—Å–∫–∏ —ç–∫—Ä–∞–Ω–∞: ${error.message}`, true);
            }
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–≥—Ä—ã
         */
        const createGameContainer = function() {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                let container = document.querySelector('.miner-container');
                if (container) {
                    elements.container = container;
                    return container;
                }
                
                // –ò—â–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
                const minerScreen = document.getElementById('miner-screen');
                if (!minerScreen) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    return null;
                }
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä—ã
                container = document.createElement('div');
                container.className = 'miner-container game-container';
                minerScreen.appendChild(container);
                
                elements.container = container;
                app.log('–ú–∞–π–Ω–µ—Ä', '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω');
                
                return container;
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${error.message}`, true);
                return null;
            }
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
         */
        const createGameInterface = function() {
            try {
                const container = elements.container || createGameContainer();
                if (!container) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (container.querySelector('#miner-grid')) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω');
                    return true;
                }
                
                // –°–æ–∑–¥–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∏–≥—Ä—ã
                container.innerHTML = `
                    <div class="miner-header">
                        <div class="game-info-panel">
                            <div class="info-item">
                                <span class="info-label">–ú–Ω–æ–∂–∏—Ç–µ–ª—å</span>
                                <span id="current-multiplier" class="info-value multiplier-value">1.00x</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">–ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö</span>
                                <span id="safe-count" class="info-value">0/25</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">–í—ã–∏–≥—Ä—ã—à</span>
                                <span id="potential-win" class="info-value win-value">0 ‚≠ê</span>
                            </div>
                        </div>
                        <div class="sound-controls">
                            <button id="sound-toggle" class="sound-btn" title="–ó–≤—É–∫">üîä</button>
                            <button id="music-toggle" class="sound-btn" title="–ú—É–∑—ã–∫–∞">üîä</button>
                        </div>
                    </div>
                    
                    <div id="miner-grid" class="miner-grid">
                        <!-- –°–µ—Ç–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                    
                    <div id="miner-result" class="result hidden"></div>
                    
                    <div class="miner-controls">
                        <div class="bet-settings">
                            <div class="control-group">
                                <label for="miner-bet">–°—Ç–∞–≤–∫–∞:</label>
                                <div class="bet-input-wrapper">
                                    <button class="bet-decrease-btn" aria-label="–£–º–µ–Ω—å—à–∏—Ç—å —Å—Ç–∞–≤–∫—É">-</button>
                                    <input type="number" id="miner-bet" inputmode="numeric" min="1" max="1000" value="10" class="bet-input">
                                    <button class="bet-increase-btn" aria-label="–£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É">+</button>
                                </div>
                            </div>
                            
                            <div class="control-group">
                                <label for="mines-count">–ú–∏–Ω—ã:</label>
                                <select id="mines-count" class="mines-select">
                                    <option value="1">1 –º–∏–Ω–∞</option>
                                    <option value="3" selected>3 –º–∏–Ω—ã</option>
                                    <option value="5">5 –º–∏–Ω</option>
                                    <option value="10">10 –º–∏–Ω</option>
                                    <option value="15">15 –º–∏–Ω</option>
                                    <option value="20">20 –º–∏–Ω</option>
                                    <option value="24">24 –º–∏–Ω—ã</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="quick-bet-controls">
                            <button class="quick-bet-btn" data-amount="10">10</button>
                            <button class="quick-bet-btn" data-amount="20">20</button>
                            <button class="quick-bet-btn" data-amount="50">50</button>
                            <button class="quick-bet-btn" data-amount="100">100</button>
                        </div>
                        
                        <div class="game-buttons">
                            <button id="new-game-btn" class="action-btn primary-btn">–ù–ê–ß–ê–¢–¨</button>
                            <button id="cashout-btn" class="action-btn secondary-btn" disabled>–ó–ê–ë–†–ê–¢–¨</button>
                        </div>
                    </div>
                `;
                
                // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
                if (!document.getElementById('miner-styles')) {
                    const styleElement = document.createElement('style');
                    styleElement.id = 'miner-styles';
                    styleElement.textContent = `
                        .miner-container {
                            padding: 15px;
                            max-width: 500px;
                            margin: 0 auto;
                            font-family: 'Arial', sans-serif;
                            border-radius: 16px;
                            background: linear-gradient(145deg, #1a1a1a, #2a2a2a);
                            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                            border: 1px solid rgba(255, 255, 255, 0.05);
                            overflow: hidden;
                        }
                        
                        .miner-header {
                            margin-bottom: 15px;
                            background: rgba(0, 0, 0, 0.2);
                            border-radius: 12px;
                            padding: 10px;
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                        }
                        
                        .game-info-panel {
                            display: flex;
                            justify-content: space-around;
                            align-items: center;
                            flex: 1;
                            gap: 8px;
                        }
                        
                        .sound-controls {
                            display: flex;
                            gap: 8px;
                        }
                        
                        .sound-btn {
                            background: rgba(255, 255, 255, 0.1);
                            border: none;
                            border-radius: 50%;
                            width: 28px;
                            height: 28px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            cursor: pointer;
                            transition: all 0.2s;
                            color: white;
                            font-size: 14px;
                        }
                        
                        .sound-btn:hover {
                            background: rgba(255, 255, 255, 0.2);
                            transform: scale(1.1);
                        }
                        
                        .sound-btn.muted {
                            background: rgba(255, 0, 0, 0.2);
                            color: rgba(255, 255, 255, 0.7);
                        }
                        
                        .info-item {
                            padding: 6px 10px;
                            background: rgba(0, 0, 0, 0.2);
                            border-radius: 8px;
                            text-align: center;
                            flex: 1;
                            min-width: 0;
                        }
                        
                        .info-label {
                            display: block;
                            font-size: 10px;
                            color: rgba(255, 255, 255, 0.7);
                            margin-bottom: 3px;
                            text-transform: uppercase;
                            font-weight: bold;
                            letter-spacing: 0.5px;
                        }
                        
                        .info-value {
                            font-size: 16px;
                            font-weight: bold;
                            color: white;
                            display: block;
                            white-space: nowrap;
                            overflow: hidden;
                            text-overflow: ellipsis;
                        }
                        
                        .multiplier-value {
                            color: #4CAF50;
                            text-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
                            transition: all 0.3s;
                        }
                        
                        .win-value {
                            color: #FFD700;
                            text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
                        }
                        
                        .miner-grid {
                            display: grid;
                            grid-template-columns: repeat(5, 1fr);
                            gap: 6px;
                            margin: 10px auto;
                            max-width: 400px;
                            perspective: 1000px;
                        }
                        
                        .grid-cell {
                            aspect-ratio: 1;
                            background: linear-gradient(135deg, #2a2a2a, #1a1a1a);
                            border-radius: 6px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            font-size: 24px;
                            cursor: pointer;
                            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                            border: 1px solid rgba(255, 255, 255, 0.1);
                            position: relative;
                            transform-style: preserve-3d;
                            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
                            overflow: hidden;
                        }
                        
                        .grid-cell:hover {
                            transform: translateY(-2px) scale(1.05);
                            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4), 0 0 10px rgba(76, 175, 80, 0.3);
                            border-color: rgba(76, 175, 80, 0.3);
                        }
                        
                        .grid-cell.active-cell {
                            cursor: pointer;
                        }
                        
                        .grid-cell.active-cell:hover {
                            background: linear-gradient(135deg, #3a3a3a, #2a2a2a);
                        }
                        
                        .grid-cell.revealed {
                            background: linear-gradient(135deg, #4CAF50, #43A047);
                            transform: rotateY(180deg);
                            cursor: default;
                            border-color: #66BB6A;
                            box-shadow: 0 0 15px rgba(76, 175, 80, 0.5);
                        }
                        
                        .grid-cell.mine {
                            background: linear-gradient(135deg, #333, #222);
                            cursor: default;
                        }
                        
                        .grid-cell.exploded {
                            background: linear-gradient(135deg, #F44336, #D32F2F);
                            animation: explode 0.8s cubic-bezier(0.36, 0.07, 0.19, 0.97);
                            border-color: #E57373;
                            box-shadow: 0 0 20px rgba(244, 67, 54, 0.7);
                            z-index: 10;
                        }
                        
                        .miner-controls {
                            margin-top: 15px;
                        }
                        
                        .bet-settings {
                            display: flex;
                            gap: 10px;
                            margin-bottom: 10px;
                            justify-content: center;
                            flex-wrap: wrap;
                        }
                        
                        .control-group {
                            display: flex;
                            flex-direction: column;
                            gap: 5px;
                        }
                        
                        .control-group label {
                            color: rgba(255, 255, 255, 0.8);
                            font-size: 12px;
                            font-weight: bold;
                            margin-bottom: 2px;
                        }
                        
                        .bet-input-wrapper {
                            display: flex;
                            align-items: center;
                            gap: 4px;
                        }
                        
                        .bet-decrease-btn, .bet-increase-btn {
                            width: 24px;
                            height: 24px;
                            border-radius: 50%;
                            border: none;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            cursor: pointer;
                            background: var(--medium-gray, #444);
                            color: var(--white, #fff);
                            font-size: 14px;
                            font-weight: bold;
                            transition: all 0.2s;
                        }
                        
                        .bet-decrease-btn:hover, .bet-increase-btn:hover {
                            background: var(--primary-green, #4CAF50);
                            transform: scale(1.1);
                        }
                        
                        .bet-input, .mines-select {
                            padding: 6px 8px;
                            border-radius: 6px;
                            border: 1px solid rgba(255, 255, 255, 0.1);
                            background: rgba(0, 0, 0, 0.2);
                            color: white;
                            font-size: 14px;
                            font-weight: bold;
                            transition: all 0.2s;
                            width: 70px;
                            text-align: center;
                        }
                        
                        .mines-select {
                            width: 100px;
                        }
                        
                        .bet-input:focus, .mines-select:focus {
                            border-color: rgba(76, 175, 80, 0.5);
                            outline: none;
                            box-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
                        }
                        
                        .mines-select:disabled {
                            opacity: 0.5;
                            cursor: not-allowed;
                        }
                        
                        .quick-bet-controls {
                            display: flex;
                            justify-content: center;
                            gap: 8px;
                            margin-bottom: 10px;
                            flex-wrap: wrap;
                        }
                        
                        .quick-bet-btn {
                            padding: 5px 10px;
                            background: rgba(0, 0, 0, 0.2);
                            border: 1px solid rgba(255, 255, 255, 0.1);
                            border-radius: 4px;
                            color: #fff;
                            font-size: 13px;
                            cursor: pointer;
                            transition: all 0.2s;
                        }
                        
                        .quick-bet-btn:hover {
                            background: rgba(76, 175, 80, 0.2);
                            border-color: rgba(76, 175, 80, 0.5);
                        }
                        
                        .game-buttons {
                            display: flex;
                            gap: 10px;
                            justify-content: center;
                        }
                        
                        .action-btn {
                            padding: 10px 0;
                            border-radius: 8px;
                            font-weight: bold;
                            font-size: 14px;
                            cursor: pointer;
                            transition: all 0.2s;
                            border: none;
                            min-width: 120px;
                            text-transform: uppercase;
                            letter-spacing: 1px;
                            position: relative;
                            overflow: hidden;
                        }
                        
                        .action-btn::after {
                            content: '';
                            position: absolute;
                            top: 50%;
                            left: 50%;
                            width: 5px;
                            height: 5px;
                            background: rgba(255, 255, 255, 0.5);
                            opacity: 0;
                            border-radius: 100%;
                            transform: scale(1, 1) translate(-50%, -50%);
                            transform-origin: 50% 50%;
                        }
                        
                        .action-btn:focus:not(:active)::after {
                            animation: ripple 1s ease-out;
                        }
                        
                        .primary-btn {
                            background: linear-gradient(135deg, #4CAF50, #43A047);
                            color: white;
                            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
                        }
                        
                        .primary-btn:hover:not(:disabled) {
                            transform: translateY(-2px);
                            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
                        }
                        
                        .secondary-btn {
                            background: linear-gradient(135deg, #2196F3, #1E88E5);
                            color: white;
                            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
                        }
                        
                        .secondary-btn:hover:not(:disabled) {
                            transform: translateY(-2px);
                            box-shadow: 0 6px 20px rgba(33, 150, 243, 0.4);
                        }
                        
                        .action-btn:disabled {
                            background: linear-gradient(135deg, #555, #444);
                            cursor: not-allowed;
                            opacity: 0.7;
                            box-shadow: none;
                        }
                        
                        .result {
                            margin: 15px 0;
                            padding: 15px;
                            border-radius: 12px;
                            text-align: center;
                            font-weight: bold;
                            transition: all 0.3s;
                            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
                            transform: translateY(0);
                            opacity: 1;
                        }
                        
                        .result.hidden {
                            opacity: 0;
                            transform: translateY(-20px);
                            height: 0;
                            padding: 0;
                            margin: 0;
                            overflow: hidden;
                        }
                        
                        .result.win {
                            background: linear-gradient(135deg, rgba(76, 175, 80, 0.2), rgba(67, 160, 71, 0.2));
                            border: 1px solid rgba(76, 175, 80, 0.5);
                            color: #81C784;
                        }
                        
                        .result.lose {
                            background: linear-gradient(135deg, rgba(244, 67, 54, 0.2), rgba(211, 47, 47, 0.2));
                            border: 1px solid rgba(244, 67, 54, 0.5);
                            color: #E57373;
                        }
                        
                        .win-icon, .lose-icon {
                            font-size: 32px;
                            margin-bottom: 10px;
                            display: inline-block;
                            animation: bounce 1s infinite alternate;
                        }
                        
                        .win-title, .lose-title {
                            font-size: 18px;
                            margin-bottom: 8px;
                        }
                        
                        .win-amount {
                            font-size: 22px;
                            color: #FFD700;
                            margin: 8px 0;
                            text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
                        }
                        
                        .win-multiplier {
                            font-size: 14px;
                            color: #81C784;
                            margin-top: 5px;
                        }
                        
                        .cell-inner {
                            width: 100%;
                            height: 100%;
                            position: relative;
                            transform-style: preserve-3d;
                            transition: transform 0.6s;
                        }
                        
                        .cell-back, .cell-front {
                            width: 100%;
                            height: 100%;
                            position: absolute;
                            backface-visibility: hidden;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            border-radius: 6px;
                        }
                        
                        .cell-front {
                            transform: rotateY(180deg);
                        }
                        
                        .revealed .cell-inner {
                            transform: rotateY(180deg);
                        }
                        
                        /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ */
                        @keyframes explode {
                            0% { transform: scale3d(1, 1, 1); }
                            10%, 20% { transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -5deg); }
                            30%, 50%, 70%, 90% { transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 5deg); }
                            40%, 60%, 80% { transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -5deg); }
                            100% { transform: scale3d(1, 1, 1); }
                        }
                        
                        @keyframes pulse {
                            0% { transform: scale(1); box-shadow: 0 0 5px rgba(76, 175, 80, 0.5); }
                            50% { transform: scale(1.05); box-shadow: 0 0 20px rgba(76, 175, 80, 0.8); }
                            100% { transform: scale(1); box-shadow: 0 0 5px rgba(76, 175, 80, 0.5); }
                        }
                        
                        @keyframes bounce {
                            from { transform: translateY(0); }
                            to { transform: translateY(-10px); }
                        }
                        
                        @keyframes ripple {
                            0% {
                                transform: scale(0, 0);
                                opacity: 1;
                            }
                            20% {
                                transform: scale(25, 25);
                                opacity: 1;
                            }
                            100% {
                                opacity: 0;
                                transform: scale(40, 40);
                            }
                        }
                        
                        .pulse {
                            animation: pulse 1.5s infinite;
                        }
                        
                        /* –¶–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π */
                        .multiplier-value.level-1 { color: #4CAF50; text-shadow: 0 0 10px rgba(76, 175, 80, 0.5); }
                        .multiplier-value.level-2 { color: #8BC34A; text-shadow: 0 0 10px rgba(139, 195, 74, 0.5); }
                        .multiplier-value.level-3 { color: #CDDC39; text-shadow: 0 0 10px rgba(205, 220, 57, 0.5); }
                        .multiplier-value.level-4 { color: #FFEB3B; text-shadow: 0 0 10px rgba(255, 235, 59, 0.5); }
                        .multiplier-value.level-5 { color: #FFC107; text-shadow: 0 0 10px rgba(255, 193, 7, 0.5); }
                        .multiplier-value.level-6 { color: #FF9800; text-shadow: 0 0 10px rgba(255, 152, 0, 0.5); }
                        .multiplier-value.level-7 { color: #FF5722; text-shadow: 0 0 10px rgba(255, 87, 34, 0.7); }
                        
                        /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω */
                        @media (max-width: 480px) {
                            .miner-container {
                                padding: 10px;
                                border-radius: 10px;
                            }
                            
                            .miner-header {
                                padding: 8px;
                                margin-bottom: 10px;
                            }
                            
                            .info-item {
                                padding: 5px;
                            }
                            
                            .info-label {
                                font-size: 9px;
                                margin-bottom: 2px;
                            }
                            
                            .info-value {
                                font-size: 14px;
                            }
                            
                            .sound-btn {
                                width: 24px;
                                height: 24px;
                                font-size: 12px;
                            }
                            
                            .miner-grid {
                                gap: 4px;
                            }
                            
                            .grid-cell {
                                font-size: 20px;
                                border-radius: 5px;
                            }
                            
                            .bet-settings {
                                gap: 6px;
                            }
                            
                            .control-group label {
                                font-size: 11px;
                            }
                            
                            .bet-input, .mines-select {
                                padding: 5px;
                                font-size: 13px;
                                width: 60px;
                            }
                            
                            .mines-select {
                                width: 90px;
                            }
                            
                            .action-btn {
                                padding: 8px 0;
                                font-size: 13px;
                                min-width: 100px;
                            }
                        }
                    `;
                    document.head.appendChild(styleElement);
                }
                
                // –ù–∞—Ö–æ–¥–∏–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞–≤–∫–∏
                const quickBetButtons = document.querySelectorAll('.quick-bet-btn');
                quickBetButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const amount = parseInt(this.dataset.amount);
                        if (elements.minerBet) {
                            elements.minerBet.value = amount;
                        }
                        // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
                        playSound('click');
                    });
                });
                
                app.log('–ú–∞–π–Ω–µ—Ä', '–ò–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
                return true;
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ${error.message}`, true);
                return false;
            }
        };
        
        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
         * –° –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
         */
        const init = async function() {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if (state.initialized || state.initializationStarted) {
                app.log('–ú–∞–π–Ω–µ—Ä', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
                return true;
            }
            
            state.initializationStarted = true;
            app.log('–ú–∞–π–Ω–µ—Ä', '–ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã');
            
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                const initPromise = new Promise(async (resolve) => {
                    try {
                        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        if (!createGameInterface()) {
                            app.log('–ú–∞–π–Ω–µ—Ä', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', true);
                            resolve(false);
                            return;
                        }
                        
                        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—É
                        initAudio();
                        
                        // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
                        await findDOMElements();
                        
                        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Ç–∫—É
                        createGrid();
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
                        updatePotentialWin();
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                        setupEventListeners();
                        
                        state.initialized = true;
                        app.log('–ú–∞–π–Ω–µ—Ä', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                        resolve(true);
                    } catch (innerError) {
                        app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${innerError.message}`, true);
                        resolve(false);
                    }
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç (3 —Å–µ–∫—É–Ω–¥—ã)
                const timeoutPromise = new Promise((resolve) => {
                    setTimeout(() => {
                        app.log('–ú–∞–π–Ω–µ—Ä', '–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', true);
                        resolve(false);
                    }, 3000);
                });
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
                const result = await Promise.race([initPromise, timeoutPromise]);
                
                return result;
                
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, true);
                return false;
            }
        };
        
        /**
         * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç null
         */
        const findDOMElements = async function() {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
            return new Promise((resolve, reject) => {
                try {
                    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
                    setTimeout(() => {
                        elements.newGameBtn = document.getElementById('new-game-btn');
                        elements.cashoutBtn = document.getElementById('cashout-btn');
                        elements.minerBet = document.getElementById('miner-bet');
                        elements.minesCount = document.getElementById('mines-count');
                        elements.minerGrid = document.getElementById('miner-grid');
                        elements.potentialWin = document.getElementById('potential-win');
                        elements.minerResult = document.getElementById('miner-result');
                        elements.multiplierDisplay = document.getElementById('current-multiplier');
                        elements.safeCountDisplay = document.getElementById('safe-count');
                        elements.soundToggle = document.getElementById('sound-toggle');
                        elements.musicToggle = document.getElementById('music-toggle');
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ç—á–µ—Ç –æ –Ω–∏—Ö
                        if (!elements.newGameBtn) {
                            app.log('–ú–∞–π–Ω–µ—Ä', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —ç–ª–µ–º–µ–Ω—Ç new-game-btn –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                        } else {
                            app.log('–ú–∞–π–Ω–µ—Ä', '–≠–ª–µ–º–µ–Ω—Ç new-game-btn —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω');
                        }
                        
                        if (!elements.minerGrid) {
                            app.log('–ú–∞–π–Ω–µ—Ä', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —ç–ª–µ–º–µ–Ω—Ç miner-grid –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                        } else {
                            app.log('–ú–∞–π–Ω–µ—Ä', '–≠–ª–µ–º–µ–Ω—Ç miner-grid —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω');
                        }
                        
                        resolve();
                    }, 100);
                } catch (error) {
                    app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${error.message}`, true);
                    resolve(); // –†–µ–∑–æ–ª–≤–∏–º –ø—Ä–æ–º–∏—Å, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                }
            });
        };
        
        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
         */
        const setupEventListeners = function() {
            try {
                // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
                if (elements.newGameBtn) {
                    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
                    const newGameBtn = elements.newGameBtn.cloneNode(true);
                    if (elements.newGameBtn.parentNode) {
                        elements.newGameBtn.parentNode.replaceChild(newGameBtn, elements.newGameBtn);
                    }
                    elements.newGameBtn = newGameBtn;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    elements.newGameBtn.addEventListener('click', startNewGame);
                    app.log('–ú–∞–π–Ω–µ—Ä', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                } else {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
                }
                
                // –ö–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∞
                if (elements.cashoutBtn) {
                    const cashoutBtn = elements.cashoutBtn.cloneNode(true);
                    if (elements.cashoutBtn.parentNode) {
                        elements.cashoutBtn.parentNode.replaceChild(cashoutBtn, elements.cashoutBtn);
                    }
                    elements.cashoutBtn = cashoutBtn;
                    
                    elements.cashoutBtn.addEventListener('click', cashout);
                    app.log('–ú–∞–π–Ω–µ—Ä', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                }
                
                // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
                if (elements.minesCount) {
                    elements.minesCount.addEventListener('change', updateMineCount);
                    app.log('–ú–∞–π–Ω–µ—Ä', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                }
                
                // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
                if (elements.minerBet) {
                    elements.minerBet.addEventListener('input', updatePotentialWin);
                    app.log('–ú–∞–π–Ω–µ—Ä', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                }
                
                // –ö–Ω–æ–ø–∫–∏ +/- –¥–ª—è —Å—Ç–∞–≤–∫–∏
                const decreaseBtn = document.querySelector('.bet-decrease-btn');
                const increaseBtn = document.querySelector('.bet-increase-btn');
                
                if (decreaseBtn) {
                    decreaseBtn.addEventListener('click', () => {
                        adjustBet(-1);
                    });
                }
                
                if (increaseBtn) {
                    increaseBtn.addEventListener('click', () => {
                        adjustBet(1);
                    });
                }
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∑–≤—É–∫–∞
                if (elements.soundToggle) {
                    elements.soundToggle.addEventListener('click', toggleSound);
                    app.log('–ú–∞–π–Ω–µ—Ä', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∑–≤—É–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                }
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º—É–∑—ã–∫–∏
                if (elements.musicToggle) {
                    elements.musicToggle.addEventListener('click', toggleMusic);
                    app.log('–ú–∞–π–Ω–µ—Ä', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –º—É–∑—ã–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                }
                
                app.log('–ú–∞–π–Ω–µ—Ä', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${error.message}`, true);
            }
        };
        
        /**
         * –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–≤–∫–∏
         */
        const adjustBet = function(change) {
            try {
                if (!elements.minerBet) return;
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
                let currentBet = parseInt(elements.minerBet.value) || 10;
                
                // –û–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
                const commonBets = [1, 5, 10, 20, 50, 100, 200, 500, 1000];
                
                if (change < 0) {
                    // –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–≤–∫—É
                    let newBet = currentBet;
                    
                    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –º–µ–Ω—å—à—É—é –æ–±—â—É—é —Å—Ç–∞–≤–∫—É
                    for (let i = commonBets.length - 1; i >= 0; i--) {
                        if (commonBets[i] < currentBet) {
                            newBet = commonBets[i];
                            break;
                        }
                    }
                    
                    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
                    currentBet = Math.max(1, newBet);
                } else {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
                    let newBet = currentBet;
                    
                    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –±–æ–ª—å—à—É—é –æ–±—â—É—é —Å—Ç–∞–≤–∫—É
                    for (let i = 0; i < commonBets.length; i++) {
                        if (commonBets[i] > currentBet) {
                            newBet = commonBets[i];
                            break;
                        }
                    }
                    
                    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
                    currentBet = Math.min(1000, newBet);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                elements.minerBet.value = currentBet;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
                updatePotentialWin();
                
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
                playSound('click');
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('light');
                }
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞–≤–∫–∏: ${error.message}`, true);
            }
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ç–∫–∏
         */
        const createGrid = function() {
            try {
                if (!elements.minerGrid) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É: —ç–ª–µ–º–µ–Ω—Ç minerGrid –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    return;
                }
                
                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ç–∫—É
                elements.minerGrid.innerHTML = '';
                
                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 5x5
                for (let i = 0; i < 5; i++) {
                    for (let j = 0; j < 5; j++) {
                        const cell = document.createElement('div');
                        cell.className = 'grid-cell';
                        cell.dataset.row = i;
                        cell.dataset.col = j;
                        cell.dataset.index = i * 5 + j;
                        
                        // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —è—á–µ–π–∫–∏
                        const cellInner = document.createElement('div');
                        cellInner.className = 'cell-inner';
                        
                        const cellBack = document.createElement('div');
                        cellBack.className = 'cell-back';
                        
                        const cellFront = document.createElement('div');
                        cellFront.className = 'cell-front';
                        
                        cellInner.appendChild(cellBack);
                        cellInner.appendChild(cellFront);
                        cell.appendChild(cellInner);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
                        if (state.isPlaying) {
                            cell.addEventListener('click', () => revealCell(i * 5 + j));
                            cell.classList.add('active-cell');
                        }
                        
                        elements.minerGrid.appendChild(cell);
                    }
                }
                
                app.log('–ú–∞–π–Ω–µ—Ä', '–ò–≥—Ä–æ–≤–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏: ${error.message}`, true);
            }
        };
        
        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
         */
        const updateMineCount = function() {
            try {
                // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
                if (state.isPlaying) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                    if (elements.minesCount) {
                        elements.minesCount.value = state.gameData.minesCount;
                    }
                    if (window.casinoApp && window.casinoApp.showNotification) {
                        window.casinoApp.showNotification('–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã');
                    }
                    return;
                }
                
                if (!elements.minesCount) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–≠–ª–µ–º–µ–Ω—Ç minesCount –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    return;
                }
                
                state.gameData.minesCount = parseInt(elements.minesCount.value);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
                const config = MULTIPLIER_CONFIG[state.gameData.minesCount] || MULTIPLIER_CONFIG[3];
                state.gameData.baseMultiplier = config.base;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                updatePotentialWin();
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('light');
                }
                
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
                playSound('click');
                
                app.log('–ú–∞–π–Ω–µ—Ä', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${state.gameData.minesCount}`);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω: ${error.message}`, true);
            }
        };
        
        /**
         * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
         * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
         */
        const calculateMultiplier = function(revealed, total, mines) {
            if (revealed === 0) return state.gameData.baseMultiplier;
            
            try {
                const safeSpots = total - mines;
                let probability = 1;
                
                // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
                for (let i = 0; i < revealed; i++) {
                    probability *= (safeSpots - i) / (total - i);
                }
                
                // –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫–∞–∑–∏–Ω–æ (5%)
                probability = probability * (1 - state.gameData.houseEdge);
                
                // –ú–Ω–æ–∂–∏—Ç–µ–ª—å = 1 / –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (—Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –±–∞–ª–∞–Ω—Å–∞)
                let multiplier = 1 / probability;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä—ã
                const config = MULTIPLIER_CONFIG[mines] || MULTIPLIER_CONFIG[3];
                
                // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è
                const progressFactor = Math.min(1, revealed / safeSpots * 2);
                const bonusMult = config.maxBonus * progressFactor;
                
                multiplier = config.base + (multiplier - 1) * config.growth * (1 + bonusMult);
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
                multiplier = Math.min(multiplier, state.gameData.maxMultiplier);
                
                // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
                return Math.floor(multiplier * 100) / 100;
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è: ${error.message}`, true);
                return state.gameData.baseMultiplier;
            }
        };
        
        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
         */
        const updatePotentialWin = function() {
            try {
                if (!elements.potentialWin || !elements.minerBet) {
                    return;
                }
                
                const betAmt = parseInt(elements.minerBet.value) || 0;
                const revealedCount = state.gameData.revealedCells.length;
                
                // –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
                const multiplier = calculateMultiplier(
                    revealedCount,
                    state.gameData.totalCells,
                    state.gameData.minesCount
                );
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
                const potential = Math.floor(betAmt * multiplier);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                elements.potentialWin.textContent = `${potential} ‚≠ê`;
                
                if (elements.multiplierDisplay) {
                    elements.multiplierDisplay.textContent = `${multiplier.toFixed(2)}x`;
                    
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —É—Ä–æ–≤–Ω–µ–π
                    elements.multiplierDisplay.className = 'info-value multiplier-value';
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –º–Ω–æ–∂–∏—Ç–µ–ª—è
                    if (multiplier >= 50) {
                        elements.multiplierDisplay.classList.add('level-7', 'pulse');
                    } else if (multiplier >= 20) {
                        elements.multiplierDisplay.classList.add('level-6', 'pulse');
                    } else if (multiplier >= 10) {
                        elements.multiplierDisplay.classList.add('level-5', 'pulse');
                    } else if (multiplier >= 5) {
                        elements.multiplierDisplay.classList.add('level-4');
                    } else if (multiplier >= 3) {
                        elements.multiplierDisplay.classList.add('level-3');
                    } else if (multiplier >= 2) {
                        elements.multiplierDisplay.classList.add('level-2');
                    } else {
                        elements.multiplierDisplay.classList.add('level-1');
                    }
                }
                
                if (elements.safeCountDisplay) {
                    const safeCells = state.gameData.totalCells - state.gameData.minesCount;
                    elements.safeCountDisplay.textContent = `${revealedCount}/${safeCells}`;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                state.gameData.currentMultiplier = multiplier;
                
                app.log('–ú–∞–π–Ω–µ—Ä', `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –æ–±–Ω–æ–≤–ª–µ–Ω: ${potential}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞: ${error.message}`, true);
            }
        };
        
        /**
         * –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
         */
        const startNewGame = async function() {
            app.log('–ú–∞–π–Ω–µ—Ä', '–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if (!state.initialized) {
                app.log('–ú–∞–π–Ω–µ—Ä', '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é', true);
                await init();
                
                // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—ã—Ö–æ–¥–∏–º
                if (!state.initialized) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', true);
                    return;
                }
            }
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ casinoApp
                if (!window.casinoApp) {
                    app.log('–ú–∞–π–Ω–µ—Ä', 'casinoApp –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if (!elements.minerBet) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
                const betAmount = parseInt(elements.minerBet.value);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
                if (isNaN(betAmount) || betAmount <= 0) {
                    window.casinoApp.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É');
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if (window.GreenLightApp && window.GreenLightApp.user && 
                    betAmount > window.GreenLightApp.user.balance) {
                    window.casinoApp.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏');
                    return;
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                state.isPlaying = true;
                state.gameData = {
                    grid: Array(state.gameData.totalCells).fill('empty'),
                    revealedCells: [],
                    totalCells: 25,
                    minesCount: parseInt(elements.minesCount ? elements.minesCount.value : 3),
                    currentMultiplier: calculateMultiplier(0, 25, parseInt(elements.minesCount.value)),
                    betAmount: betAmount,
                    maxMultiplier: 1000,
                    houseEdge: 0.05
                };
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∏–Ω
                _minesData = null;
                
                // –†–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã
                placeMines();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                createGrid();
                
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
                if (elements.minesCount) {
                    elements.minesCount.disabled = true;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                if (elements.cashoutBtn) {
                    elements.cashoutBtn.disabled = true; // –û—Ç–∫–ª—é—á–∞–µ–º –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
                }
                
                if (elements.newGameBtn) {
                    elements.newGameBtn.disabled = true;
                }
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (elements.minerResult) {
                    elements.minerResult.className = 'result hidden';
                    elements.minerResult.textContent = '';
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É, –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
                if (audio.initialized && !audio.musicMuted) {
                    audio.background.currentTime = 0;
                    audio.background.play().catch(e => {
                        app.log('–ú–∞–π–Ω–µ—Ä', `–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ: ${e.message}`);
                    });
                }
                
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
                playSound('click');
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('medium');
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
                await window.casinoApp.processGameResult(
                    'miner',
                    betAmount,
                    'bet',
                    0,
                    { 
                        minesCount: state.gameData.minesCount
                    }
                );
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
                updatePotentialWin();
                
                app.log('–ú–∞–π–Ω–µ—Ä', '–ù–æ–≤–∞—è –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞');
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã: ${error.message}`, true);
                state.isPlaying = false;
                
                if (elements.newGameBtn) {
                    elements.newGameBtn.disabled = false;
                }
                
                if (elements.minesCount) {
                    elements.minesCount.disabled = false;
                }
            }
        };
        
        /**
         * –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
         */
        const encodeData = function(data) {
            // –ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            return btoa(JSON.stringify(data).split('').map(c => 
                String.fromCharCode(c.charCodeAt(0) + 7)
            ).join(''));
        };
        
        /**
         * –§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
         */
        const decodeData = function(encoded) {
            try {
                return JSON.parse(atob(encoded).split('').map(c => 
                    String.fromCharCode(c.charCodeAt(0) - 7)
                ).join(''));
            } catch (e) {
                return [];
            }
        };
        
        /**
         * –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å)
         */
        const placeMines = function() {
            try {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –º–∏–Ω
                const mines = [];
                
                // –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–≤—ã–µ –º–∏–Ω—ã
                while (mines.length < state.gameData.minesCount) {
                    const randomIndex = Math.floor(Math.random() * state.gameData.totalCells);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –º–∏–Ω–∞
                    if (!mines.includes(randomIndex)) {
                        mines.push(randomIndex);
                        state.gameData.grid[randomIndex] = 'mine';
                    }
                }
                
                // –®–∏—Ñ—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–∏–Ω
                _minesData = encodeData(mines);
                
                // –ù–ï –≤—ã–≤–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ –º–∏–Ω –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                app.log('–ú–∞–π–Ω–µ—Ä', '–ú–∏–Ω—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã');
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∏–Ω: ${error.message}`, true);
            }
        };
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –º–∏–Ω–æ–π
         * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
         */
        const isMine = function(index) {
            if (!_minesData) return false;
            
            try {
                const mines = decodeData(_minesData);
                return mines.includes(index);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω—ã: ${error.message}`, true);
                return false;
            }
        };
        
        /**
         * –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
         */
        const revealCell = async function(index) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —É–∂–µ —è—á–µ–π–∫–∞
                if (state.gameData.revealedCells.includes(index)) {
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
                if (!state.isPlaying) {
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —è—á–µ–π–∫–∏
                const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
                if (!cell) {
                    app.log('–ú–∞–π–Ω–µ—Ä', `–Ø—á–µ–π–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, true);
                    return;
                }
                
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
                playSound('click');
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('light');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –º–∏–Ω–æ–π (–∏—Å–ø–æ–ª—å–∑—É—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                if (isMine(index)) {
                    // –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã - –Ω–∞–π–¥–µ–Ω–∞ –º–∏–Ω–∞
                    revealAllMines();
                    
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∑—Ä—ã–≤–∞
                    const cellRect = cell.getBoundingClientRect();
                    const explosionX = cellRect.left + cellRect.width / 2;
                    const explosionY = cellRect.top + cellRect.height / 2;
                    
                    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –≤–∑—Ä—ã–≤–∞
                    playSound('explosion');
                    
                    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –≤–∑—Ä—ã–≤–∞
                    createParticleEffect(explosionX, explosionY, 'explosion');
                    
                    // –≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ —ç–∫—Ä–∞–Ω–∞
                    screenShake(8, 800);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    cell.classList.add('mine', 'exploded');
                    const cellFront = cell.querySelector('.cell-front');
                    if (cellFront) {
                        cellFront.innerHTML = 'üí•';
                    } else {
                        cell.innerHTML = 'üí•';
                    }
                    
                    // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –≤–∑—Ä—ã–≤–∞
                    if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                        window.casinoApp.provideTactileFeedback('error');
                    }
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                    state.isPlaying = false;
                    
                    if (elements.cashoutBtn) {
                        elements.cashoutBtn.disabled = true;
                    }
                    
                    if (elements.newGameBtn) {
                        elements.newGameBtn.disabled = false;
                    }
                    
                    if (elements.minesCount) {
                        elements.minesCount.disabled = false;
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if (elements.minerResult) {
                        elements.minerResult.innerHTML = `
                            <div class="lose-icon">üí•</div>
                            <div class="lose-title">–ë–£–ú! –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É.</div>
                            <div class="lose-message">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</div>
                        `;
                        elements.minerResult.className = 'result lose';
                    }
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à (–ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–∏–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
                    if (window.casinoApp) {
                        await window.casinoApp.processGameResult(
                            'miner',
                            0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
                            'lose',
                            0,
                            {
                                revealedCells: state.gameData.revealedCells,
                                hitMine: index,
                                finalMultiplier: state.gameData.currentMultiplier,
                                minesCount: state.gameData.minesCount
                            }
                        );
                    }
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
                    if (audio.initialized && audio.background) {
                        const fadeOutInterval = setInterval(() => {
                            if (audio.background.volume > 0.05) {
                                audio.background.volume -= 0.05;
                            } else {
                                audio.background.pause();
                                clearInterval(fadeOutInterval);
                            }
                        }, 100);
                    }
                } else {
                    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞
                    state.gameData.revealedCells.push(index);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    cell.classList.add('revealed');
                    const cellFront = cell.querySelector('.cell-front');
                    if (cellFront) {
                        cellFront.innerHTML = 'üí∞';
                    } else {
                        cell.innerHTML = 'üí∞';
                    }
                    
                    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
                    playSound('reveal');
                    
                    // –ù–µ–±–æ–ª—å—à–∏–µ —á–∞—Å—Ç–∏—Ü—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —è—á–µ–π–∫–∏
                    const cellRect = cell.getBoundingClientRect();
                    const cellX = cellRect.left + cellRect.width / 2;
                    const cellY = cellRect.top + cellRect.height / 2;
                    createParticleEffect(cellX, cellY, 'coins');
                    
                    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–≤–æ–¥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π —è—á–µ–π–∫–∏
                    if (state.gameData.revealedCells.length === 1 && elements.cashoutBtn) {
                        elements.cashoutBtn.disabled = false;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
                    updatePotentialWin();
                    
                    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —è—á–µ–π–∫–∏
                    if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                        window.casinoApp.provideTactileFeedback('success');
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç—ã –ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ (—É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã)
                    if (state.gameData.revealedCells.length === state.gameData.totalCells - state.gameData.minesCount) {
                        // –ò–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏
                        await automaticCashout();
                    }
                }
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏: ${error.message}`, true);
            }
        };
        
        /**
         * –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –º–∏–Ω
         */
        const revealAllMines = function() {
            try {
                if (!_minesData) return;
                
                const mines = decodeData(_minesData);
                
                mines.forEach(index => {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∑–æ—Ä–≤–∞–≤—à—É—é—Å—è –º–∏–Ω—É
                    if (document.querySelector(`.grid-cell[data-index="${index}"].exploded`)) {
                        return;
                    }
                    
                    const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
                    if (cell && !cell.classList.contains('exploded')) {
                        cell.classList.add('mine');
                        const cellFront = cell.querySelector('.cell-front');
                        if (cellFront) {
                            cellFront.innerHTML = 'üí£';
                        } else {
                            cell.innerHTML = 'üí£';
                        }
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–Ω—ã
                        const delay = Math.random() * 300;
                        setTimeout(() => {
                            cell.classList.add('mine-reveal');
                        }, delay);
                    }
                });
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –º–∏–Ω: ${error.message}`, true);
            }
        };
        
        /**
         * –í—ã–≤–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞
         */
        const cashout = async function() {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                if (!state.isPlaying || state.gameData.revealedCells.length === 0) {
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ casinoApp
                if (!window.casinoApp) {
                    return;
                }
                
                // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
                const winAmount = Math.floor(state.gameData.betAmount * state.gameData.currentMultiplier);
                
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –≤—ã–≤–æ–¥–∞
                playSound('cashout');
                
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
                const containerRect = elements.container.getBoundingClientRect();
                const centerX = containerRect.left + containerRect.width / 2;
                const centerY = containerRect.top + containerRect.height / 2;
                createParticleEffect(centerX, centerY, 'confetti');
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('success');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (elements.minerResult) {
                    elements.minerResult.innerHTML = `
                        <div class="win-icon">üéâ</div>
                        <div class="win-title">–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} ‚≠ê!</div>
                        <div class="win-multiplier">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${state.gameData.currentMultiplier.toFixed(2)}</div>
                    `;
                    elements.minerResult.className = 'result win';
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                state.isPlaying = false;
                
                if (elements.cashoutBtn) {
                    elements.cashoutBtn.disabled = true;
                }
                
                if (elements.newGameBtn) {
                    elements.newGameBtn.disabled = false;
                }
                
                if (elements.minesCount) {
                    elements.minesCount.disabled = false;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
                revealAllMines();
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à (–ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–∏–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
                await window.casinoApp.processGameResult(
                    'miner',
                    0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
                    'win',
                    winAmount,
                    {
                        revealedCells: state.gameData.revealedCells,
                        multiplier: state.gameData.currentMultiplier,
                        minesCount: state.gameData.minesCount
                    }
                );
                
                // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
                if (audio.initialized && audio.background) {
                    const fadeOutInterval = setInterval(() => {
                        if (audio.background.volume > 0.05) {
                            audio.background.volume -= 0.05;
                        } else {
                            audio.background.pause();
                            clearInterval(fadeOutInterval);
                        }
                    }, 100);
                }
                
                app.log('–ú–∞–π–Ω–µ—Ä', `–£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥: ${winAmount} —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º ${state.gameData.currentMultiplier.toFixed(2)}`);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –≤—ã–∏–≥—Ä—ã—à–∞: ${error.message}`, true);
            }
        };
        
        /**
         * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫
         */
        const automaticCashout = async function() {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                if (!state.isPlaying) {
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ casinoApp
                if (!window.casinoApp) {
                    return;
                }
                
                // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
                const winAmount = Math.floor(state.gameData.betAmount * state.gameData.currentMultiplier);
                
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
                playSound('perfectWin');
                
                // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
                const containerRect = elements.container.getBoundingClientRect();
                for (let i = 0; i < 3; i++) {
                    setTimeout(() => {
                        const centerX = containerRect.left + Math.random() * containerRect.width;
                        const centerY = containerRect.top + Math.random() * containerRect.height;
                        createParticleEffect(centerX, centerY, 'confetti');
                    }, i * 300);
                }
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
                if (window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('success');
                    setTimeout(() => window.casinoApp.provideTactileFeedback('success'), 300);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (elements.minerResult) {
                    elements.minerResult.innerHTML = `
                        <div class="win-icon">üèÜ</div>
                        <div class="win-title">–ò–¥–µ–∞–ª—å–Ω–æ! –í—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã!</div>
                        <div class="win-amount">${winAmount} ‚≠ê</div>
                        <div class="win-multiplier">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${state.gameData.currentMultiplier.toFixed(2)}</div>
                    `;
                    elements.minerResult.className = 'result win big-win';
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                state.isPlaying = false;
                
                if (elements.cashoutBtn) {
                    elements.cashoutBtn.disabled = true;
                }
                
                if (elements.newGameBtn) {
                    elements.newGameBtn.disabled = false;
                }
                
                if (elements.minesCount) {
                    elements.minesCount.disabled = false;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
                revealAllMines();
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
                await window.casinoApp.processGameResult(
                    'miner',
                    0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
                    'win',
                    winAmount,
                    {
                        revealedCells: state.gameData.revealedCells, // –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è –∑–¥–µ—Å—å
                        multiplier: state.gameData.currentMultiplier,
                        minesCount: state.gameData.minesCount,
                        perfectGame: true
                    }
                );
                
                // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
                if (audio.initialized && audio.background) {
                    const fadeOutInterval = setInterval(() => {
                        if (audio.background.volume > 0.05) {
                            audio.background.volume -= 0.05;
                        } else {
                            audio.background.pause();
                            clearInterval(fadeOutInterval);
                        }
                    }, 100);
                }
                
                app.log('–ú–∞–π–Ω–µ—Ä', `–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º ${winAmount}`);
            } catch (error) {
                app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞: ${error.message}`, true);
            }
        };
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        return {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            init: init,
            startNewGame: startNewGame,
            cashout: cashout,
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º
            toggleSound: toggleSound,
            toggleMusic: toggleMusic,
            setVolume: setVolume,
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
            createParticleEffect: createParticleEffect,
            screenShake: screenShake,
            
            // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            getStatus: function() {
                return {
                    initialized: state.initialized,
                    initializationStarted: state.initializationStarted,
                    isPlaying: state.isPlaying,
                    elementsFound: {
                        newGameBtn: !!elements.newGameBtn,
                        cashoutBtn: !!elements.cashoutBtn,
                        minerBet: !!elements.minerBet,
                        minerGrid: !!elements.minerGrid
                    },
                    audio: {
                        initialized: audio.initialized,
                        muted: audio.muted,
                        musicMuted: audio.musicMuted
                    },
                    gameState: {
                        minesCount: state.gameData.minesCount,
                        revealedCells: state.gameData.revealedCells.length,
                        currentMultiplier: state.gameData.currentMultiplier
                    }
                };
            }
        };
    })();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    try {
        // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if (window.registerGame) {
            window.registerGame('minerGame', minerGame);
            app.log('–ú–∞–π–Ω–µ—Ä', '–ò–≥—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É registerGame');
        }
        
        // 2. –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        window.minerGame = minerGame;
        app.log('–ú–∞–π–Ω–µ—Ä', '–ò–≥—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω');
        
        // 3. –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
        app.log('–ú–∞–π–Ω–µ—Ä', '–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        
        // 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                if (!minerGame.getStatus().initialized && !minerGame.getStatus().initializationStarted) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                    minerGame.init();
                }
            }, 500);
        });
        
        // 5. –ï—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            setTimeout(() => {
                if (!minerGame.getStatus().initialized && !minerGame.getStatus().initializationStarted) {
                    app.log('–ú–∞–π–Ω–µ—Ä', '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω)');
                    minerGame.init();
                }
            }, 500);
        }
        
    } catch (error) {
        app.log('–ú–∞–π–Ω–µ—Ä', `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã: ${error.message}`, true);
    }
})();