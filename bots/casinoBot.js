const { Telegraf } = require('telegraf');
const User = require('../models/User');
const Dispute = require('../models/Dispute'); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–ø–æ—Ä–æ–≤

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ—Ç–∞
module.exports = (token) => {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ Casino –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', token);
  
  // Initialize the bot with passed token
  const bot = new Telegraf(token);
  
  // Welcome message
  bot.start(async (ctx) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
      
      const { id, first_name, last_name, username } = ctx.from;
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { id, first_name, last_name, username });
      
      // Register user if they don't exist
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      let user = await User.findOne({ telegramId: id });
      
      if (!user) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ...');
        user = new User({
          telegramId: id,
          firstName: first_name,
          lastName: last_name || '',
          username: username || ''
        });
        
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await user.save();
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      // Create welcome message with mini app button
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      console.log('WEBAPP_URL:', process.env.WEBAPP_URL);
      
      await ctx.reply(`Welcome to Greenlight Casino, ${first_name}! üé∞‚ú®\n\nTap the button below to start playing.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ Play Greenlight Casino', web_app: { url: process.env.WEBAPP_URL || 'https://grnlight-casino.onrender.com' } }]
          ]
        }
      });
      console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error);
      ctx.reply('Sorry, there was an error. Please try again later.');
    }
  });

  // –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
  bot.command('test', (ctx) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
      ctx.reply('–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /test:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }
  });
  
  // Balance command
  bot.command('balance', async (ctx) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /balance –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
      const { id } = ctx.from;
      
      console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const user = await User.findOne({ telegramId: id });
      
      if (!user) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return ctx.reply('You need to start the bot first. Please send /start.');
      }
      
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –±–∞–ª–∞–Ω—Å:', user.balance);
      ctx.reply(`Your current balance: ${user.balance} Stars ‚≠ê`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /balance:', error);
      ctx.reply('Sorry, there was an error. Please try again later.');
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞
  bot.command('dispute', async (ctx) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /dispute –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
      
      const args = ctx.message.text.split(' ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: /dispute @username amount
      if (args.length !== 3) {
        return ctx.reply(
          '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /dispute @username —Å—É–º–º–∞\n' +
          '–ü—Ä–∏–º–µ—Ä: /dispute @friend 100\n' +
          '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ Stars ‚≠ê'
        );
      }
      
      const opponentUsername = args[1].replace('@', '');
      const amount = parseInt(args[2]);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      if (isNaN(amount) || amount <= 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–ø–æ—Ä–∞
      const creator = await User.findOne({ telegramId: ctx.from.id });
      if (!creator) {
        return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ /start');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞—Ç–µ–ª—è
      if (creator.balance < amount) {
        return ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${creator.balance} ‚≠ê`);
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ username
      const opponent = await User.findOne({ username: opponentUsername });
      if (!opponent) {
        return ctx.reply(
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n' +
          '1. –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ username\n' +
          '2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'
        );
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ø–æ—Ä —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
      if (opponent.telegramId === creator.telegramId) {
        return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä —Å —Å–∞–º–∏–º —Å–æ–±–æ–π');
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const dispute = new Dispute({
        creatorId: creator.telegramId,
        opponentId: opponent.telegramId,
        amount: amount,
        status: 'pending'
      });
      
      await dispute.save();
      console.log('–°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω:', dispute._id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
      await ctx.reply(
        `‚úÖ –°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω!\n\n` +
        `–û–ø–ø–æ–Ω–µ–Ω—Ç: @${opponent.username}\n` +
        `–°—É–º–º–∞: ${amount} ‚≠ê\n` +
        `–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n` +
        `ID —Å–ø–æ—Ä–∞: ${dispute._id}`
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
      try {
        await bot.telegram.sendMessage(opponent.telegramId, 
          `üé≤ –ù–æ–≤—ã–π —Å–ø–æ—Ä!\n\n` +
          `@${ctx.from.username} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å–ø–æ—Ä –Ω–∞ ${amount} ‚≠ê\n\n` +
          `–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–ø–æ—Ä', callback_data: `accept_dispute_${dispute._id}` },
                  { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_dispute_${dispute._id}` }
                ]
              ]
            }
          }
        );
        console.log('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç—É:', error);
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ø–æ—Ä–∞
  bot.action(/accept_dispute_(.+)/, async (ctx) => {
    try {
      const disputeId = ctx.match[1];
      console.log('–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–ø–æ—Ä–∞:', disputeId);
      
      const dispute = await Dispute.findById(disputeId);
      
      if (!dispute) {
        return ctx.answerCbQuery('–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (dispute.status !== 'pending') {
        return ctx.answerCbQuery('–≠—Ç–æ—Ç —Å–ø–æ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç
      if (dispute.opponentId !== ctx.from.id) {
        return ctx.answerCbQuery('–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
      const opponent = await User.findOne({ telegramId: ctx.from.id });
      if (opponent.balance < dispute.amount) {
        return ctx.answerCbQuery(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${dispute.amount} ‚≠ê`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞
      dispute.status = 'accepted';
      await dispute.save();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await ctx.editMessageText(
        `‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–ø–æ—Ä!\n\n` +
        `–°—É–º–º–∞: ${dispute.amount} ‚≠ê\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ 
                text: 'üé≤ –ù–∞—á–∞—Ç—å —Å–ø–æ—Ä', 
                web_app: { url: `${process.env.WEBAPP_URL}?disputeId=${dispute._id}` }
              }]
            ]
          }
        }
      );
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
      const creator = await User.findOne({ telegramId: dispute.creatorId });
      await bot.telegram.sendMessage(dispute.creatorId,
        `‚úÖ @${opponent.username} –ø—Ä–∏–Ω—è–ª –≤–∞—à —Å–ø–æ—Ä!\n\n` +
        `–°—É–º–º–∞: ${dispute.amount} ‚≠ê\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ 
                text: 'üé≤ –ù–∞—á–∞—Ç—å —Å–ø–æ—Ä', 
                web_app: { url: `${process.env.WEBAPP_URL}?disputeId=${dispute._id}` }
              }]
            ]
          }
        }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ø–æ—Ä–∞:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ø–æ—Ä–∞
  bot.action(/decline_dispute_(.+)/, async (ctx) => {
    try {
      const disputeId = ctx.match[1];
      console.log('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–æ—Ä–∞:', disputeId);
      
      const dispute = await Dispute.findById(disputeId);
      
      if (!dispute) {
        return ctx.answerCbQuery('–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (dispute.status !== 'pending') {
        return ctx.answerCbQuery('–≠—Ç–æ—Ç —Å–ø–æ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç
      if (dispute.opponentId !== ctx.from.id) {
        return ctx.answerCbQuery('–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞
      dispute.status = 'declined';
      await dispute.save();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
      await ctx.editMessageText(
        `‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Å–ø–æ—Ä –Ω–∞ ${dispute.amount} ‚≠ê`
      );
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
      const creator = await User.findOne({ telegramId: dispute.creatorId });
      await bot.telegram.sendMessage(dispute.creatorId,
        `‚ùå @${ctx.from.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à —Å–ø–æ—Ä –Ω–∞ ${dispute.amount} ‚≠ê`
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ø–æ—Ä–∞:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // Help command - –æ–±–Ω–æ–≤–ª—è–µ–º, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ä–∞—Ö
  bot.help((ctx) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    ctx.reply(`
Welcome to Greenlight Casino! üé©‚ú®

Available commands:
/start - Start the bot and get the game link
/balance - Check your current Stars balance
/dispute @username amount - Challenge someone to a coin flip duel
/help - Show this help message
/test - Test the bot functionality

To play casino games, tap the Play button after using /start command.

Games available:
üé∞ Slots
üé≤ Roulette
üî¢ Guess the Number
üí£ Miner
üìà Crush
ü™ô Coin Flip Duel (use /dispute command)

Good luck and enjoy the Gatsby-inspired experience!
    `);
  });
  
  // Handle other messages
  bot.on('message', (ctx) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    ctx.reply('Use /start to begin playing or /help for more information.');
  });
  
  return bot;
};