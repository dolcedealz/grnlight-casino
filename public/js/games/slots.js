// public/js/games/slots.js

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã Slots —Å –º–∞—Ç—Ä–∏—Ü–µ–π 3x3 –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –≤—Ä–∞—â–µ–Ω–∏–µ–º
const slotsGame = (() => {
  // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
  const spinBtn = document.getElementById('spin-btn');
  const slotsResult = document.getElementById('slots-result');
  const slotsBet = document.getElementById('slots-bet');
  
  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–æ—Ç–æ–≤ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
  let slotsContainer = document.querySelector('.slot-reels');
  let reels = [];
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  let isSpinning = false;
  const symbols = ['üçí', 'üçã', 'üçá', 'üçä', 'üçâ', 'üíé', '7Ô∏è‚É£', 'ü§ë'];
  
  // –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 3x3 –º–∞—Ç—Ä–∏—Ü–µ–π
  const rowCount = 3;
  const colCount = 3;
  let slotMatrix = []; // –•—Ä–∞–Ω–∏—Ç –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  
  // –ó–≤—É–∫–∏
  let spinSound, stopSound, winSound, loseSound;
  
  // –ó–Ω–∞—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ (–º–Ω–æ–∂–∏—Ç–µ–ª–∏)
  const symbolValues = {
    'üçí': 2,
    'üçã': 2,
    'üçá': 3,
    'üçä': 3,
    'üçâ': 4,
    'üíé': 5,
    '7Ô∏è‚É£': 10,
    'ü§ë': 15
  };
  
  // –û–ø–∏—Å–∞–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
  const winDescriptions = {
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    horizontalLine: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è! x{multiplier} –≤—ã–∏–≥—Ä—ã—à!',
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    verticalLine: '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è! x{multiplier} –≤—ã–∏–≥—Ä—ã—à!',
    // –î–∏–∞–≥–æ–Ω–∞–ª–∏
    diagonal: '–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è! x{multiplier} –≤—ã–∏–≥—Ä—ã—à!',
    // –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
    fullMatch: '–î–∂–µ–∫–ø–æ—Ç! –í—Å–µ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç! x{multiplier} –≤—ã–∏–≥—Ä—ã—à!'
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  function init() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã Slots');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–æ—Ç–æ–≤ 3x3
    createSlotsContainer();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (spinBtn) {
      spinBtn.addEventListener('click', spin);
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–≤—É–∫–∏
    setupSounds();
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ—Ç—ã –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    populateSlots();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (slotsResult) {
      slotsResult.style.display = 'none';
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–ª–æ—Ç–æ–≤ 3x3
  function createSlotsContainer() {
    const oldContainer = slotsContainer;
    
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    if (oldContainer) {
      const parent = oldContainer.parentElement;
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const newContainer = document.createElement('div');
      newContainer.className = 'slot-reels new-slot-reels';
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 3x3
      for (let row = 0; row < rowCount; row++) {
        const rowElement = document.createElement('div');
        rowElement.className = 'slot-row';
        
        for (let col = 0; col < colCount; col++) {
          const reel = document.createElement('div');
          reel.className = 'reel';
          reel.dataset.row = row;
          reel.dataset.col = col;
          
          // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ (–ª–µ–Ω—Ç–∞)
          const reelStrip = document.createElement('div');
          reelStrip.className = 'reel-strip';
          reel.appendChild(reelStrip);
          
          rowElement.appendChild(reel);
          reels.push(reelStrip);
        }
        
        newContainer.appendChild(rowElement);
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      if (parent) {
        parent.replaceChild(newContainer, oldContainer);
        slotsContainer = newContainer;
      }
    } else {
      console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–æ—Ç–æ–≤');
    }
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–æ–≤
  function setupSounds() {
    try {
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      if (AudioContext) {
        const audioCtx = new AudioContext();
        
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        spinSound = { play: () => console.log('–ó–≤—É–∫ –≤—Ä–∞—â–µ–Ω–∏—è') };
        stopSound = { play: () => console.log('–ó–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏') };
        winSound = { play: () => console.log('–ó–≤—É–∫ –≤—ã–∏–≥—Ä—ã—à–∞') };
        loseSound = { play: () => console.log('–ó–≤—É–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞') };
      }
    } catch (e) {
      console.log('–ê—É–¥–∏–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', e);
    }
  }
  
  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  function populateSlots() {
    reels.forEach(reel => {
      // –û—á–∏—â–∞–µ–º –ª–µ–Ω—Ç—É
      reel.innerHTML = '';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª
      const symbolElement = document.createElement('div');
      symbolElement.className = 'symbol';
      symbolElement.textContent = getRandomSymbol();
      
      reel.appendChild(symbolElement);
    });
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  function getRandomSymbol() {
    const randomIndex = Math.floor(Math.random() * symbols.length);
    return symbols[randomIndex];
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  function getWeightedRandomSymbol() {
    // –í–µ—Å–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è)
    const weights = {
      'üçí': 25, // 25% —à–∞–Ω—Å
      'üçã': 20, // 20% —à–∞–Ω—Å
      'üçá': 15, // 15% —à–∞–Ω—Å
      'üçä': 15, // 15% —à–∞–Ω—Å
      'üçâ': 10, // 10% —à–∞–Ω—Å
      'üíé': 8,  // 8% —à–∞–Ω—Å
      '7Ô∏è‚É£': 5,  // 5% —à–∞–Ω—Å
      'ü§ë': 2   // 2% —à–∞–Ω—Å
    };
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –≤–µ—Å
    const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ totalWeight
    let random = Math.random() * totalWeight;
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª—É—á–∞–π–Ω–æ–º—É —á–∏—Å–ª—É
    for (const symbol in weights) {
      random -= weights[symbol];
      if (random <= 0) {
        return symbol;
      }
    }
    
    // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    return symbols[0];
  }
  
  // –ó–∞–ø—É—Å–∫ –≤—Ä–∞—â–µ–Ω–∏—è
  async function spin() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ä–∞—â–∞—é—Ç—Å—è –ª–∏ —É–∂–µ –±–∞—Ä–∞–±–∞–Ω—ã
    if (isSpinning) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
    const betAmount = parseInt(slotsBet.value);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
    if (isNaN(betAmount) || betAmount <= 0) {
      window.casinoApp.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (betAmount > window.casinoApp.currentUser.balance) {
      window.casinoApp.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
    isSpinning = true;
    if (spinBtn) {
      spinBtn.disabled = true;
      spinBtn.textContent = '–í–†–ê–©–ï–ù–ò–ï...';
    }
    
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if (window.casinoApp.provideTactileFeedback) {
      window.casinoApp.provideTactileFeedback('medium');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (slotsResult) {
      slotsResult.style.opacity = '0';
      slotsResult.style.transform = 'translateY(20px)';
      setTimeout(() => {
        slotsResult.textContent = '';
        slotsResult.className = 'result';
        slotsResult.style.display = 'none';
      }, 300);
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤—Ä–∞—â–µ–Ω–∏—è
    if (spinSound) spinSound.play();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã 3x3
    slotMatrix = [];
    for (let row = 0; row < rowCount; row++) {
      slotMatrix[row] = [];
      for (let col = 0; col < colCount; col++) {
        slotMatrix[row][col] = getWeightedRandomSymbol();
      }
    }
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö 9 –ø–æ–∑–∏—Ü–∏–π
      const spinPromises = [];
      for (let i = 0; i < reels.length; i++) {
        const row = Math.floor(i / colCount);
        const col = i % colCount;
        
        // –í—Ä–∞—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–ª–±—Ü–∞
        const promise = animateReel(reels[i], 
                                   slotMatrix[row][col], 
                                   col * 400 + row * 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
        spinPromises.push(promise);
      }
      
      // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤
      await Promise.all(spinPromises);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = checkWin(slotMatrix);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
      const winAmount = result.win ? Math.floor(betAmount * result.multiplier) : 0;
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      displayResult(result.win, winAmount, result.description);
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (result.win) {
        if (window.casinoApp.provideTactileFeedback) {
          window.casinoApp.provideTactileFeedback('success');
        }
        if (winSound) winSound.play();
      } else {
        if (window.casinoApp.provideTactileFeedback) {
          window.casinoApp.provideTactileFeedback('warning');
        }
        if (loseSound) loseSound.play();
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const gameData = {
        matrix: slotMatrix,
        winLines: result.winLines,
        multiplier: result.multiplier,
        description: result.description
      };
      
      await window.casinoApp.processGameResult(
        'slots',
        betAmount,
        result.win ? 'win' : 'lose',
        winAmount,
        gameData
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã:', error);
      window.casinoApp.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isSpinning = false;
      if (spinBtn) {
        spinBtn.disabled = false;
        spinBtn.textContent = '–ö–†–£–¢–ò–¢–¨';
      }
    }
  }
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  function animateReel(reel, finalSymbol, delay) {
    return new Promise(resolve => {
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
      reel.innerHTML = '';
      
      // –°–æ–∑–¥–∞–µ–º –ª–µ–Ω—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ)
      // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—É–¥–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–º
      const symbolCount = 20 + Math.floor(Math.random() * 10);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –∫–æ–Ω–µ—Ü
      const symbols = [];
      for (let i = 0; i < symbolCount; i++) {
        symbols.push(getRandomSymbol());
      }
      symbols.push(finalSymbol);
      
      // –°–æ–∑–¥–∞–µ–º –ª–µ–Ω—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      for (let i = 0; i < symbols.length; i++) {
        const symbolElement = document.createElement('div');
        symbolElement.className = 'symbol';
        symbolElement.textContent = symbols[i];
        reel.appendChild(symbolElement);
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        reel.style.transition = 'transform 3s cubic-bezier(.17,.67,.83,1.3)';
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞)
        const symbolHeight = 60; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å–∏–º–≤–æ–ª–∞
        const scrollDistance = -(symbols.length - 1) * symbolHeight;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        reel.style.transform = `translateY(${scrollDistance}px)`;
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
          if (stopSound) stopSound.play();
        }, 2800); // –ù–µ–º–Ω–æ–≥–æ —Ä–∞–Ω—å—à–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
          // –û—á–∏—â–∞–µ–º –ª–µ–Ω—Ç—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
          reel.style.transition = 'none';
          reel.style.transform = 'translateY(0)';
          reel.innerHTML = '';
          
          const finalSymbolElement = document.createElement('div');
          finalSymbolElement.className = 'symbol final';
          finalSymbolElement.textContent = finalSymbol;
          reel.appendChild(finalSymbolElement);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
          finalSymbolElement.classList.add('glow');
          
          resolve(finalSymbol);
        }, 3000);
      }, delay);
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã 3x3
  function checkWin(matrix) {
    const winLines = [];
    let highestMultiplier = 0;
    let bestWinDescription = '';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
    for (let row = 0; row < rowCount; row++) {
      // –ï—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ä—è–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
      if (matrix[row][0] === matrix[row][1] && matrix[row][1] === matrix[row][2]) {
        const symbol = matrix[row][0];
        const multiplier = symbolValues[symbol] * 1.5; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ª–∏–Ω–∏–∏
        
        winLines.push({
          type: 'horizontal',
          row: row,
          symbol: symbol,
          multiplier: multiplier
        });
        
        if (multiplier > highestMultiplier) {
          highestMultiplier = multiplier;
          bestWinDescription = winDescriptions.horizontalLine.replace('{multiplier}', multiplier);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
    for (let col = 0; col < colCount; col++) {
      // –ï—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç–æ–ª–±—Ü–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
      if (matrix[0][col] === matrix[1][col] && matrix[1][col] === matrix[2][col]) {
        const symbol = matrix[0][col];
        const multiplier = symbolValues[symbol] * 1.5; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ª–∏–Ω–∏–∏
        
        winLines.push({
          type: 'vertical',
          col: col,
          symbol: symbol,
          multiplier: multiplier
        });
        
        if (multiplier > highestMultiplier) {
          highestMultiplier = multiplier;
          bestWinDescription = winDescriptions.verticalLine.replace('{multiplier}', multiplier);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞ –≤–Ω–∏–∑ —Å–ø—Ä–∞–≤–∞
    if (matrix[0][0] === matrix[1][1] && matrix[1][1] === matrix[2][2]) {
      const symbol = matrix[0][0];
      const multiplier = symbolValues[symbol] * 2; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏
      
      winLines.push({
        type: 'diagonal',
        direction: 'main',
        symbol: symbol,
        multiplier: multiplier
      });
      
      if (multiplier > highestMultiplier) {
        highestMultiplier = multiplier;
        bestWinDescription = winDescriptions.diagonal.replace('{multiplier}', multiplier);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–Ω–∏–∑—É —Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö —Å–ø—Ä–∞–≤–∞
    if (matrix[2][0] === matrix[1][1] && matrix[1][1] === matrix[0][2]) {
      const symbol = matrix[2][0];
      const multiplier = symbolValues[symbol] * 2; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏
      
      winLines.push({
        type: 'diagonal',
        direction: 'anti',
        symbol: symbol,
        multiplier: multiplier
      });
      
      if (multiplier > highestMultiplier) {
        highestMultiplier = multiplier;
        bestWinDescription = winDescriptions.diagonal.replace('{multiplier}', multiplier);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–≤—Å–µ 9 —Å–∏–º–≤–æ–ª–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
    let allSame = true;
    const firstSymbol = matrix[0][0];
    
    for (let row = 0; row < rowCount && allSame; row++) {
      for (let col = 0; col < colCount && allSame; col++) {
        if (matrix[row][col] !== firstSymbol) {
          allSame = false;
        }
      }
    }
    
    if (allSame) {
      const jackpotMultiplier = symbolValues[firstSymbol] * 5; // –ë–æ–ª—å—à–æ–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–∂–µ–∫–ø–æ—Ç–∞
      
      winLines.push({
        type: 'jackpot',
        symbol: firstSymbol,
        multiplier: jackpotMultiplier
      });
      
      highestMultiplier = jackpotMultiplier;
      bestWinDescription = winDescriptions.fullMatch.replace('{multiplier}', jackpotMultiplier);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      win: winLines.length > 0,
      multiplier: highestMultiplier,
      winLines: winLines,
      description: bestWinDescription || '–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!'
    };
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
  function displayResult(isWin, amount, description) {
    if (!slotsResult) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (isWin) {
      slotsResult.innerHTML = `
        <div class="win-icon">üéâ</div>
        <div class="win-title">–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${amount} ‚≠ê!</div>
        <div class="win-description">${description}</div>
      `;
      slotsResult.classList.add('win');
      slotsResult.classList.remove('lose');
      
      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏
      highlightWinLines();
    } else {
      slotsResult.innerHTML = `
        <div class="lose-icon">üò¢</div>
        <div class="lose-title">–ù–µ –ø–æ–≤–µ–∑–ª–æ</div>
        <div class="lose-description">${description}</div>
      `;
      slotsResult.classList.add('lose');
      slotsResult.classList.remove('win');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    slotsResult.style.display = 'block';
    setTimeout(() => {
      slotsResult.style.opacity = '1';
      slotsResult.style.transform = 'translateY(0)';
    }, 50);
  }
  
  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π
  function highlightWinLines() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    
    const reelElements = document.querySelectorAll('.reel');
    reelElements.forEach(reel => {
      const row = parseInt(reel.dataset.row);
      const col = parseInt(reel.dataset.col);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –≤ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –ª–∏–Ω–∏—é
      let isWinningSymbol = false;
      
      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
      if (row < rowCount && col < colCount && 
          slotMatrix[row][0] === slotMatrix[row][1] && 
          slotMatrix[row][1] === slotMatrix[row][2]) {
        isWinningSymbol = true;
      }
      
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
      if (row < rowCount && col < colCount && 
          slotMatrix[0][col] === slotMatrix[1][col] && 
          slotMatrix[1][col] === slotMatrix[2][col]) {
        isWinningSymbol = true;
      }
      
      // –ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
      if (row === col && 
          slotMatrix[0][0] === slotMatrix[1][1] && 
          slotMatrix[1][1] === slotMatrix[2][2]) {
        isWinningSymbol = true;
      }
      
      // –ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
      if (row + col === 2 && 
          slotMatrix[2][0] === slotMatrix[1][1] && 
          slotMatrix[1][1] === slotMatrix[0][2]) {
        isWinningSymbol = true;
      }
      
      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      if (isWinningSymbol) {
        const symbolElement = reel.querySelector('.symbol');
        if (symbolElement) {
          symbolElement.classList.add('winning');
        }
      }
    });
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.addEventListener('DOMContentLoaded', init);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  return {
    init,
    spin
  };
})();

// –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.slotsGame = slotsGame;