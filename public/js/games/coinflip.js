/**
 * coinflip.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã "–ú–æ–Ω–µ—Ç–∫–∞"
 * –í–µ—Ä—Å–∏—è 2.0.0
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
 * - –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 * - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
 */

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
(function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (!window.GreenLightApp) {
        console.error('[CoinFlip] GreenLightApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        window.GreenLightApp = {
            log: function(source, message, isError) {
                if (isError) console.error(`[${source}] ${message}`);
                else console.log(`[${source}] ${message}`);
            }
        };
    }
    
    const app = window.GreenLightApp;
    app.log('CoinFlip', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –ú–æ–Ω–µ—Ç–∫–∞ v2.0.0');
    
    // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
    const coinFlipGame = (function() {
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
        let elements = {
            flipBtn: null,
            coinBet: null,
            coinElement: null,
            coinResult: null,
            container: null,
            headsBtn: null,
            tailsBtn: null,
            backBtn: null,
            multiplierDisplay: null
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        let state = {
            isFlipping: false,
            initialized: false,
            initializationStarted: false,
            chosenSide: null,
            betAmount: 10,
            soundEnabled: true
        };
        
        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        let sounds = {
            flip: null,
            win: null,
            lose: null,
            click: null
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–≥—Ä—ã
         */
        const createGameContainer = function() {
            try {
                app.log('CoinFlip', '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–≥—Ä—ã');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∏–≥—Ä—ã
                const gameScreen = document.getElementById('coinflip-screen');
                if (!gameScreen) {
                    // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
                    const mainContent = document.querySelector('.main-content');
                    if (!mainContent) {
                        app.log('CoinFlip', '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                        return null;
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –∏–≥—Ä—ã
                    const newScreen = document.createElement('div');
                    newScreen.id = 'coinflip-screen';
                    newScreen.className = 'screen';
                    mainContent.appendChild(newScreen);
                    
                    app.log('CoinFlip', '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –∏–≥—Ä—ã');
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —ç–∫—Ä–∞–Ω (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ –Ω–æ–≤—ã–π)
                const screen = document.getElementById('coinflip-screen');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–≥—Ä—ã
                elements.container = screen.querySelector('.coinflip-container');
                if (!elements.container) {
                    elements.container = document.createElement('div');
                    elements.container.className = 'coinflip-container game-container';
                    screen.appendChild(elements.container);
                    
                    app.log('CoinFlip', '–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä—ã');
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                addGameCard();
                
                return elements.container;
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${error.message}`, true);
                return null;
            }
        };
        
        /**
         * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä—ã –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
         */
        const addGameCard = function() {
            try {
                const gameGrid = document.querySelector('.game-grid');
                if (!gameGrid) {
                    app.log('CoinFlip', '–°–µ—Ç–∫–∞ –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∞
                if (gameGrid.querySelector('.game-card[data-game="coinflip"]')) {
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                const card = document.createElement('div');
                card.className = 'game-card';
                card.setAttribute('data-game', 'coinflip');
                
                card.innerHTML = `
                    <div class="game-icon">ü™ô</div>
                    <div class="game-name">–ú–æ–Ω–µ—Ç–∫–∞</div>
                `;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Ç–∫—É
                gameGrid.appendChild(card);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                const gameCards = document.querySelectorAll('.game-card');
                gameCards.forEach(gameCard => {
                    gameCard.addEventListener('click', function() {
                        const game = this.getAttribute('data-game');
                        if (!game) return;
                        
                        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                        if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                            window.casinoApp.provideTactileFeedback('light');
                        }
                        
                        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
                        document.querySelectorAll('.screen').forEach(screen => {
                            screen.classList.remove('active');
                        });
                        
                        const targetScreen = document.getElementById(`${game}-screen`);
                        if (targetScreen) {
                            targetScreen.classList.add('active');
                        }
                    });
                });
                
                app.log('CoinFlip', '–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: ${error.message}`, true);
            }
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã
         */
        const createGameInterface = function() {
            try {
                const container = elements.container || createGameContainer();
                if (!container) {
                    app.log('CoinFlip', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (container.querySelector('.coin-element')) {
                    app.log('CoinFlip', '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω');
                    return true;
                }
                
                // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É HTML –¥–ª—è –∏–≥—Ä—ã
                container.innerHTML = `
                    <div class="game-header">
                        <button class="back-btn">‚Üê –ù–∞–∑–∞–¥</button>
                        <h2>–ú–æ–Ω–µ—Ç–∫–∞</h2>
                    </div>
                    
                    <div class="multiplier-container">
                        <span>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</span>
                        <span class="multiplier-value">2.0x</span>
                    </div>
                    
                    <div class="coin-container">
                        <div class="coin-element" id="coin">
                            <div class="coin-side heads"></div>
                            <div class="coin-side tails"></div>
                        </div>
                    </div>
                    
                    <div class="result-display" id="coin-result"></div>
                    
                    <div class="bet-section">
                        <div class="bet-controls">
                            <div class="bet-input-container">
                                <label for="coin-bet">–°—Ç–∞–≤–∫–∞:</label>
                                <div class="bet-input-wrapper">
                                    <button class="bet-decrease-btn">-</button>
                                    <input type="number" id="coin-bet" class="bet-input" min="1" max="1000" value="10">
                                    <button class="bet-increase-btn">+</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="coin-choice">
                        <div class="choice-label">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:</div>
                        <div class="choice-buttons">
                            <button id="choose-heads" class="choice-btn">
                                <span class="choice-icon">üî¥</span>
                                <span class="choice-text">–û—Ä—ë–ª</span>
                            </button>
                            <button id="choose-tails" class="choice-btn">
                                <span class="choice-icon">‚ö™</span>
                                <span class="choice-text">–†–µ—à–∫–∞</span>
                            </button>
                        </div>
                    </div>
                    
                    <div class="control-buttons">
                        <button id="flip-btn" class="action-btn">–ü–û–î–ë–†–û–°–ò–¢–¨ –ú–û–ù–ï–¢–£</button>
                        
                        <div class="secondary-controls">
                            <button id="toggle-sound" class="control-btn">
                                <span id="sound-icon">üîä</span>
                            </button>
                        </div>
                    </div>
                `;
                
                app.log('CoinFlip', '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
                return true;
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ${error.message}`, true);
                return false;
            }
        };
        
        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
         */
        const init = async function() {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (state.initialized || state.initializationStarted) {
                app.log('CoinFlip', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
                return true;
            }
            
            state.initializationStarted = true;
            app.log('CoinFlip', '–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã');
            
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                const initPromise = new Promise(async (resolve) => {
                    try {
                        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        if (!createGameInterface()) {
                            app.log('CoinFlip', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã', true);
                            resolve(false);
                            return;
                        }
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
                        await loadAudio();
                        
                        // –ü–æ–ª—É—á–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
                        await findDOMElements();
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
                        app.log('CoinFlip', '–ü—Ä–æ–≤–µ—Ä–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                        setupEventListeners();
                        
                        state.initialized = true;
                        app.log('CoinFlip', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                        resolve(true);
                    } catch (innerError) {
                        app.log('CoinFlip', `–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${innerError.message}`, true);
                        resolve(false);
                    }
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç (3 —Å–µ–∫—É–Ω–¥—ã)
                const timeoutPromise = new Promise((resolve) => {
                    setTimeout(() => {
                        app.log('CoinFlip', '–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', true);
                        resolve(false);
                    }, 3000);
                });
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
                const result = await Promise.race([initPromise, timeoutPromise]);
                
                return result;
                
            } catch (error) {
                app.log('CoinFlip', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, true);
                state.initializationStarted = false;
                return false;
            }
        };
        
        /**
         * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç null
         */
        const findDOMElements = async function() {
            return new Promise((resolve) => {
                try {
                    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
                    setTimeout(() => {
                        elements.flipBtn = document.getElementById('flip-btn');
                        elements.coinBet = document.getElementById('coin-bet');
                        elements.coinElement = document.getElementById('coin');
                        elements.coinResult = document.getElementById('coin-result');
                        elements.headsBtn = document.getElementById('choose-heads');
                        elements.tailsBtn = document.getElementById('choose-tails');
                        elements.toggleSound = document.getElementById('toggle-sound');
                        elements.backBtn = document.querySelector('#coinflip-screen .back-btn');
                        elements.multiplierDisplay = document.querySelector('.multiplier-value');
                        elements.betDecreaseBtn = document.querySelector('.bet-decrease-btn');
                        elements.betIncreaseBtn = document.querySelector('.bet-increase-btn');
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        if (!elements.coinElement) {
                            app.log('CoinFlip', '–≠–ª–µ–º–µ–Ω—Ç –º–æ–Ω–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                        }
                        
                        if (!elements.flipBtn) {
                            app.log('CoinFlip', '–ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
                        }
                        
                        resolve();
                    }, 100);
                } catch (error) {
                    app.log('CoinFlip', `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${error.message}`, true);
                    resolve(); // –†–µ–∑–æ–ª–≤–∏–º –ø—Ä–æ–º–∏—Å, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                }
            });
        };
        
        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
         */
        const loadAudio = async function() {
            try {
                // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –æ–±—ä–µ–∫—Ç—ã
                sounds.flip = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-arcade-mechanical-bling-210.mp3');
                sounds.win = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-winning-chimes-2015.mp3');
                sounds.lose = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-negative-tone-interface-tap-2301.mp3');
                sounds.click = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-modern-technology-select-3124.mp3');
                
                // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
                const preloadPromises = [
                    preloadAudio(sounds.flip),
                    preloadAudio(sounds.win),
                    preloadAudio(sounds.lose),
                    preloadAudio(sounds.click)
                ];
                
                // –ñ–¥–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await Promise.race([
                    Promise.all(preloadPromises),
                    new Promise(resolve => setTimeout(resolve, 1000))
                ]);
                
                app.log('CoinFlip', '–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
                return true;
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: ${error.message}`, true);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É–¥–∏–æ
                return false;
            }
        };
        
        /**
         * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Å –ø—Ä–æ–º–∏—Å–æ–º
         */
        const preloadAudio = function(audioElement) {
            return new Promise((resolve) => {
                if (!audioElement) {
                    resolve();
                    return;
                }
                
                // –°–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                audioElement.addEventListener('canplaythrough', () => {
                    resolve();
                }, { once: true });
                
                // –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
                audioElement.addEventListener('error', () => {
                    resolve();
                }, { once: true });
                
                // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                if (audioElement.readyState >= 3) {
                    resolve();
                } else {
                    audioElement.load();
                }
                
                // –¢–∞–π–º–∞—É—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                setTimeout(resolve, 500);
            });
        };
        
        /**
         * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
         */
        const playSound = function(sound) {
            if (!state.soundEnabled || !sounds[sound]) return;
            
            try {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ —É–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
                sounds[sound].currentTime = 0;
                sounds[sound].play().catch(error => {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—á–∞—Å—Ç—ã–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
                    app.log('CoinFlip', `–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: ${error.message}`, false);
                });
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ
            }
        };
        
        /**
         * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
         */
        const toggleSound = function() {
            state.soundEnabled = !state.soundEnabled;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
            const soundIcon = document.getElementById('sound-icon');
            if (soundIcon) {
                soundIcon.textContent = state.soundEnabled ? 'üîä' : 'üîá';
            }
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –Ω–∞–∂–∞—Ç–∏—è, –µ—Å–ª–∏ –∑–≤—É–∫ –≤–∫–ª—é—á–µ–Ω
            if (state.soundEnabled) {
                playSound('click');
            }
            
            app.log('CoinFlip', `–ó–≤—É–∫ ${state.soundEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
        };
        
        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
         */
        const setupEventListeners = function() {
            try {
                // –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç—ã
                if (elements.flipBtn) {
                    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    const newFlipBtn = elements.flipBtn.cloneNode(true);
                    if (elements.flipBtn.parentNode) {
                        elements.flipBtn.parentNode.replaceChild(newFlipBtn, elements.flipBtn);
                    }
                    elements.flipBtn = newFlipBtn;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    elements.flipBtn.addEventListener('click', flipCoin);
                }
                
                // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ "–û—Ä—ë–ª"
                if (elements.headsBtn) {
                    elements.headsBtn.addEventListener('click', () => chooseOption('heads'));
                }
                
                // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ "–†–µ—à–∫–∞"
                if (elements.tailsBtn) {
                    elements.tailsBtn.addEventListener('click', () => chooseOption('tails'));
                }
                
                // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
                if (elements.toggleSound) {
                    elements.toggleSound.addEventListener('click', toggleSound);
                }
                
                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                if (elements.backBtn) {
                    elements.backBtn.addEventListener('click', () => {
                        playSound('click');
                        
                        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                        if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                            window.casinoApp.provideTactileFeedback('light');
                        }
                        
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                        document.querySelectorAll('.screen').forEach(screen => {
                            screen.classList.remove('active');
                        });
                        
                        const welcomeScreen = document.getElementById('welcome-screen');
                        if (welcomeScreen) {
                            welcomeScreen.classList.add('active');
                        }
                    });
                }
                
                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
                if (elements.betDecreaseBtn) {
                    elements.betDecreaseBtn.addEventListener('click', () => {
                        playSound('click');
                        adjustBet(-1);
                    });
                }
                
                if (elements.betIncreaseBtn) {
                    elements.betIncreaseBtn.addEventListener('click', () => {
                        playSound('click');
                        adjustBet(1);
                    });
                }
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
                if (elements.coinBet) {
                    elements.coinBet.addEventListener('change', validateBetInput);
                }
                
                app.log('CoinFlip', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: ${error.message}`, true);
            }
        };
        
        /**
         * –í—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–Ω–µ—Ç—ã (–æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞)
         */
        const chooseOption = function(option) {
            try {
                state.chosenSide = option;
                
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –Ω–∞–∂–∞—Ç–∏—è
                playSound('click');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                if (elements.headsBtn) {
                    elements.headsBtn.classList.toggle('selected', option === 'heads');
                }
                
                if (elements.tailsBtn) {
                    elements.tailsBtn.classList.toggle('selected', option === 'tails');
                }
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('light');
                }
                
                app.log('CoinFlip', `–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ${option === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'}`);
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã: ${error.message}`, true);
            }
        };
        
        /**
         * –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
         */
        const adjustBet = function(change) {
            try {
                if (!elements.coinBet) return;
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
                let currentBet = parseInt(elements.coinBet.value) || 10;
                
                // –û–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
                const commonBets = [1, 5, 10, 20, 50, 100, 200, 500, 1000];
                
                if (change < 0) {
                    // –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–≤–∫—É
                    let newBet = currentBet;
                    
                    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –º–µ–Ω—å—à—É—é –æ–±—â—É—é —Å—Ç–∞–≤–∫—É
                    for (let i = commonBets.length - 1; i >= 0; i--) {
                        if (commonBets[i] < currentBet) {
                            newBet = commonBets[i];
                            break;
                        }
                    }
                    
                    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
                    currentBet = Math.max(1, newBet);
                } else {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
                    let newBet = currentBet;
                    
                    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –±–æ–ª—å—à—É—é –æ–±—â—É—é —Å—Ç–∞–≤–∫—É
                    for (let i = 0; i < commonBets.length; i++) {
                        if (commonBets[i] > currentBet) {
                            newBet = commonBets[i];
                            break;
                        }
                    }
                    
                    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
                    currentBet = Math.min(1000, newBet);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                state.betAmount = currentBet;
                elements.coinBet.value = currentBet;
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('light');
                }
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞–≤–∫–∏: ${error.message}`, true);
            }
        };
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∏–º–æ–π —Å—Ç–∞–≤–∫–∏
         */
        const validateBetInput = function() {
            try {
                if (!elements.coinBet) return;
                
                // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                let value = parseInt(elements.coinBet.value);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞
                if (isNaN(value)) {
                    value = 10;
                }
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                value = Math.min(1000, Math.max(1, value));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                state.betAmount = value;
                elements.coinBet.value = value;
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–≤–∫–∏: ${error.message}`, true);
            }
        };
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ casinoApp –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
         */
        const ensureCasinoApp = function() {
            if (window.casinoApp) return true;
            
            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é casinoApp –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—ä–µ–∫—Ç–∞
            app.log('CoinFlip', 'casinoApp –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é', true);
            window.casinoApp = {
                showNotification: function(message) {
                    alert(message);
                },
                provideTactileFeedback: function() {
                    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏
                },
                processGameResult: function(gameType, bet, result, win, data) {
                    app.log('CoinFlip', `–ò–≥—Ä–∞: ${gameType}, –°—Ç–∞–≤–∫–∞: ${bet}, –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}, –í—ã–∏–≥—Ä—ã—à: ${win}`, false);
                    return Promise.resolve({success: true});
                }
            };
            
            return true;
        };
        
        /**
         * –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã
         */
        const flipCoin = async function() {
            app.log('CoinFlip', '–ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if (!state.initialized) {
                app.log('CoinFlip', '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é', true);
                await init();
                
                // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞, –≤—ã—Ö–æ–¥–∏–º
                if (!state.initialized) {
                    app.log('CoinFlip', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', true);
                    return;
                }
            }
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ casinoApp
                if (!ensureCasinoApp()) {
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ —É–∂–µ –±—Ä–æ—Å–æ–∫
                if (state.isFlipping) {
                    app.log('CoinFlip', '–ú–æ–Ω–µ—Ç–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—Ä–æ—Å–∫–∞');
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Å—Ç–æ—Ä–æ–Ω–∞
                if (!state.chosenSide) {
                    window.casinoApp.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫—É');
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
                if (!elements.coinBet) {
                    app.log('CoinFlip', '–≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    return;
                }
                
                state.betAmount = parseInt(elements.coinBet.value);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
                if (isNaN(state.betAmount) || state.betAmount <= 0) {
                    window.casinoApp.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏');
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if (window.GreenLightApp && window.GreenLightApp.user && 
                    state.betAmount > window.GreenLightApp.user.balance) {
                    window.casinoApp.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏');
                    return;
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—Ä–æ—Å–∫–∞
                state.isFlipping = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                if (elements.flipBtn) {
                    elements.flipBtn.disabled = true;
                    elements.flipBtn.textContent = '–ü–û–î–ë–†–ê–°–´–í–ê–ï–ú...';
                }
                
                if (elements.headsBtn) {
                    elements.headsBtn.disabled = true;
                }
                
                if (elements.tailsBtn) {
                    elements.tailsBtn.disabled = true;
                }
                
                if (elements.coinResult) {
                    elements.coinResult.className = 'result-display';
                    elements.coinResult.textContent = '';
                }
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.casinoApp.provideTactileFeedback) {
                    window.casinoApp.provideTactileFeedback('medium');
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
                await window.casinoApp.processGameResult(
                    'coinflip',
                    state.betAmount,
                    'bet',
                    0,
                    { chosenSide: state.chosenSide }
                );
                
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –±—Ä–æ—Å–∫–∞
                playSound('flip');
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç—ã
                const result = await flipCoinWithAnimation();
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à/–ø—Ä–æ–∏–≥—Ä—ã—à
                const isWin = result === state.chosenSide;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ (2x)
                const winAmount = isWin ? state.betAmount * 2 : 0;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                displayResult(isWin, winAmount, result);
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if (isWin) {
                    if (window.casinoApp.provideTactileFeedback) {
                        window.casinoApp.provideTactileFeedback('success');
                    }
                    playSound('win');
                } else {
                    if (window.casinoApp.provideTactileFeedback) {
                        window.casinoApp.provideTactileFeedback('warning');
                    }
                    playSound('lose');
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
                await window.casinoApp.processGameResult(
                    'coinflip',
                    0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
                    isWin ? 'win' : 'lose',
                    winAmount,
                    {
                        chosenSide: state.chosenSide,
                        result: result,
                        betAmount: state.betAmount
                    }
                );
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                setTimeout(() => {
                    state.isFlipping = false;
                    
                    if (elements.flipBtn) {
                        elements.flipBtn.disabled = false;
                        elements.flipBtn.textContent = '–ü–û–î–ë–†–û–°–ò–¢–¨ –ú–û–ù–ï–¢–£';
                    }
                    
                    if (elements.headsBtn) {
                        elements.headsBtn.disabled = false;
                    }
                    
                    if (elements.tailsBtn) {
                        elements.tailsBtn.disabled = false;
                    }
                }, 2500);
                
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç—ã: ${error.message}`, true);
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                state.isFlipping = false;
                
                if (elements.flipBtn) {
                    elements.flipBtn.disabled = false;
                    elements.flipBtn.textContent = '–ü–û–î–ë–†–û–°–ò–¢–¨ –ú–û–ù–ï–¢–£';
                }
                
                if (elements.headsBtn) {
                    elements.headsBtn.disabled = false;
                }
                
                if (elements.tailsBtn) {
                    elements.tailsBtn.disabled = false;
                }
            }
        };
        
        /**
         * –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç—ã
         */
        const flipCoinWithAnimation = function() {
            return new Promise((resolve) => {
                try {
                    const coin = elements.coinElement;
                    if (!coin) {
                        app.log('CoinFlip', '–≠–ª–µ–º–µ–Ω—Ç –º–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏', true);
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                        setTimeout(() => {
                            resolve(Math.random() < 0.5 ? 'heads' : 'tails');
                        }, 1000);
                        return;
                    }
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    const result = Math.random() < 0.5 ? 'heads' : 'tails';
                    
                    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
                    coin.className = 'coin-element';
                    
                    // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
                    void coin.offsetWidth;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                    coin.classList.add('flipping');
                    
                    // –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    setTimeout(() => {
                        coin.className = 'coin-element';
                        coin.classList.add(result);
                        resolve(result);
                    }, 2000);
                    
                } catch (error) {
                    app.log('CoinFlip', `–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –±—Ä–æ—Å–∫–∞: ${error.message}`, true);
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                    resolve(Math.random() < 0.5 ? 'heads' : 'tails');
                }
            });
        };
        
        /**
         * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
         */
        const displayResult = function(isWin, amount, result) {
            try {
                if (!elements.coinResult) {
                    app.log('CoinFlip', '–≠–ª–µ–º–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                    return;
                }
                
                const resultElement = elements.coinResult;
                const resultLabel = result === 'heads' ? '–û–†–Å–õ' : '–†–ï–®–ö–ê';
                
                if (isWin) {
                    resultElement.className = 'result-display win';
                    resultElement.innerHTML = `
                        <div class="win-icon">üéâ</div>
                        <div class="win-title">–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${amount} ‚≠ê!</div>
                        <div class="win-description">–í—ã–ø–∞–ª–æ: ${resultLabel}</div>
                    `;
                } else {
                    resultElement.className = 'result-display lose';
                    resultElement.innerHTML = `
                        <div class="lose-icon">üò¢</div>
                        <div class="lose-title">–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</div>
                        <div class="lose-description">–í—ã–ø–∞–ª–æ: ${resultLabel}</div>
                    `;
                }
                
            } catch (error) {
                app.log('CoinFlip', `–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${error.message}`, true);
            }
        };
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        return {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            init: init,
            flipCoin: flipCoin,
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            getStatus: function() {
                return {
                    initialized: state.initialized,
                    initializationStarted: state.initializationStarted,
                    isFlipping: state.isFlipping,
                    elementsFound: {
                        flipBtn: !!elements.flipBtn,
                        coinBet: !!elements.coinBet,
                        coinElement: !!elements.coinElement,
                        coinResult: !!elements.coinResult
                    },
                    soundEnabled: state.soundEnabled,
                    chosenSide: state.chosenSide
                };
            },
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
            addStyles: function() {
                if (document.getElementById('coinflip-styles')) return;
                
                const styleElement = document.createElement('style');
                styleElement.id = 'coinflip-styles';
                styleElement.textContent = `
                    .coinflip-container {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        max-width: 500px;
                        margin: 0 auto;
                        padding: 20px;
                    }
                    
                    .multiplier-container {
                        display: flex;
                        align-items: center;
                        gap: 10px;
                        margin-bottom: 20px;
                        font-size: 1.2rem;
                        background: rgba(0, 0, 0, 0.2);
                        padding: 10px 20px;
                        border-radius: 10px;
                        border: 1px solid rgba(242, 201, 76, 0.3);
                        color: var(--gold);
                    }
                    
                    .multiplier-value {
                        font-weight: bold;
                        color: var(--gold);
                        text-shadow: 0 0 5px rgba(242, 201, 76, 0.5);
                    }
                    
                    .coin-container {
                        width: 100%;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        padding: 40px 0;
                        position: relative;
                        perspective: 1000px;
                    }
                    
                    .coin-element {
                        width: 150px;
                        height: 150px;
                        position: relative;
                        transform-style: preserve-3d;
                        transition: transform 0.1s;
                    }
                    
                    .coin-element.flipping {
                        animation: flip-coin 2s linear;
                    }
                    
                    .coin-element.heads {
                        transform: rotateY(0deg);
                    }
                    
                    .coin-element.tails {
                        transform: rotateY(180deg);
                    }
                    
                    .coin-side {
                        position: absolute;
                        width: 100%;
                        height: 100%;
                        border-radius: 50%;
                        backface-visibility: hidden;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        font-size: 36px;
                        cursor: pointer;
                        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
                    }
                    
                    .coin-side.heads {
                        background: radial-gradient(#FFD700, #B8860B);
                        z-index: 100;
                    }
                    
                    .coin-side.heads::before {
                        content: "O";
                    }
                    
                    .coin-side.tails {
                        background: radial-gradient(#C0C0C0, #808080);
                        transform: rotateY(180deg);
                    }
                    
                    .coin-side.tails::before {
                        content: "P";
                    }
                    
                    .bet-section {
                        width: 100%;
                        margin-bottom: 20px;
                    }
                    
                    .bet-controls {
                        display: flex;
                        justify-content: center;
                        gap: 20px;
                    }
                    
                    .bet-input-container {
                        display: flex;
                        flex-direction: column;
                        gap: 5px;
                    }
                    
                    .bet-input-container label {
                        font-size: 0.9rem;
                        color: var(--light-gray);
                    }
                    
                    .bet-input-wrapper {
                        display: flex;
                        align-items: center;
                        gap: 10px;
                    }
                    
                    .bet-decrease-btn, .bet-increase-btn {
                        width: 30px;
                        height: 30px;
                        border-radius: 50%;
                        border: none;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        cursor: pointer;
                        background: var(--medium-gray);
                        color: var(--white);
                        font-size: 18px;
                        font-weight: bold;
                        transition: all 0.2s;
                    }
                    
                    .bet-decrease-btn:hover, .bet-increase-btn:hover {
                        background: var(--primary-green);
                    }
                    
                    .bet-input {
                        width: 80px;
                        padding: 5px 10px;
                        border-radius: 5px;
                        border: 1px solid rgba(242, 201, 76, 0.3);
                        background: rgba(0, 0, 0, 0.2);
                        color: var(--white);
                        text-align: center;
                        font-size: 16px;
                    }
                    
                    .coin-choice {
                        width: 100%;
                        margin-bottom: 20px;
                    }
                    
                    .choice-label {
                        text-align: center;
                        margin-bottom: 10px;
                        color: var(--light-gray);
                        font-size: 0.9rem;
                    }
                    
                    .choice-buttons {
                        display: flex;
                        justify-content: center;
                        gap: 20px;
                    }
                    
                    .choice-btn {
                        flex: 1;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        gap: 10px;
                        padding: 15px;
                        border-radius: 10px;
                        border: 1px solid rgba(255, 255, 255, 0.1);
                        background: rgba(30, 30, 30, 0.5);
                        cursor: pointer;
                        transition: all 0.2s;
                        max-width: 120px;
                    }
                    
                    .choice-btn:hover {
                        border-color: var(--primary-green);
                        background: rgba(30, 30, 30, 0.8);
                        transform: translateY(-3px);
                    }
                    
                    .choice-btn.selected {
                        border-color: var(--primary-green);
                        background: rgba(29, 185, 84, 0.2);
                        box-shadow: 0 0 10px rgba(29, 185, 84, 0.3);
                    }
                    
                    .choice-icon {
                        font-size: 24px;
                    }
                    
                    .choice-text {
                        font-size: 14px;
                        font-weight: bold;
                        color: var(--white);
                    }
                    
                    .control-buttons {
                        width: 100%;
                        display: flex;
                        flex-direction: column;
                        gap: 15px;
                    }
                    
                    .secondary-controls {
                        display: flex;
                        justify-content: flex-end;
                    }
                    
                    .control-btn {
                        width: 40px;
                        height: 40px;
                        border-radius: 50%;
                        border: none;
                        background: rgba(30, 30, 30, 0.5);
                        color: var(--white);
                        font-size: 20px;
                        cursor: pointer;
                        transition: all 0.2s;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                    }
                    
                    .control-btn:hover {
                        background: rgba(30, 30, 30, 0.8);
                        transform: scale(1.1);
                    }
                    
                    .result-display {
                        min-height: 100px;
                        margin: 20px 0;
                        padding: 15px;
                        border-radius: 10px;
                        text-align: center;
                        width: 100%;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                        opacity: 0;
                        transform: translateY(20px);
                        transition: all 0.3s ease;
                    }
                    
                    .result-display.win {
                        background: rgba(76, 217, 100, 0.1);
                        border: 1px solid var(--win-color);
                        color: var(--win-color);
                        opacity: 1;
                        transform: translateY(0);
                    }
                    
                    .result-display.lose {
                        background: rgba(255, 69, 58, 0.1);
                        border: 1px solid var(--lose-color);
                        color: var(--lose-color);
                        opacity: 1;
                        transform: translateY(0);
                    }
                    
                    .win-icon, .lose-icon {
                        font-size: 36px;
                        margin-bottom: 10px;
                    }
                    
                    .win-title, .lose-title {
                        font-size: 18px;
                        font-weight: bold;
                        margin-bottom: 10px;
                    }
                    
                    .win-description, .lose-description {
                        font-size: 14px;
                        opacity: 0.8;
                    }
                    
                    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
                    @keyframes flip-coin {
                        0% { transform: rotateY(0) rotateX(0); }
                        100% { transform: rotateY(1800deg) rotateX(1800deg); }
                    }
                    
                    /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω */
                    @media (max-width: 600px) {
                        .coin-element {
                            width: 120px;
                            height: 120px;
                        }
                        
                        .coin-container {
                            padding: 20px 0;
                        }
                        
                        .choice-btn {
                            padding: 10px;
                        }
                        
                        .choice-icon {
                            font-size: 20px;
                        }
                        
                        .choice-text {
                            font-size: 12px;
                        }
                    }
                `;
                document.head.appendChild(styleElement);
            }
        };
    })();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    try {
        // 1. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        coinFlipGame.addStyles();
        
        // 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if (window.registerGame) {
            window.registerGame('coinFlipGame', coinFlipGame);
            app.log('CoinFlip', '–ò–≥—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É registerGame');
        }
        
        // 3. –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        window.coinFlipGame = coinFlipGame;
        app.log('CoinFlip', '–ò–≥—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω');
        
        // 4. –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
        app.log('CoinFlip', '–ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        
        // 5. –ê–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                if (!coinFlipGame.getStatus().initialized && !coinFlipGame.getStatus().initializationStarted) {
                    app.log('CoinFlip', '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                    coinFlipGame.init();
                }
            }, 500);
        });
        
        // 6. –ï—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            setTimeout(() => {
                if (!coinFlipGame.getStatus().initialized && !coinFlipGame.getStatus().initializationStarted) {
                    app.log('CoinFlip', '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω)');
                    coinFlipGame.init();
                }
            }, 500);
        }
        
    } catch (error) {
        app.log('CoinFlip', `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã: ${error.message}`, true);
    }
})();