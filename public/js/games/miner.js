// public/js/games/miner.js

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ Miner —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
const minerGame = (() => {
  // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
  const newGameBtn = document.getElementById('new-game-btn');
  const cashoutBtn = document.getElementById('cashout-btn');
  const minerBet = document.getElementById('miner-bet');
  const minesCount = document.getElementById('mines-count');
  const minerGrid = document.getElementById('miner-grid');
  const potentialWin = document.getElementById('potential-win');
  const minerResult = document.getElementById('miner-result');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  let isPlaying = false;
  let gameData = {
    grid: [],
    mines: [],
    revealedCells: [],
    totalCells: 25,  // 5x5 —Å–µ—Ç–∫–∞
    minesCount: 3,
    currentMultiplier: 1,
    betAmount: 0,
    baseMultiplier: 1.2 // –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∏–Ω
  };
  
  // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  let clickSound, revealSound, explodeSound, cashoutSound;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  function init() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã Miner');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    newGameBtn.addEventListener('click', startNewGame);
    cashoutBtn.addEventListener('click', cashout);
    minesCount.addEventListener('change', updateMineCount);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–≤—É–∫–∏
    setupSounds();
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
    createGrid();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    updatePotentialWin();
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–æ–≤
  function setupSounds() {
    try {
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      if (AudioContext) {
        const audioCtx = new AudioContext();
        
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        clickSound = { play: () => console.log('–ó–≤—É–∫ –∫–ª–∏–∫–∞') };
        revealSound = { play: () => console.log('–ó–≤—É–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–∫–∏') };
        explodeSound = { play: () => console.log('–ó–≤—É–∫ –≤–∑—Ä—ã–≤–∞') };
        cashoutSound = { play: () => console.log('–ó–≤—É–∫ –≤—ã–∏–≥—Ä—ã—à–∞') };
      }
    } catch (e) {
      console.log('–ê—É–¥–∏–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', e);
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ç–∫–∏
  function createGrid() {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ç–∫—É
    minerGrid.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 5x5
    for (let i = 0; i < 5; i++) {
      for (let j = 0; j < 5; j++) {
        const cell = document.createElement('div');
        cell.className = 'grid-cell';
        cell.dataset.row = i;
        cell.dataset.col = j;
        cell.dataset.index = i * 5 + j;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (isPlaying) {
          cell.addEventListener('click', () => revealCell(i * 5 + j));
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
          cell.classList.add('active-cell');
        }
        
        minerGrid.appendChild(cell);
      }
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
  function updateMineCount() {
    gameData.minesCount = parseInt(minesCount.value);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
    // –ß–µ–º –±–æ–ª—å—à–µ –º–∏–Ω, —Ç–µ–º –≤—ã—à–µ –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    switch (gameData.minesCount) {
      case 3: 
        gameData.baseMultiplier = 1.2;
        break;
      case 5:
        gameData.baseMultiplier = 1.5;
        break;
      case 7:
        gameData.baseMultiplier = 2.0;
        break;
      case 10:
        gameData.baseMultiplier = 3.0;
        break;
      default:
        gameData.baseMultiplier = 1.2;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePotentialWin();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    if (window.casinoApp.provideTactileFeedback) {
      window.casinoApp.provideTactileFeedback('light');
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
  function updatePotentialWin() {
    const betAmt = parseInt(minerBet.value) || 0;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–ª–µ—Ç–∫–æ–π
    // –ò –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–∏–Ω
    const multiplier = calculateMultiplier(
      gameData.revealedCells.length,
      gameData.totalCells,
      gameData.minesCount,
      gameData.baseMultiplier
    );
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    const potential = Math.floor(betAmt * multiplier);
    potentialWin.textContent = potential;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    gameData.currentMultiplier = multiplier;
  }
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
  function calculateMultiplier(revealed, total, mines, baseMultiplier) {
    if (revealed === 0) return baseMultiplier;
    
    // –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (—á–µ–º –±–æ–ª—å—à–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏ —á–µ–º –±–æ–ª—å—à–µ –º–∏–Ω, —Ç–µ–º —Å–ª–æ–∂–Ω–µ–µ)
    const safeCells = total - mines;
    const remainingSafe = safeCells - revealed;
    
    // –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
    // –∏ —Ä–∞—Å—Ç–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–ª–µ—Ç–∫–æ–π
    let multiplier = baseMultiplier * Math.pow(safeCells / remainingSafe, 1.2);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    const maxMultiplier = 50;
    multiplier = Math.min(multiplier, maxMultiplier);
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return Math.floor(multiplier * 100) / 100;
  }
  
  // –°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  function startNewGame() {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
    const betAmount = parseInt(minerBet.value);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
    if (isNaN(betAmount) || betAmount <= 0) {
      window.casinoApp.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (betAmount > window.casinoApp.currentUser.balance) {
      window.casinoApp.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      return;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isPlaying = true;
    gameData = {
      grid: Array(gameData.totalCells).fill('empty'),
      mines: [],
      revealedCells: [],
      totalCells: 25,
      minesCount: parseInt(minesCount.value),
      currentMultiplier: gameData.baseMultiplier,
      betAmount: betAmount,
      baseMultiplier: gameData.baseMultiplier
    };
    
    // –†–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã
    placeMines();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    createGrid();
    cashoutBtn.disabled = false;
    newGameBtn.disabled = true;
    minerResult.textContent = '';
    minerResult.className = 'result';
    
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if (window.casinoApp.provideTactileFeedback) {
      window.casinoApp.provideTactileFeedback('medium');
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
    window.casinoApp.processGameResult(
      'miner',
      betAmount,
      'bet',
      0,
      { 
        minesCount: gameData.minesCount,
        baseMultiplier: gameData.baseMultiplier 
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    updatePotentialWin();
  }
  
  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω
  function placeMines() {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∏–Ω—ã
    gameData.mines = [];
    
    // –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–≤—ã–µ –º–∏–Ω—ã
    while (gameData.mines.length < gameData.minesCount) {
      const randomIndex = Math.floor(Math.random() * gameData.totalCells);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∏–Ω–∞
      if (!gameData.mines.includes(randomIndex)) {
        gameData.mines.push(randomIndex);
        gameData.grid[randomIndex] = 'mine';
      }
    }
    
    console.log('–ú–∏–Ω—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ö:', gameData.mines);
  }
  
  // –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
  async function revealCell(index) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞
    if (gameData.revealedCells.includes(index)) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    if (!isPlaying) {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —è—á–µ–π–∫–∏
    const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
    
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if (window.casinoApp.provideTactileFeedback) {
      window.casinoApp.provideTactileFeedback('light');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –º–∏–Ω–æ–π
    if (gameData.grid[index] === 'mine') {
      // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
      revealAllMines();
      
      // –í–∑—Ä—ã–≤ –º–∏–Ω—ã
      if (explodeSound) explodeSound.play();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      cell.classList.add('mine', 'exploded');
      cell.innerHTML = 'üí•';
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
      animateExplosion(cell);
      
      // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤–∑—Ä—ã–≤–µ
      if (window.casinoApp.provideTactileFeedback) {
        window.casinoApp.provideTactileFeedback('error');
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isPlaying = false;
      cashoutBtn.disabled = true;
      newGameBtn.disabled = false;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      minerResult.textContent = '–ë—É–º! –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
      minerResult.classList.add('lose');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à
      await window.casinoApp.processGameResult(
        'miner',
        0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        'lose',
        0,
        {
          revealedCells: gameData.revealedCells,
          hitMine: index,
          mines: gameData.mines,
          finalMultiplier: gameData.currentMultiplier
        }
      );
    } else {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞
      gameData.revealedCells.push(index);
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
      if (revealSound) revealSound.play();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      cell.classList.add('revealed');
      cell.innerHTML = 'üí∞';
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è
      animateReveal(cell);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
      updatePotentialWin();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã (—É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã)
      if (gameData.revealedCells.length === gameData.totalCells - gameData.minesCount) {
        // –ò–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏
        await automaticCashout();
      }
    }
  }
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
  function animateExplosion(cell) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
    cell.classList.add('explosion');
    
    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∑—Ä—ã–≤–∞
    for (let i = 0; i < 12; i++) {
      const particle = document.createElement('div');
      particle.className = 'explosion-particle';
      
      // –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      const angle = Math.random() * 360;
      const distance = 30 + Math.random() * 40;
      
      // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      const delay = Math.random() * 0.2;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
      particle.style.transform = `rotate(${angle}deg) translateX(${distance}px)`;
      particle.style.animationDelay = `${delay}s`;
      
      cell.appendChild(particle);
    }
    
    // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      const particles = cell.querySelectorAll('.explosion-particle');
      particles.forEach(p => p.remove());
    }, 1500);
  }
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏
  function animateReveal(cell) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
    cell.classList.add('reveal-animation');
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      cell.classList.remove('reveal-animation');
    }, 500);
  }
  
  // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–∏–Ω
  function revealAllMines() {
    gameData.mines.forEach(index => {
      const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
      if (cell && !cell.classList.contains('exploded')) {
        cell.classList.add('mine');
        cell.innerHTML = 'üí£';
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–Ω—ã
        const delay = Math.random() * 300;
        setTimeout(() => {
          cell.classList.add('mine-reveal');
        }, delay);
      }
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—ã–∏–≥—Ä—ã—à–∞
  async function cashout() {
    if (!isPlaying || gameData.revealedCells.length === 0) {
      return;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    const winAmount = Math.floor(gameData.betAmount * gameData.currentMultiplier);
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤—ã–∏–≥—Ä—ã—à–∞
    if (cashoutSound) cashoutSound.play();
    
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if (window.casinoApp.provideTactileFeedback) {
      window.casinoApp.provideTactileFeedback('success');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    minerResult.innerHTML = `
      <div class="win-icon">üéâ</div>
      <div class="win-title">–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} Stars!</div>
      <div class="win-multiplier">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${gameData.currentMultiplier.toFixed(2)}</div>
    `;
    minerResult.classList.add('win');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isPlaying = false;
    cashoutBtn.disabled = true;
    newGameBtn.disabled = false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
    revealAllMines();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
    animateWin();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    await window.casinoApp.processGameResult(
      'miner',
      0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
      'win',
      winAmount,
      {
        revealedCells: gameData.revealedCells,
        multiplier: gameData.currentMultiplier,
        mines: gameData.mines
      }
    );
  }
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
  function animateWin() {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º —è—á–µ–π–∫–∞–º
    gameData.revealedCells.forEach((index, i) => {
      const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
      if (cell) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
        setTimeout(() => {
          cell.classList.add('win-animation');
        }, i * 50);
      }
    });
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫
  async function automaticCashout() {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    const winAmount = gameData.betAmount * gameData.currentMultiplier;
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –±–æ–ª—å—à–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    if (cashoutSound) {
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –¥–≤–∞–∂–¥—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
      cashoutSound.play();
      setTimeout(() => cashoutSound.play(), 300);
    }
    
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
    if (window.casinoApp.provideTactileFeedback) {
      window.casinoApp.provideTactileFeedback('success');
      setTimeout(() => window.casinoApp.provideTactileFeedback('success'), 300);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    minerResult.innerHTML = `
      <div class="win-icon">üèÜ</div>
      <div class="win-title">–ò–¥–µ–∞–ª—å–Ω–æ! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏!</div>
      <div class="win-amount">–í—ã–∏–≥—Ä—ã—à: ${winAmount} ‚≠ê</div>
      <div class="win-multiplier">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${gameData.currentMultiplier.toFixed(2)}</div>
    `;
    minerResult.classList.add('win', 'big-win');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isPlaying = false;
    cashoutBtn.disabled = true;
    newGameBtn.disabled = false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    revealAllMines();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—Ä—É–ø–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    animateBigWin();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    await window.casinoApp.processGameResult(
      'miner',
      0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
      'win',
      winAmount,
      {
        revealedCells: gameData.revealedCells,
        multiplier: gameData.currentMultiplier,
        mines: gameData.mines,
        perfectGame: true
      }
    );
  }
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
  function animateBigWin() {
    // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫
    const container = document.querySelector('.miner-container');
    if (container) {
      // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞
      for (let i = 0; i < 20; i++) {
        setTimeout(() => {
          const firework = document.createElement('div');
          firework.className = 'firework';
          
          // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
          firework.style.left = `${Math.random() * 100}%`;
          firework.style.top = `${Math.random() * 100}%`;
          
          // –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
          const hue = Math.floor(Math.random() * 360);
          firework.style.backgroundColor = `hsl(${hue}, 100%, 50%)`;
          
          container.appendChild(firework);
          
          // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
          setTimeout(() => {
            firework.remove();
          }, 1000);
        }, i * 200);
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º —è—á–µ–π–∫–∞–º
    gameData.revealedCells.forEach((index, i) => {
      const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
      if (cell) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
        setTimeout(() => {
          cell.classList.add('big-win-animation');
        }, i * 50);
      }
    });
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  document.addEventListener('DOMContentLoaded', init);
  
  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  return {
    init,
    startNewGame,
    cashout,
    updateMineCount
  };
})();