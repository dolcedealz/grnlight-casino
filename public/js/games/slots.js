/**
 * slots.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã Slots
 * –í–µ—Ä—Å–∏—è 2.0.0
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä
 * - Timeout –∑–∞—â–∏—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
 */

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ä–µ–¥—É
(function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (!window.GreenLightApp) {
      console.error('[Slots] GreenLightApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
      window.GreenLightApp = {
          log: function(source, message, isError) {
              if (isError) console.error(`[${source}] ${message}`);
              else console.log(`[${source}] ${message}`);
          }
      };
  }
  
  const app = window.GreenLightApp;
  app.log('Slots', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏–≥—Ä—ã Slots v2.0.0');
  
  // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
  const slotsGame = (function() {
      // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
      let elements = {
          spinBtn: null,
          slotsResult: null,
          slotsBet: null,
          slotsContainer: null
      };
      
      // –ë–∞—Ä–∞–±–∞–Ω—ã (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
      let reels = [];
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      let state = {
          isSpinning: false,
          initialized: false,
          initializationStarted: false
      };
      
      // –ò–≥—Ä–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const symbols = ['üçí', 'üçã', 'üçá', 'üçä', 'üçâ', 'üíé', '7Ô∏è‚É£', 'ü§ë'];
      
      // –ú–∞—Ç—Ä–∏—Ü–∞ 3x3
      const rowCount = 3;
      const colCount = 3;
      let slotMatrix = [];
      
      // –ó–Ω–∞—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ (–º–Ω–æ–∂–∏—Ç–µ–ª–∏)
      const symbolValues = {
          'üçí': 2,
          'üçã': 2,
          'üçá': 3,
          'üçä': 3,
          'üçâ': 4,
          'üíé': 5,
          '7Ô∏è‚É£': 10,
          'ü§ë': 15
      };
      
      // –û–ø–∏—Å–∞–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
      const winDescriptions = {
          horizontalLine: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è! x{multiplier} –≤—ã–∏–≥—Ä—ã—à!',
          verticalLine: '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è! x{multiplier} –≤—ã–∏–≥—Ä—ã—à!',
          diagonal: '–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è! x{multiplier} –≤—ã–∏–≥—Ä—ã—à!',
          fullMatch: '–î–∂–µ–∫–ø–æ—Ç! –í—Å–µ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç! x{multiplier} –≤—ã–∏–≥—Ä—ã—à!'
      };
      
      /**
       * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
       * –° –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
       */
      const init = async function() {
          // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          if (state.initialized || state.initializationStarted) {
              app.log('Slots', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
              return true;
          }
          
          state.initializationStarted = true;
          app.log('Slots', '–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã');
          
          try {
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
              const initPromise = new Promise(async (resolve) => {
                  try {
                      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è)
                      await findDOMElements();
                      
                      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–æ—Ç–æ–≤
                      createSlotsContainer();
                      
                      // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
                      populateSlots();
                      
                      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                      setupEventListeners();
                      
                      // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                      if (elements.slotsResult) {
                          elements.slotsResult.style.display = 'none';
                      }
                      
                      state.initialized = true;
                      app.log('Slots', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                      resolve(true);
                  } catch (innerError) {
                      app.log('Slots', `–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${innerError.message}`, true);
                      resolve(false);
                  }
              });
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç (3 —Å–µ–∫—É–Ω–¥—ã)
              const timeoutPromise = new Promise((resolve) => {
                  setTimeout(() => {
                      app.log('Slots', '–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', true);
                      resolve(false);
                  }, 3000);
              });
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
              const result = await Promise.race([initPromise, timeoutPromise]);
              
              return result;
              
          } catch (error) {
              app.log('Slots', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, true);
              return false;
          }
      };
      
      /**
       * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç null
       */
      const findDOMElements = async function() {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
          return new Promise((resolve, reject) => {
              try {
                  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
                  setTimeout(() => {
                      elements.spinBtn = document.getElementById('spin-btn');
                      elements.slotsResult = document.getElementById('slots-result');
                      elements.slotsBet = document.getElementById('slots-bet');
                      elements.slotsContainer = document.querySelector('.slot-reels');
                      
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                      if (!elements.spinBtn) {
                          app.log('Slots', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —ç–ª–µ–º–µ–Ω—Ç spin-btn –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                      }
                      
                      if (!elements.slotsContainer) {
                          app.log('Slots', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                          
                          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
                          const container = document.querySelector('.slots-container');
                          if (container) {
                              elements.slotsContainer = document.createElement('div');
                              elements.slotsContainer.className = 'slot-reels';
                              container.prepend(elements.slotsContainer);
                              app.log('Slots', '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–æ—Ç–æ–≤');
                          }
                      }
                      
                      resolve();
                  }, 100);
              } catch (error) {
                  app.log('Slots', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${error.message}`, true);
                  reject(error);
              }
          });
      };
      
      /**
       * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
       */
      const setupEventListeners = function() {
          if (!elements.spinBtn) {
              app.log('Slots', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
              return;
          }
          
          try {
              // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
              const newSpinBtn = elements.spinBtn.cloneNode(true);
              if (elements.spinBtn.parentNode) {
                  elements.spinBtn.parentNode.replaceChild(newSpinBtn, elements.spinBtn);
              }
              elements.spinBtn = newSpinBtn;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ä–∞—â–µ–Ω–∏—è
              elements.spinBtn.addEventListener('click', spin);
              app.log('Slots', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
              
          } catch (error) {
              app.log('Slots', `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${error.message}`, true);
          }
      };
      
      /**
       * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–ª–æ—Ç–æ–≤ 3x3
       */
      const createSlotsContainer = function() {
          // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –±–∞—Ä–∞–±–∞–Ω–æ–≤
          reels = [];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          if (!elements.slotsContainer) {
              app.log('Slots', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
              return;
          }
          
          try {
              // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
              elements.slotsContainer.innerHTML = '';
              
              // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 3x3
              for (let row = 0; row < rowCount; row++) {
                  const rowElement = document.createElement('div');
                  rowElement.className = 'slot-row';
                  
                  for (let col = 0; col < colCount; col++) {
                      const reel = document.createElement('div');
                      reel.className = 'reel';
                      reel.dataset.row = row;
                      reel.dataset.col = col;
                      
                      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ (–ª–µ–Ω—Ç–∞)
                      const reelStrip = document.createElement('div');
                      reelStrip.className = 'reel-strip';
                      reel.appendChild(reelStrip);
                      
                      rowElement.appendChild(reel);
                      reels.push(reelStrip);
                  }
                  
                  elements.slotsContainer.appendChild(rowElement);
              }
              
              app.log('Slots', `–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç–∫–∞ ${rowCount}x${colCount}, –±–∞—Ä–∞–±–∞–Ω–æ–≤: ${reels.length}`);
              
          } catch (error) {
              app.log('Slots', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏: ${error.message}`, true);
          }
      };
      
      /**
       * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
       */
      const populateSlots = function() {
          try {
              reels.forEach(reel => {
                  // –û—á–∏—â–∞–µ–º –ª–µ–Ω—Ç—É
                  reel.innerHTML = '';
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª
                  const symbolElement = document.createElement('div');
                  symbolElement.className = 'symbol';
                  symbolElement.textContent = getRandomSymbol();
                  
                  reel.appendChild(symbolElement);
              });
          } catch (error) {
              app.log('Slots', `–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤: ${error.message}`, true);
          }
      };
      
      /**
       * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
       */
      const getRandomSymbol = function() {
          const randomIndex = Math.floor(Math.random() * symbols.length);
          return symbols[randomIndex];
      };
      
      /**
       * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å –ª—É—á—à–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
       */
      const getWeightedRandomSymbol = function() {
          // –í–µ—Å–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è)
          const weights = {
              'üçí': 25, // 25% —à–∞–Ω—Å
              'üçã': 20, // 20% —à–∞–Ω—Å
              'üçá': 15, // 15% —à–∞–Ω—Å
              'üçä': 15, // 15% —à–∞–Ω—Å
              'üçâ': 10, // 10% —à–∞–Ω—Å
              'üíé': 8,  // 8% —à–∞–Ω—Å
              '7Ô∏è‚É£': 5,  // 5% —à–∞–Ω—Å
              'ü§ë': 2   // 2% —à–∞–Ω—Å
          };
          
          // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –≤–µ—Å
          const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ totalWeight
          let random = Math.random() * totalWeight;
          
          // –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª—É—á–∞–π–Ω–æ–º—É —á–∏—Å–ª—É
          for (const symbol in weights) {
              random -= weights[symbol];
              if (random <= 0) {
                  return symbol;
              }
          }
          
          // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
          return symbols[0];
      };
      
      /**
       * –ó–∞–ø—É—Å–∫ –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
       */
      const spin = async function() {
          app.log('Slots', '–ó–∞–ø—É—Å–∫ –≤—Ä–∞—â–µ–Ω–∏—è');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          if (!state.initialized) {
              app.log('Slots', '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é', true);
              await init();
              
              // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—ã—Ö–æ–¥–∏–º
              if (!state.initialized) {
                  app.log('Slots', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', true);
                  return;
              }
          }
          
          try {
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è casinoApp
              if (!window.casinoApp) {
                  app.log('Slots', 'casinoApp –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                  alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
                  return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ä–∞—â–∞—é—Ç—Å—è –ª–∏ —É–∂–µ –±–∞—Ä–∞–±–∞–Ω—ã
              if (state.isSpinning) {
                  app.log('Slots', '–ë–∞—Ä–∞–±–∞–Ω—ã —É–∂–µ –≤—Ä–∞—â–∞—é—Ç—Å—è');
                  return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
              if (!elements.slotsBet) {
                  app.log('Slots', '–≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                  return;
              }
              
              // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
              const betAmount = parseInt(elements.slotsBet.value);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
              if (isNaN(betAmount) || betAmount <= 0) {
                  window.casinoApp.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É');
                  return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
              if (betAmount > window.GreenLightApp.user.balance) {
                  window.casinoApp.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏');
                  return;
              }
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
              state.isSpinning = true;
              if (elements.spinBtn) {
                  elements.spinBtn.disabled = true;
                  elements.spinBtn.textContent = '–í–†–ê–©–ï–ù–ò–ï...';
              }
              
              // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
              if (window.casinoApp.provideTactileFeedback) {
                  window.casinoApp.provideTactileFeedback('medium');
              }
              
              // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              if (elements.slotsResult) {
                  elements.slotsResult.style.opacity = '0';
                  elements.slotsResult.style.transform = 'translateY(20px)';
                  setTimeout(() => {
                      elements.slotsResult.textContent = '';
                      elements.slotsResult.className = 'result';
                      elements.slotsResult.style.display = 'none';
                  }, 300);
              }
              
              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã 3x3
              slotMatrix = [];
              for (let row = 0; row < rowCount; row++) {
                  slotMatrix[row] = [];
                  for (let col = 0; col < colCount; col++) {
                      slotMatrix[row][col] = getWeightedRandomSymbol();
                  }
              }
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ UI –æ–±–Ω–æ–≤–∏–ª—Å—è
              setTimeout(async () => {
                  try {
                      // –ê–Ω–∏–º–∏—Ä—É–µ–º –±–∞—Ä–∞–±–∞–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                      const spinPromises = [];
                      
                      for (let i = 0; i < reels.length; i++) {
                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞—Ä–∞–±–∞–Ω–∞
                          if (!reels[i]) {
                              app.log('Slots', `–ë–∞—Ä–∞–±–∞–Ω ${i} –Ω–µ –Ω–∞–π–¥–µ–Ω`, true);
                              continue;
                          }
                          
                          const row = Math.floor(i / colCount);
                          const col = i % colCount;
                          
                          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                          const animPromise = animateReelWithTimeout(
                              reels[i], 
                              slotMatrix[row][col], 
                              col * 400 + row * 100 // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
                          );
                          
                          spinPromises.push(animPromise);
                      }
                      
                      // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Å–µ—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤
                      await Promise.all(spinPromises);
                      
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                      const result = checkWin(slotMatrix);
                      
                      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
                      const winAmount = result.win ? Math.floor(betAmount * result.multiplier) : 0;
                      
                      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                      displayResult(result.win, winAmount, result.description);
                      
                      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                      if (result.win) {
                          if (window.casinoApp.provideTactileFeedback) {
                              window.casinoApp.provideTactileFeedback('success');
                          }
                      } else {
                          if (window.casinoApp.provideTactileFeedback) {
                              window.casinoApp.provideTactileFeedback('warning');
                          }
                      }
                      
                      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                      const gameData = {
                          matrix: slotMatrix,
                          winLines: result.winLines,
                          multiplier: result.multiplier,
                          description: result.description
                      };
                      
                      await window.casinoApp.processGameResult(
                          'slots',
                          betAmount,
                          result.win ? 'win' : 'lose',
                          winAmount,
                          gameData
                      );
                      
                  } catch (error) {
                      app.log('Slots', `–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã: ${error.message}`, true);
                      window.casinoApp.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                  } finally {
                      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                      state.isSpinning = false;
                      if (elements.spinBtn) {
                          elements.spinBtn.disabled = false;
                          elements.spinBtn.textContent = '–ö–†–£–¢–ò–¢–¨';
                      }
                  }
              }, 100);
              
          } catch (error) {
              app.log('Slots', `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è: ${error.message}`, true);
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
              state.isSpinning = false;
              if (elements.spinBtn) {
                  elements.spinBtn.disabled = false;
                  elements.spinBtn.textContent = '–ö–†–£–¢–ò–¢–¨';
              }
          }
      };
      
      /**
       * –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
       */
      const animateReelWithTimeout = function(reel, finalSymbol, delay) {
          return new Promise((resolve) => {
              // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
              const timeout = setTimeout(() => {
                  app.log('Slots', '–¢–∞–π–º–∞—É—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Ä–∞–±–∞–Ω–∞', true);
                  
                  // –í —Å–ª—É—á–∞–µ —Ç–∞–π–º–∞—É—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —Å–∏–º–≤–æ–ª –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
                  try {
                      reel.innerHTML = '';
                      const finalSymbolElement = document.createElement('div');
                      finalSymbolElement.className = 'symbol final';
                      finalSymbolElement.textContent = finalSymbol;
                      reel.appendChild(finalSymbolElement);
                  } catch (e) {
                      app.log('Slots', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–∞: ${e.message}`, true);
                  }
                  
                  resolve();
              }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
              
              try {
                  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
                  reel.innerHTML = '';
                  
                  // –°–æ–∑–¥–∞–µ–º –ª–µ–Ω—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                  const symbolCount = 20 + Math.floor(Math.random() * 10);
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –∫–æ–Ω–µ—Ü
                  const symbols = [];
                  for (let i = 0; i < symbolCount; i++) {
                      symbols.push(getRandomSymbol());
                  }
                  symbols.push(finalSymbol);
                  
                  // –°–æ–∑–¥–∞–µ–º –ª–µ–Ω—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                  for (let i = 0; i < symbols.length; i++) {
                      const symbolElement = document.createElement('div');
                      symbolElement.className = 'symbol';
                      symbolElement.textContent = symbols[i];
                      reel.appendChild(symbolElement);
                  }
                  
                  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                  setTimeout(() => {
                      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                      reel.style.transition = 'transform 3s cubic-bezier(.17,.67,.83,1.3)';
                      
                      // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞)
                      const symbolHeight = 60; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å–∏–º–≤–æ–ª–∞
                      const scrollDistance = -(symbols.length - 1) * symbolHeight;
                      
                      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                      reel.style.transform = `translateY(${scrollDistance}px)`;
                      
                      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                      setTimeout(() => {
                          clearTimeout(timeout); // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
                          
                          // –û—á–∏—â–∞–µ–º –ª–µ–Ω—Ç—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
                          reel.style.transition = 'none';
                          reel.style.transform = 'translateY(0)';
                          reel.innerHTML = '';
                          
                          const finalSymbolElement = document.createElement('div');
                          finalSymbolElement.className = 'symbol final';
                          finalSymbolElement.textContent = finalSymbol;
                          reel.appendChild(finalSymbolElement);
                          
                          // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                          finalSymbolElement.classList.add('glow');
                          
                          resolve(finalSymbol);
                      }, 3000);
                  }, delay);
                  
              } catch (error) {
                  app.log('Slots', `–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Ä–∞–±–∞–Ω–∞: ${error.message}`, true);
                  clearTimeout(timeout); // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
                  resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
              }
          });
      };
      
      /**
       * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã 3x3
       */
      const checkWin = function(matrix) {
          try {
              const winLines = [];
              let highestMultiplier = 0;
              let bestWinDescription = '';
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
              for (let row = 0; row < rowCount; row++) {
                  // –ï—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ä—è–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                  if (matrix[row][0] === matrix[row][1] && matrix[row][1] === matrix[row][2]) {
                      const symbol = matrix[row][0];
                      const multiplier = symbolValues[symbol] * 1.5; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ª–∏–Ω–∏–∏
                      
                      winLines.push({
                          type: 'horizontal',
                          row: row,
                          symbol: symbol,
                          multiplier: multiplier
                      });
                      
                      if (multiplier > highestMultiplier) {
                          highestMultiplier = multiplier;
                          bestWinDescription = winDescriptions.horizontalLine.replace('{multiplier}', multiplier);
                      }
                  }
              }
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
              for (let col = 0; col < colCount; col++) {
                  // –ï—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç–æ–ª–±—Ü–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                  if (matrix[0][col] === matrix[1][col] && matrix[1][col] === matrix[2][col]) {
                      const symbol = matrix[0][col];
                      const multiplier = symbolValues[symbol] * 1.5; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ª–∏–Ω–∏–∏
                      
                      winLines.push({
                          type: 'vertical',
                          col: col,
                          symbol: symbol,
                          multiplier: multiplier
                      });
                      
                      if (multiplier > highestMultiplier) {
                          highestMultiplier = multiplier;
                          bestWinDescription = winDescriptions.verticalLine.replace('{multiplier}', multiplier);
                      }
                  }
              }
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞ –≤–Ω–∏–∑ —Å–ø—Ä–∞–≤–∞
              if (matrix[0][0] === matrix[1][1] && matrix[1][1] === matrix[2][2]) {
                  const symbol = matrix[0][0];
                  const multiplier = symbolValues[symbol] * 2; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                  
                  winLines.push({
                      type: 'diagonal',
                      direction: 'main',
                      symbol: symbol,
                      multiplier: multiplier
                  });
                  
                  if (multiplier > highestMultiplier) {
                      highestMultiplier = multiplier;
                      bestWinDescription = winDescriptions.diagonal.replace('{multiplier}', multiplier);
                  }
              }
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–Ω–∏–∑—É —Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö —Å–ø—Ä–∞–≤–∞
              if (matrix[2][0] === matrix[1][1] && matrix[1][1] === matrix[0][2]) {
                  const symbol = matrix[2][0];
                  const multiplier = symbolValues[symbol] * 2; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                  
                  winLines.push({
                      type: 'diagonal',
                      direction: 'anti',
                      symbol: symbol,
                      multiplier: multiplier
                  });
                  
                  if (multiplier > highestMultiplier) {
                      highestMultiplier = multiplier;
                      bestWinDescription = winDescriptions.diagonal.replace('{multiplier}', multiplier);
                  }
              }
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–≤—Å–µ 9 —Å–∏–º–≤–æ–ª–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
              let allSame = true;
              const firstSymbol = matrix[0][0];
              
              for (let row = 0; row < rowCount && allSame; row++) {
                  for (let col = 0; col < colCount && allSame; col++) {
                      if (matrix[row][col] !== firstSymbol) {
                          allSame = false;
                      }
                  }
              }
              
              if (allSame) {
                  const jackpotMultiplier = symbolValues[firstSymbol] * 5; // –ë–æ–ª—å—à–æ–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–∂–µ–∫–ø–æ—Ç–∞
                  
                  winLines.push({
                      type: 'jackpot',
                      symbol: firstSymbol,
                      multiplier: jackpotMultiplier
                  });
                  
                  highestMultiplier = jackpotMultiplier;
                  bestWinDescription = winDescriptions.fullMatch.replace('{multiplier}', jackpotMultiplier);
              }
              
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              return {
                  win: winLines.length > 0,
                  multiplier: highestMultiplier,
                  winLines: winLines,
                  description: bestWinDescription || '–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!'
              };
              
          } catch (error) {
              app.log('Slots', `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞: ${error.message}`, true);
              return { win: false, multiplier: 0, winLines: [], description: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞' };
          }
      };
      
      /**
       * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
       */
      const displayResult = function(isWin, amount, description) {
          try {
              if (!elements.slotsResult) {
                  app.log('Slots', '–≠–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                  return;
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
              if (isWin) {
                  elements.slotsResult.innerHTML = `
                      <div class="win-icon">üéâ</div>
                      <div class="win-title">–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${amount} ‚≠ê!</div>
                      <div class="win-description">${description}</div>
                  `;
                  elements.slotsResult.classList.add('win');
                  elements.slotsResult.classList.remove('lose');
                  
                  // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏
                  highlightWinLines();
              } else {
                  elements.slotsResult.innerHTML = `
                      <div class="lose-icon">üò¢</div>
                      <div class="lose-title">–ù–µ –ø–æ–≤–µ–∑–ª–æ</div>
                      <div class="lose-description">${description}</div>
                  `;
                  elements.slotsResult.classList.add('lose');
                  elements.slotsResult.classList.remove('win');
              }
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
              elements.slotsResult.style.display = 'block';
              setTimeout(() => {
                  elements.slotsResult.style.opacity = '1';
                  elements.slotsResult.style.transform = 'translateY(0)';
              }, 50);
              
          } catch (error) {
              app.log('Slots', `–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${error.message}`, true);
          }
      };
      
      /**
       * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π
       */
      const highlightWinLines = function() {
          try {
              const reelElements = document.querySelectorAll('.reel');
              reelElements.forEach(reel => {
                  const row = parseInt(reel.dataset.row);
                  const col = parseInt(reel.dataset.col);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –≤ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –ª–∏–Ω–∏—é
                  let isWinningSymbol = false;
                  
                  // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                  if (row < rowCount && col < colCount && 
                      slotMatrix[row][0] === slotMatrix[row][1] && 
                      slotMatrix[row][1] === slotMatrix[row][2]) {
                      isWinningSymbol = true;
                  }
                  
                  // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                  if (row < rowCount && col < colCount && 
                      slotMatrix[0][col] === slotMatrix[1][col] && 
                      slotMatrix[1][col] === slotMatrix[2][col]) {
                      isWinningSymbol = true;
                  }
                  
                  // –ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
                  if (row === col && 
                      slotMatrix[0][0] === slotMatrix[1][1] && 
                      slotMatrix[1][1] === slotMatrix[2][2]) {
                      isWinningSymbol = true;
                  }
                  
                  // –ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
                  if (row + col === 2 && 
                      slotMatrix[2][0] === slotMatrix[1][1] && 
                      slotMatrix[1][1] === slotMatrix[0][2]) {
                      isWinningSymbol = true;
                  }
                  
                  // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                  if (isWinningSymbol) {
                      const symbolElement = reel.querySelector('.symbol');
                      if (symbolElement) {
                          symbolElement.classList.add('winning');
                      }
                  }
              });
          } catch (error) {
              app.log('Slots', `–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ª–∏–Ω–∏–π: ${error.message}`, true);
          }
      };
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      return {
          // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
          init: init,
          spin: spin,
          
          // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
          createContainer: createSlotsContainer,
          
          // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          getStatus: function() {
              return {
                  initialized: state.initialized,
                  initializationStarted: state.initializationStarted,
                  isSpinning: state.isSpinning,
                  elementsFound: {
                      spinBtn: !!elements.spinBtn,
                      slotsResult: !!elements.slotsResult,
                      slotsBet: !!elements.slotsBet,
                      slotsContainer: !!elements.slotsContainer
                  },
                  reelsCount: reels.length
              };
          }
      };
  })();
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  try {
      // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
      if (window.registerGame) {
          window.registerGame('slotsGame', slotsGame);
          app.log('Slots', '–ò–≥—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É registerGame');
      }
      
      // 2. –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
      window.slotsGame = slotsGame;
      app.log('Slots', '–ò–≥—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω');
      
      // 3. –°–æ–æ–±—â–∞–µ–º –≤ –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
      app.log('Slots', '–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      
  } catch (error) {
      app.log('Slots', `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã: ${error.message}`, true);
  }
})();