const { Telegraf } = require('telegraf');
const User = require('../models/User');
const Dispute = require('../models/Dispute'); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–ø–æ—Ä–æ–≤
const Transaction = require('../models/Transaction'); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–ø–æ—Ä–æ–≤

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ—Ç–∞
module.exports = (token) => {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ Casino –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', token);
  
  // Initialize the bot with passed token
  const bot = new Telegraf(token);
  
  // Welcome message
  bot.start(async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–ø–æ—Ä–∞
      if (ctx.message && ctx.message.text.includes('dispute_')) {
        return handleDisputeStartParam(ctx);
      }
      
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
      
      const { id, first_name, last_name, username } = ctx.from;
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { id, first_name, last_name, username });
      
      // Register user if they don't exist
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      let user = await User.findOne({ telegramId: id });
      
      if (!user) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ...');
        user = new User({
          telegramId: id,
          firstName: first_name,
          lastName: last_name || '',
          username: username || ''
        });
        
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await user.save();
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      // Create welcome message with mini app button
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      console.log('WEBAPP_URL:', process.env.WEBAPP_URL);
      
      await ctx.reply(`Welcome to Greenlight Casino, ${first_name}! üé∞‚ú®\n\nTap the button below to start playing.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ Play Greenlight Casino', web_app: { url: process.env.WEBAPP_URL || 'https://grnlight-casino.onrender.com' } }]
          ]
        }
      });
      console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error);
      ctx.reply('Sorry, there was an error. Please try again later.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–æ–≤
  bot.on('inline_query', async (ctx) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å:', ctx.inlineQuery.query);
      const query = ctx.inlineQuery.query.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ telegramId: ctx.from.id });
      
      if (!user) {
        return ctx.answerInlineQuery([{
          type: 'article',
          id: 'not_registered',
          title: '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
          description: '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start',
          input_message_content: {
            message_text: `‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ @${ctx.botInfo.username} –∫–æ–º–∞–Ω–¥–æ–π /start`
          }
        }]);
      }

      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      if (!query) {
        return ctx.answerInlineQuery([{
          type: 'article',
          id: 'help',
          title: 'üé≤ –°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä',
          description: '–í–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞ –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ?)',
          input_message_content: {
            message_text: 'üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ:\n\n–°—É–º–º–∞ –í–æ–ø—Ä–æ—Å\n\n–ü—Ä–∏–º–µ—Ä: 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ –†–µ–∞–ª-–ë–∞—Ä—Å–µ–ª–æ–Ω–∞?'
          }
        }]);
      }

      // –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å: —Å—É–º–º–∞ –∏ –≤–æ–ø—Ä–æ—Å
      const match = query.match(/^(\d+)\s+(.+)$/);
      
      if (!match) {
        return ctx.answerInlineQuery([{
          type: 'article',
          id: 'invalid_format',
          title: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
          description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —Å—É–º–º–∞ –≤–æ–ø—Ä–æ—Å',
          input_message_content: {
            message_text: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—É–º–º–∞ –≤–æ–ø—Ä–æ—Å\n\n–ü—Ä–∏–º–µ—Ä: 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ?'
          }
        }]);
      }

      const [, amountStr, question] = match;
      const amount = parseInt(amountStr);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
      if (amount <= 0) {
        return ctx.answerInlineQuery([{
          type: 'article',
          id: 'invalid_amount',
          title: '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞',
          description: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0',
          input_message_content: {
            message_text: '‚ùå –°—É–º–º–∞ —Å–ø–æ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
          }
        }]);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      if (user.balance < amount) {
        return ctx.answerInlineQuery([{
          type: 'article',
          id: 'insufficient_balance',
          title: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
          description: `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê`,
          input_message_content: {
            message_text: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞.\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${amount} ‚≠ê`
          }
        }]);
      }

      // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è —Å–ø–æ—Ä–∞
      const temporaryId = `${ctx.from.id}_${Date.now()}`;
      
      // –°–æ–∫—Ä–∞—â–∞–µ–º callback_data –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é –≤ 64 –±–∞–π—Ç–∞
      const shortQuestion = question.substring(0, 20);
      const callbackData = `ia_${ctx.from.id}_${amount}_${Date.now()}`;

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await ctx.answerInlineQuery([{
        type: 'article',
        id: temporaryId,
        title: `üé≤ –°–ø–æ—Ä –Ω–∞ ${amount} ‚≠ê`,
        description: question,
        input_message_content: {
          message_text: `üé≤ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–æ—Ä–∞\n\nüí∞ –°—Ç–∞–≤–∫–∞: ${amount} ‚≠ê\n‚ùì ${question}\n\nüë§ –û—Ç: @${ctx.from.username || ctx.from.first_name}`
        },
        reply_markup: {
          inline_keyboard: [[
            {
              text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–ø–æ—Ä',
              callback_data: callbackData
            }
          ]]
        }
      }], {
        cache_time: 0
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ inline_query:', error);
      
      ctx.answerInlineQuery([{
        type: 'article',
        id: 'error',
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        input_message_content: {
          message_text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }
      }]);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ø–æ—Ä–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É
  bot.action(/ia_(\d+)_(\d+)_(\d+)/, async (ctx) => {
    try {
      const [, creatorId, amountStr, timestamp] = ctx.match;
      const amount = parseInt(amountStr);
      
      console.log('Inline accept:', { creatorId, amount, timestamp });
      console.log('Callback query:', ctx.update.callback_query);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π –∂–µ —Å–ø–æ—Ä
      if (ctx.from.id.toString() === creatorId) {
        return ctx.answerCbQuery('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Ä!');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const creator = await User.findOne({ telegramId: creatorId });
      const opponent = await User.findOne({ telegramId: ctx.from.id });

      if (!creator || !opponent) {
        return ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
      if (creator.balance < amount) {
        return ctx.answerCbQuery('‚ùå –£ —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      }

      if (opponent.balance < amount) {
        return ctx.answerCbQuery(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${amount} ‚≠ê`);
      }

      // –î–ª—è inline —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ-–¥—Ä—É–≥–æ–º—É
      let question = `–°–ø–æ—Ä –Ω–∞ ${amount} ‚≠ê`;
      
      if (ctx.update.callback_query.message && ctx.update.callback_query.message.text) {
        // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText = ctx.update.callback_query.message.text;
        const questionMatch = messageText.match(/‚ùì (.+)\n\n/);
        if (questionMatch) {
          question = questionMatch[1];
        }
      } else if (ctx.update.callback_query.inline_message_id) {
        // Inline —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤–æ–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        question = `–°–ø–æ—Ä –Ω–∞ ${amount} ‚≠ê –æ—Ç @${creator.username || creator.firstName}`;
      }

      // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (–æ—Ä–µ–ª/—Ä–µ—à–∫–∞) –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const creatorSide = Math.random() < 0.5 ? 'heads' : 'tails';
      const opponentSide = creatorSide === 'heads' ? 'tails' : 'heads';

      // –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const dispute = new Dispute({
        creator: creator._id,
        opponent: opponent._id,
        creatorTelegramId: parseInt(creatorId),
        opponentTelegramId: ctx.from.id,
        question: question,
        bet: {
          amount: amount,
          creatorChoice: null,
          opponentChoice: null
        },
        creatorSide: creatorSide,
        opponentSide: opponentSide,
        status: 'active'
      });

      await dispute.save();

      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      creator.balance -= amount;
      opponent.balance -= amount;
      
      await creator.save();
      await opponent.save();

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const creatorTransaction = new Transaction({
        userId: creator._id,
        telegramId: parseInt(creatorId),
        amount: -amount,
        type: 'bet',
        game: 'dispute'
      });
      
      const opponentTransaction = new Transaction({
        userId: opponent._id,
        telegramId: ctx.from.id,
        amount: -amount,
        type: 'bet',
        game: 'dispute'
      });
      
      await creatorTransaction.save();
      await opponentTransaction.save();

      // –î–ª—è inline —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
      if (ctx.update.callback_query.inline_message_id) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const message = `üé≤ –°–ø–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω!\n\n‚ùì ${question}\nüí∞ –°—Ç–∞–≤–∫–∞: ${amount} ‚≠ê\n\n–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ${creatorSide === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}\n\n–°–ø–æ—Ä –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å –ø–æ–º–æ—â—å—é –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã.`;
        
        const keyboard = {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', web_app: { url: `${process.env.WEBAPP_URL}?dispute=${dispute._id}` } }
            ]]
          }
        };

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        await bot.telegram.sendMessage(
          parseInt(creatorId), 
          message + `\n\n–û–ø–ø–æ–Ω–µ–Ω—Ç: @${opponent.username || opponent.firstName}`, 
          keyboard
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        await bot.telegram.sendMessage(
          ctx.from.id,
          message.replace(`–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ${creatorSide === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}`, `–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ${opponentSide === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}`) + `\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å: @${creator.username || creator.firstName}`,
          keyboard
        );

        // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        return ctx.answerCbQuery('‚úÖ –°–ø–æ—Ä –ø—Ä–∏–Ω—è—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      } else {
        // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–æ–∂–µ–º –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await ctx.editMessageText(
          `‚úÖ –°–ø–æ—Ä –ø—Ä–∏–Ω—è—Ç!\n\n` +
          `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} ‚≠ê\n` +
          `‚ùì ${question}\n\n` +
          `üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n` +
          `- @${creator.username || creator.firstName} (${creatorSide === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'})\n` +
          `- @${opponent.username || opponent.firstName} (${opponentSide === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'})\n\n` +
          `–°–ø–æ—Ä –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å –ø–æ–º–æ—â—å—é –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã.`,
          {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', web_app: { url: `${process.env.WEBAPP_URL}?dispute=${dispute._id}` } }
              ]]
            }
          }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        const message = `üé≤ –°–ø–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω!\n\n‚ùì ${question}\nüí∞ –°—Ç–∞–≤–∫–∞: ${amount} ‚≠ê\n\n–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ${creatorSide === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}\n\n–°–ø–æ—Ä –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Å –ø–æ–º–æ—â—å—é –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã.`;
        
        const keyboard = {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', web_app: { url: `${process.env.WEBAPP_URL}?dispute=${dispute._id}` } }
            ]]
          }
        };

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        await bot.telegram.sendMessage(
          parseInt(creatorId), 
          message + `\n\n–û–ø–ø–æ–Ω–µ–Ω—Ç: @${opponent.username || opponent.firstName}`, 
          keyboard
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        await bot.telegram.sendMessage(
          ctx.from.id,
          message.replace(`–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ${creatorSide === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}`, `–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞: ${opponentSide === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}`) + `\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å: @${creator.username || creator.firstName}`,
          keyboard
        );

        ctx.answerCbQuery('‚úÖ –°–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ inline —Å–ø–æ—Ä–∞:', error);
      ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ø–æ—Ä–∞
  bot.on('web_app_data', async (ctx) => {
    try {
      const data = ctx.webAppData.data;
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞
      if (data.startsWith('dispute_result_')) {
        const parts = data.split('_');
        const disputeId = parts[2];
        const result = parts[3]; // 'heads' –∏–ª–∏ 'tails'
        
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞: ${disputeId}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
        
        const dispute = await Dispute.findById(disputeId)
          .populate('creator', 'telegramId username firstName')
          .populate('opponent', 'telegramId username firstName');
        
        if (!dispute) {
          return ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (dispute.status === 'completed') {
          return ctx.reply('‚ùå –≠—Ç–æ—Ç —Å–ø–æ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Å—Ç–æ—Ä–æ–Ω
        const creatorWins = (dispute.creatorSide === result);
        const winnerId = creatorWins ? dispute.creator._id : dispute.opponent._id;
        const winnerTelegramId = creatorWins ? dispute.creatorTelegramId : dispute.opponentTelegramId;
        const loserId = creatorWins ? dispute.opponent._id : dispute.creator._id;
        const loserTelegramId = creatorWins ? dispute.opponentTelegramId : dispute.creatorTelegramId;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        const winner = creatorWins ? dispute.creator : dispute.opponent;
        const loser = creatorWins ? dispute.opponent : dispute.creator;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%
        const totalAmount = dispute.bet.amount * 2;
        const commission = Math.floor(totalAmount * 0.05);
        const winAmount = totalAmount - commission;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–æ—Ä
        dispute.result = result;
        dispute.winner = winnerId;
        dispute.winnerTelegramId = winnerTelegramId;
        dispute.commission = commission;
        dispute.status = 'completed';
        dispute.completedAt = new Date();
        
        await dispute.save();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const winnerUser = await User.findById(winnerId);
        if (winnerUser) {
          winnerUser.balance += winAmount;
          await winnerUser.save();
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
          const winTransaction = new Transaction({
            userId: winnerId,
            telegramId: winnerTelegramId,
            amount: winAmount,
            type: 'win',
            game: 'dispute'
          });
          
          await winTransaction.save();
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const winnerMessage = `üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞: ${result === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}\n\n` +
                             `üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} ‚≠ê!\n\n` +
                             `‚ùì ${dispute.question}\n\n` +
                             `–ö–æ–º–∏—Å—Å–∏—è: ${commission} ‚≠ê (5%)`;
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        const loserMessage = `üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞: ${result === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}\n\n` +
                            `üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n\n` +
                            `‚ùì ${dispute.question}\n\n` +
                            `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @${winner.username || winner.firstName}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if (winner.telegramId) {
          await bot.telegram.sendMessage(winner.telegramId, winnerMessage);
        }
        
        if (loser.telegramId) {
          await bot.telegram.sendMessage(loser.telegramId, loserMessage);
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏–µ web_app_data
        return ctx.reply('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ /start –¥–ª—è —Å–ø–æ—Ä–æ–≤
  const handleDisputeStartParam = async (ctx) => {
    try {
      const match = ctx.message.text.match(/\/start dispute_(.+)/);
      if (!match) return false;
      
      const disputeId = match[1];
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dispute_${disputeId}`);
      
      const dispute = await Dispute.findById(disputeId);
      
      if (!dispute) {
        return ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–æ—Ä–µ
      if (ctx.from.id !== dispute.creatorTelegramId && ctx.from.id !== dispute.opponentTelegramId) {
        return ctx.reply('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞');
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userSide = ctx.from.id === dispute.creatorTelegramId ? dispute.creatorSide : dispute.opponentSide;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      return ctx.reply('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', web_app: { url: `${process.env.WEBAPP_URL}?dispute=${disputeId}` } }]
          ]
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–ø–æ—Ä–∞:', error);
      return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–æ—Ä–∞');
    }
  };

  // –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
  bot.command('test', (ctx) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
      ctx.reply('–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /test:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }
  });
  
  // Balance command
  bot.command('balance', async (ctx) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /balance –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
      const { id } = ctx.from;
      
      console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const user = await User.findOne({ telegramId: id });
      
      if (!user) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return ctx.reply('You need to start the bot first. Please send /start.');
      }
      
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –±–∞–ª–∞–Ω—Å:', user.balance);
      ctx.reply(`Your current balance: ${user.balance} Stars ‚≠ê`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /balance:', error);
      ctx.reply('Sorry, there was an error. Please try again later.');
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
  bot.command('dispute', async (ctx) => {
    try {
      ctx.replyWithHTML(
        '<b>üé≤ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞</b>\n\n' +
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–æ—Ä—ã –ø—Ä—è–º–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ!\n\n' +
        '1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ: @' + ctx.botInfo.username + '\n' +
        '2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ?\n' +
        '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–æ—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É\n\n' +
        '–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã: –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–µ–ª–∞—é—Ç —Å—Ç–∞–≤–∫—É, –∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ–º –º–æ–Ω–µ—Ç—ã.'
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ dispute:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });
  
  // Help command - –æ–±–Ω–æ–≤–ª—è–µ–º, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ä–∞—Ö
  bot.help((ctx) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    ctx.replyWithHTML(`<b>–ó–¥–∞—Ä–æ–≤–∞ —á–µ–ø—É—Ö–∞ –ª—É–¥–æ–º–∞–Ω–æ–≤—Å–∫–∞—è!</b> üé©‚ú®

Available commands:
/start - Start the bot and get the game link
/balance - Check your current Stars balance
/dispute - Create a dispute (see new inline method!)
/help - Show this help message
/test - Test the bot functionality

To create a dispute:
1. In any chat, type @${ctx.botInfo.username}
2. Enter: amount question (e.g., 100 Who will win?)
3. Send to your opponent

Games available:
üé∞ Slots
üé≤ Roulette
üî¢ Guess the Number
üí£ Miner
üìà Crush
üé≤ Disputes (use inline mode!)

Good luck and enjoy the Gatsby-inspired experience!`);
  });
  
  // Handle other messages
  bot.on('message', (ctx) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    ctx.reply('Use /start to begin playing or /help for more information.');
  });
  
  return bot;
};