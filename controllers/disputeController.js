const Dispute = require('../models/Dispute');
const User = require('../models/User');
const Transaction = require('../models/Transaction');
const GameHistory = require('../models/GameHistory');
const fetch = require('node-fetch');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤
exports.getAllDisputes = async (req, res) => {
    try {
        const disputes = await Dispute.find({ status: 'active' })
            .populate('creator', 'telegramId firstName lastName username')
            .populate('opponent', 'telegramId firstName lastName username')
            .sort({ createdAt: -1 });
        
        res.status(200).json(disputes);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä–æ–≤:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Ä–∞ –ø–æ ID
exports.getDisputeById = async (req, res) => {
    try {
        const { id } = req.params;
        
        const dispute = await Dispute.findById(id)
            .populate('creator', 'telegramId firstName lastName username')
            .populate('opponent', 'telegramId firstName lastName username');
        
        if (!dispute) {
            return res.status(404).json({ message: '–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.status(200).json(dispute);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Ä–∞:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞
exports.createDispute = async (req, res) => {
    try {
        const { creatorTelegramId, question, betAmount, messageId, chatId } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        const creator = await User.findOne({ telegramId: creatorTelegramId });
        if (!creator) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (creator.balance < betAmount) {
            return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Ä
        const dispute = new Dispute({
            creator: creator._id,
            creatorTelegramId,
            question,
            bet: {
                amount: betAmount,
                creatorChoice: null,
                opponentChoice: null
            },
            status: 'pending',
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            messageId,
            chatId
        });
        
        await dispute.save();
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–æ—Ä: ${dispute._id} –æ—Ç ${creator.firstName} (${creatorTelegramId})`);
        
        res.status(201).json(dispute);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–æ—Ä–∞:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–ø–æ—Ä–∞
exports.acceptDispute = async (req, res) => {
    try {
        const { disputeId, opponentTelegramId } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Ä
        const dispute = await Dispute.findById(disputeId)
            .populate('creator', 'telegramId firstName lastName username');
        
        if (!dispute) {
            return res.status(404).json({ message: '–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        if (dispute.status !== 'pending') {
            return res.status(400).json({ message: '–°–ø–æ—Ä —É–∂–µ –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        const opponent = await User.findOne({ telegramId: opponentTelegramId });
        if (!opponent) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π –∂–µ —Å–ø–æ—Ä
        if (dispute.creatorTelegramId === opponentTelegramId) {
            return res.status(400).json({ message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Ä' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (opponent.balance < dispute.bet.amount) {
            return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è —Å–ø–æ—Ä–∞
        const creatorSide = Math.random() < 0.5 ? 'heads' : 'tails';
        const opponentSide = creatorSide === 'heads' ? 'tails' : 'heads';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–æ—Ä
        dispute.opponent = opponent._id;
        dispute.opponentTelegramId = opponentTelegramId;
        dispute.status = 'active';
        dispute.creatorSide = creatorSide;
        dispute.opponentSide = opponentSide;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –º–æ–Ω–µ—Ç–∫–∏
        dispute.creatorReady = false;
        dispute.opponentReady = false;
        
        await dispute.save();
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const creator = await User.findById(dispute.creator);
        creator.balance -= dispute.bet.amount;
        opponent.balance -= dispute.bet.amount;
        
        await creator.save();
        await opponent.save();
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const creatorTransaction = new Transaction({
            userId: creator._id,
            telegramId: creator.telegramId,
            amount: -dispute.bet.amount,
            type: 'bet',
            game: 'dispute',
            disputeId: dispute._id
        });
        
        const opponentTransaction = new Transaction({
            userId: opponent._id,
            telegramId: opponent.telegramId,
            amount: -dispute.bet.amount,
            type: 'bet',
            game: 'dispute',
            disputeId: dispute._id
        });
        
        await creatorTransaction.save();
        await opponentTransaction.save();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ Telegram
        await this.updateDisputeMessage(dispute);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ
        console.log(`–°–ø–æ—Ä ${dispute._id} –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${opponent.firstName} (${opponentTelegramId})`);
        
        res.status(200).json(dispute);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ø–æ—Ä–∞:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ø–æ—Ä–∞
exports.updateDisputeMessage = async (dispute) => {
    try {
        if (!dispute.messageId || !dispute.chatId) {
            console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —Å–ø–æ—Ä–∞:', dispute._id);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞
        const roomUrl = `https://t.me/${process.env.TELEGRAM_BOT_USERNAME}/app?startapp=dispute_${dispute._id}`;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const inlineKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä üëë',
                        url: roomUrl
                    }
                ]
            ]
        };
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        const creatorSideText = dispute.creatorSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
        const opponentSideText = dispute.opponentSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageText = `üèÜ <b>–°–ø–æ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>\n\n`
            + `<b>–¢–µ–º–∞:</b> ${dispute.question}\n`
            + `<b>–°—É–º–º–∞:</b> ${dispute.bet.amount} ‚≠ê\n\n`
            + `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> ${dispute.creator.firstName} (${creatorSideText})\n`
            + `<b>–û–ø–ø–æ–Ω–µ–Ω—Ç:</b> ${dispute.opponent.firstName} (${opponentSideText})\n\n`
            + `<b>–°—Ç–∞—Ç—É—Å:</b> –°–ø–æ—Ä –ø—Ä–∏–Ω—è—Ç\n\n`
            + `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –∏ –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É!`;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const response = await fetch(
            `https://api.telegram.org/bot${botToken}/editMessageText`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: dispute.chatId,
                    message_id: dispute.messageId,
                    text: messageText,
                    reply_markup: inlineKeyboard,
                    parse_mode: 'HTML'
                })
            }
        );
        
        const result = await response.json();
        if (!result.ok) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', result.description);
        } else {
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–æ—Ä–∞ ${dispute._id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
        }
        
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–æ—Ä–∞:', error);
        return null;
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞
exports.getDisputeResult = async (req, res) => {
    try {
        const { disputeId } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Ä
        const dispute = await Dispute.findById(disputeId)
            .populate('creator', 'telegramId firstName lastName username')
            .populate('opponent', 'telegramId firstName lastName username');
        
        if (!dispute) {
            return res.status(404).json({ message: '–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        if (dispute.status !== 'active') {
            return res.status(400).json({ message: '–°–ø–æ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω' });
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - "heads" –∏–ª–∏ "tails"
        const result = Math.random() < 0.5 ? 'heads' : 'tails';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const creatorWins = (dispute.creatorSide === result);
        const winner = creatorWins ? dispute.creator : dispute.opponent;
        const winnerId = creatorWins ? dispute.creator._id : dispute.opponent._id;
        const winnerTelegramId = creatorWins ? dispute.creatorTelegramId : dispute.opponentTelegramId;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%
        const totalAmount = dispute.bet.amount * 2;
        const commission = Math.floor(totalAmount * 0.05);
        const winAmount = totalAmount - commission;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–æ—Ä
        dispute.result = result;
        dispute.winner = winnerId;
        dispute.winnerTelegramId = winnerTelegramId;
        dispute.commission = commission;
        dispute.status = 'completed';
        dispute.completedAt = new Date();
        
        await dispute.save();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const winnerUser = await User.findById(winnerId);
        winnerUser.balance += winAmount;
        await winnerUser.save();
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
        const winTransaction = new Transaction({
            userId: winnerId,
            telegramId: winnerTelegramId,
            amount: winAmount,
            type: 'win',
            game: 'dispute',
            disputeId: dispute._id
        });
        
        await winTransaction.save();
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
        const gameHistory = new GameHistory({
            userId: winnerId,
            telegramId: winnerTelegramId,
            gameType: 'dispute',
            betAmount: dispute.bet.amount,
            outcome: 'win',
            winAmount: winAmount,
            gameData: {
                disputeId: dispute._id,
                question: dispute.question,
                opponentId: creatorWins ? dispute.opponentTelegramId : dispute.creatorTelegramId,
                coinResult: result
            },
            disputeId: dispute._id
        });
        
        await gameHistory.save();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É
        const loserId = creatorWins ? dispute.opponent._id : dispute.creator._id;
        const loserTelegramId = creatorWins ? dispute.opponentTelegramId : dispute.creatorTelegramId;
        
        const loseHistory = new GameHistory({
            userId: loserId,
            telegramId: loserTelegramId,
            gameType: 'dispute',
            betAmount: dispute.bet.amount,
            outcome: 'lose',
            winAmount: 0,
            gameData: {
                disputeId: dispute._id,
                question: dispute.question,
                opponentId: creatorWins ? dispute.creatorTelegramId : dispute.opponentTelegramId,
                coinResult: result
            },
            disputeId: dispute._id
        });
        
        await loseHistory.save();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤ —á–∞—Ç
        await this.sendDisputeResultMessage(dispute, result, creatorWins);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        console.log(`–°–ø–æ—Ä ${dispute._id} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerUser.firstName} (${winnerTelegramId}). –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
        
        res.status(200).json({
            dispute,
            result,
            winnerTelegramId,
            winAmount,
            commission
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–ø–æ—Ä–∞
exports.sendDisputeResultMessage = async (dispute, result, creatorWins) => {
    try {
        if (!dispute.messageId || !dispute.chatId) {
            console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —Å–ø–æ—Ä–∞:', dispute._id);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        const resultText = result === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
        const creatorSideText = dispute.creatorSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
        const opponentSideText = dispute.opponentSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const winnerName = creatorWins ? dispute.creator.firstName : dispute.opponent.firstName;
        const winnerSide = creatorWins ? creatorSideText : opponentSideText;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageText = `üéâ <b>–°–ø–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n`
            + `<b>–¢–µ–º–∞:</b> ${dispute.question}\n`
            + `<b>–°—É–º–º–∞:</b> ${dispute.bet.amount} ‚≠ê\n\n`
            + `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> ${dispute.creator.firstName} (${creatorSideText})\n`
            + `<b>–û–ø–ø–æ–Ω–µ–Ω—Ç:</b> ${dispute.opponent.firstName} (${opponentSideText})\n\n`
            + `<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –í—ã–ø–∞–ª ${resultText}!\n`
            + `<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> ${winnerName} (${winnerSide})\n`
            + `<b>–í—ã–∏–≥—Ä—ã—à:</b> ${dispute.bet.amount * 2 - dispute.commission} ‚≠ê`;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const response = await fetch(
            `https://api.telegram.org/bot${botToken}/editMessageText`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: dispute.chatId,
                    message_id: dispute.messageId,
                    text: messageText,
                    parse_mode: 'HTML'
                })
            }
        );
        
        const result = await response.json();
        if (!result.ok) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞:', result.description);
        } else {
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–ø–æ—Ä–∞ ${dispute._id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        }
        
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞:', error);
        return null;
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getUserDisputeHistory = async (req, res) => {
    try {
        const { telegramId } = req.params;
        
        const user = await User.findOne({ telegramId });
        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ø–æ—Ä—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º
        const disputes = await Dispute.find({
            $or: [
                { creatorTelegramId: telegramId },
                { opponentTelegramId: telegramId }
            ]
        })
        .populate('creator', 'telegramId firstName lastName username')
        .populate('opponent', 'telegramId firstName lastName username')
        .sort({ createdAt: -1 });
        
        res.status(200).json(disputes);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø–æ—Ä–æ–≤:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Å–ø–æ—Ä–∞
exports.createDisputeRoom = async (req, res) => {
    try {
        const { disputeId, roomId, userTelegramId } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä–∞
        const dispute = await Dispute.findById(disputeId)
            .populate('creator', 'telegramId firstName lastName username')
            .populate('opponent', 'telegramId firstName lastName username');
        
        if (!dispute) {
            return res.status(404).json({ message: '–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞
        const isCreator = dispute.creatorTelegramId === userTelegramId;
        const isOpponent = dispute.opponentTelegramId === userTelegramId;
        
        if (!isCreator && !isOpponent) {
            return res.status(403).json({ message: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞
        if (dispute.status !== 'active') {
            return res.status(400).json({ message: '–°–ø–æ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω' });
        }
        
        // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (!dispute.roomId) {
            dispute.roomId = roomId;
            await dispute.save();
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        if (isCreator && dispute.opponentTelegramId) {
            await this.notifyDisputeParticipant(dispute.opponentTelegramId, dispute);
        } else if (isOpponent && dispute.creatorTelegramId) {
            await this.notifyDisputeParticipant(dispute.creatorTelegramId, dispute);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        console.log(`–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è —Å–ø–æ—Ä–∞ ${dispute._id}. RoomID: ${dispute.roomId}`);
        
        res.status(200).json({ 
            success: true, 
            roomId: dispute.roomId,
            dispute: {
                _id: dispute._id,
                question: dispute.question,
                bet: dispute.bet,
                creatorSide: dispute.creatorSide,
                opponentSide: dispute.opponentSide,
                creator: dispute.creator,
                opponent: dispute.opponent,
                status: dispute.status
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–ø–æ—Ä–∞
exports.notifyDisputeParticipant = async (telegramId, dispute) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞
        const roomUrl = `https://t.me/${process.env.TELEGRAM_BOT_USERNAME}/app?startapp=dispute_${dispute._id}`;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const messageText = `üîî <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É —Å–ø–æ—Ä–∞</b>\n\n`
            + `–î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫—Ä—ã–ª –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞:\n\n`
            + `<b>–¢–µ–º–∞:</b> ${dispute.question}\n`
            + `<b>–°—É–º–º–∞:</b> ${dispute.bet.amount} ‚≠ê\n\n`
            + `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!`;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const inlineKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–ø–æ—Ä—É üëë',
                        url: roomUrl
                    }
                ]
            ]
        };
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const response = await fetch(
            `https://api.telegram.org/bot${botToken}/sendMessage`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: telegramId,
                    text: messageText,
                    reply_markup: inlineKeyboard,
                    parse_mode: 'HTML'
                })
            }
        );
        
        const result = await response.json();
        if (!result.ok) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É:', result.description);
        } else {
            console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–ø–æ—Ä–∞ ${dispute._id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
        }
        
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É:', error);
        return null;
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
exports.updatePlayerReadyStatus = async (req, res) => {
    try {
        const { disputeId, userTelegramId, ready } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä–∞
        const dispute = await Dispute.findById(disputeId);
        if (!dispute) {
            return res.status(404).json({ message: '–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞
        const isCreator = dispute.creatorTelegramId === userTelegramId;
        const isOpponent = dispute.opponentTelegramId === userTelegramId;
        
        if (!isCreator && !isOpponent) {
            return res.status(403).json({ message: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if (isCreator) {
            dispute.creatorReady = ready;
        } else if (isOpponent) {
            dispute.opponentReady = ready;
        }
        
        await dispute.save();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
        const bothReady = dispute.creatorReady && dispute.opponentReady;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ø–æ—Ä–∞ ${dispute._id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userTelegramId}, –≥–æ—Ç–æ–≤: ${ready}. –û–±–∞ –≥–æ—Ç–æ–≤—ã: ${bothReady}`);
        
        // –ï—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏
        if (bothReady && isCreator) {
            // –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            setTimeout(() => {
                this.getDisputeResult({ body: { disputeId } }, { 
                    status: () => ({ 
                        json: () => {} 
                    }) 
                }).catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
                });
            }, 3000);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        this.sendReadyStatusNotification(dispute, isCreator);
        
        res.status(200).json({ 
            success: true, 
            bothReady,
            creatorReady: dispute.creatorReady,
            opponentReady: dispute.opponentReady
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
exports.sendReadyStatusNotification = async (dispute, isFromCreator) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const recipientTelegramId = isFromCreator ? dispute.opponentTelegramId : dispute.creatorTelegramId;
        const senderName = isFromCreator ? dispute.creator.firstName : dispute.opponent.firstName;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const isReady = isFromCreator ? dispute.creatorReady : dispute.opponentReady;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const messageText = `üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ—Ä–∞</b>\n\n`
            + `–£—á–∞—Å—Ç–Ω–∏–∫ ${senderName} ${isReady ? '–≥–æ—Ç–æ–≤' : '–æ—Ç–º–µ–Ω–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å'} –∫ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—é –º–æ–Ω–µ—Ç–∫–∏.\n\n`
            + `<b>–¢–µ–º–∞ —Å–ø–æ—Ä–∞:</b> ${dispute.question}\n`
            + `<b>–°—É–º–º–∞:</b> ${dispute.bet.amount} ‚≠ê`;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const response = await fetch(
            `https://api.telegram.org/bot${botToken}/sendMessage`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: recipientTelegramId,
                    text: messageText,
                    parse_mode: 'HTML'
                })
            }
        );
        
        const result = await response.json();
        if (!result.ok) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', result.description);
        }
        
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
        return null;
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞
exports.getDisputeRoomStatus = async (req, res) => {
    try {
        const { disputeId } = req.params;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä–∞
        const dispute = await Dispute.findById(disputeId)
            .populate('creator', 'telegramId firstName lastName username')
            .populate('opponent', 'telegramId firstName lastName username');
        
        if (!dispute) {
            return res.status(404).json({ message: '–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
        res.status(200).json({
            disputeId: dispute._id,
            roomId: dispute.roomId,
            creatorReady: dispute.creatorReady,
            opponentReady: dispute.opponentReady,
            bothReady: dispute.creatorReady && dispute.opponentReady,
            status: dispute.status,
            result: dispute.result,
            winnerTelegramId: dispute.winnerTelegramId
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞:', error);
        res.status(500).json({ message: 'Server error' });
    }
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞
exports.closeDisputeRoom = async (req, res) => {
    try {
        const { disputeId, userTelegramId } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä–∞
        const dispute = await Dispute.findById(disputeId);
        if (!dispute) {
            return res.status(404).json({ message: '–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞
        const isCreator = dispute.creatorTelegramId === userTelegramId;
        const isOpponent = dispute.opponentTelegramId === userTelegramId;
        
        if (!isCreator && !isOpponent) {
            return res.status(403).json({ message: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞' });
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —Å–ø–æ—Ä –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        if (dispute.status === 'active') {
            if (isCreator) {
                dispute.creatorReady = false;
            } else if (isOpponent) {
                dispute.opponentReady = false;
            }
            
            await dispute.save();
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        console.log(`–ö–æ–º–Ω–∞—Ç–∞ —Å–ø–æ—Ä–∞ ${dispute._id} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userTelegramId}`);
        
        res.status(200).json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞:', error);
        res.status(500).json({ message: 'Server error' });
    }
};