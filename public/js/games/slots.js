/**
 * slots.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã Slots Premium
 * –í–µ—Ä—Å–∏—è 3.1.0
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
 * - –ü—Ä–µ–º–∏—É–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∑–≤—É–∫–∏
 * - –ë–æ–Ω—É—Å—ã –∏ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã
 * - –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –¥–∂–µ–∫–ø–æ—Ç—ã
 * - –ê–≤—Ç–æ—Å–ø–∏–Ω –∏ —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */

(function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (!window.GreenLightApp) {
        console.error('[Slots] GreenLightApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        window.GreenLightApp = {
            log: function(source, message, isError) {
                if (isError) console.error(`[${source}] ${message}`);
                else console.log(`[${source}] ${message}`);
            }
        };
    }
    
    const app = window.GreenLightApp;
    app.log('Slots', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏–≥—Ä—ã Slots Premium v3.1.0');
    
    // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
    const slotsGame = (function() {
        // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
        const CONFIG = {
            // –í–∏–∑—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            REEL_ANIMATION_DURATION: 2000,
            REEL_ANIMATION_DELAY: 150,
            SYMBOL_SIZE: 80,
            SYMBOL_MARGIN: 5,
            WINNING_ANIMATION_DURATION: 1000,
            
            // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            MIN_BET: 1,
            MAX_BET: 1000,
            DEFAULT_BET: 10,
            TURBO_MULTIPLIER: 0.5,
            MAX_AUTO_SPINS: 100,
            
            // –ë–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            SCATTER_BONUS_MULTIPLIER: 2,
            WILD_MULTIPLIER: 2,
            COMBO_MULTIPLIER_INCREASE: 0.25,
            MAX_COMBO_MULTIPLIER: 5,
            JACKPOT_INCREMENT: 0.01,
            MEGA_WIN_THRESHOLD: 20,
            EPIC_WIN_THRESHOLD: 50,
            
            // –ó–≤—É–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            ENABLE_SOUNDS: true,
            SOUND_VOLUME: 0.3
        };
        
        // === –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ===
        let state = {
            // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            isSpinning: false,
            initialized: false,
            initializationStarted: false,
            
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            autoSpinning: false,
            autoSpinsLeft: 0,
            turboMode: false,
            soundEnabled: CONFIG.ENABLE_SOUNDS,
            currentBet: CONFIG.DEFAULT_BET,
            
            // –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            totalSpins: 0,
            totalWins: 0,
            biggestWin: 0,
            currentCombo: 0,
            comboMultiplier: 1,
            jackpotAmount: 10000,
            lastWinAmount: 0,
            
            // –ú–∞—Ç—Ä–∏—Ü–∞ —Å–ª–æ—Ç–æ–≤
            currentMatrix: null,
            reels: []
        };
        
        // === –°–ò–ú–í–û–õ–´ –ò –¢–ê–ë–õ–ò–¶–ê –í–´–ü–õ–ê–¢ ===
        const symbols = {
            standard: ['üçí', 'üçã', 'üçá', 'üçä', 'üçâ', 'üíé', '7Ô∏è‚É£'],
            special: {
                wild: 'üÉè',
                scatter: '‚≠ê',
                bonus: 'üéÅ',
                jackpot: 'üëë'
            }
        };
        
        const payTable = {
            'üçí': { value: 2, name: '–í–∏—à–Ω—è', color: '#FF0000' },
            'üçã': { value: 3, name: '–õ–∏–º–æ–Ω', color: '#FFD700' },
            'üçá': { value: 4, name: '–í–∏–Ω–æ–≥—Ä–∞–¥', color: '#800080' },
            'üçä': { value: 5, name: '–ê–ø–µ–ª—å—Å–∏–Ω', color: '#FFA500' },
            'üçâ': { value: 6, name: '–ê—Ä–±—É–∑', color: '#00FF00' },
            'üíé': { value: 8, name: '–ê–ª–º–∞–∑', color: '#00FFFF' },
            '7Ô∏è‚É£': { value: 10, name: '–°–µ–º–µ—Ä–∫–∞', color: '#FF0000' },
            'üÉè': { value: 0, name: 'Wild', color: '#FF1493', special: 'wild' },
            '‚≠ê': { value: 0, name: 'Scatter', color: '#FFD700', special: 'scatter' },
            'üéÅ': { value: 15, name: '–ë–æ–Ω—É—Å', color: '#32CD32', special: 'bonus' },
            'üëë': { value: 0, name: '–î–∂–µ–∫–ø–æ—Ç', color: '#FFD700', special: 'jackpot' }
        };
        
        // === –≠–õ–ï–ú–ï–ù–¢–´ DOM ===
        let elements = {
            container: null,
            reelsContainer: null,
            spinBtn: null,
            betDisplay: null,
            winDisplay: null,
            jackpotDisplay: null,
            comboDisplay: null,
            soundToggle: null,
            autoSpinBtn: null,
            turboBtn: null
        };
        
        // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
        /**
         * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
         */
        const init = async function() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if (state.initialized || state.initializationStarted) {
                app.log('Slots', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
                return true;
            }
            
            state.initializationStarted = true;
            app.log('Slots', '–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏');
            
            try {
                // –ü–æ—ç—Ç–∞–ø–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                const steps = [
                    { name: '–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', fn: findContainer },
                    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', fn: createInterface },
                    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤', fn: createSlotMatrix },
                    { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π', fn: setupEventListeners },
                    { name: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è', fn: loadGameState }
                ];
                
                for (const step of steps) {
                    app.log('Slots', `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${step.name}`);
                    const success = await step.fn();
                    if (!success) {
                        throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: ${step.name}`);
                    }
                }
                
                state.initialized = true;
                app.log('Slots', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                return true;
                
            } catch (error) {
                app.log('Slots', `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, true);
                state.initializationStarted = false;
                return false;
            }
        };
        
        /**
         * –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
         */
        const findContainer = async function() {
            return new Promise((resolve) => {
                setTimeout(() => {
                    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    let container = document.querySelector('.slots-container');
                    
                    if (!container) {
                        // –ò—â–µ–º —ç–∫—Ä–∞–Ω —Å–ª–æ—Ç–æ–≤
                        const slotsScreen = document.getElementById('slots-screen');
                        if (slotsScreen) {
                            container = document.createElement('div');
                            container.className = 'slots-container';
                            slotsScreen.appendChild(container);
                        }
                    }
                    
                    if (container) {
                        elements.container = container;
                        app.log('Slots', '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω/—Å–æ–∑–¥–∞–Ω');
                        resolve(true);
                    } else {
                        app.log('Slots', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', true);
                        resolve(false);
                    }
                }, 100);
            });
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
         */
        const createInterface = function() {
            try {
                if (!elements.container) return false;
                
                // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                elements.container.innerHTML = '';
                
                // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                const premiumContainer = document.createElement('div');
                premiumContainer.className = 'premium-slots-container';
                
                premiumContainer.innerHTML = `
                    <div class="slots-header">
                        <div class="jackpot-display">
                            <span class="label">–î–ñ–ï–ö–ü–û–¢</span>
                            <span id="jackpot-amount">${formatNumber(state.jackpotAmount)}</span>
                        </div>
                        <div class="combo-display">
                            <span class="label">–ö–û–ú–ë–û</span>
                            <span id="combo-multiplier">x${state.comboMultiplier.toFixed(2)}</span>
                        </div>
                    </div>
                    
                    <div class="slots-main">
                        <div class="reels-container" id="reels-container"></div>
                        <div class="win-display" id="win-display" style="display: none;"></div>
                    </div>
                    
                    <div class="slots-controls">
                        <div class="bet-controls">
                            <button id="bet-minus" class="bet-btn">-</button>
                            <div class="bet-display">
                                <span class="label">–°–¢–ê–í–ö–ê</span>
                                <span id="bet-amount">${state.currentBet}</span>
                            </div>
                            <button id="bet-plus" class="bet-btn">+</button>
                        </div>
                        
                        <button id="spin-btn" class="spin-btn">
                            <span class="spin-text">SPIN</span>
                            <span class="spin-cost">${state.currentBet} ‚≠ê</span>
                        </button>
                        
                        <div class="extra-controls">
                            <button id="auto-spin-btn" class="control-btn">AUTO</button>
                            <button id="turbo-btn" class="control-btn">TURBO</button>
                            <button id="sound-toggle" class="control-btn">üîä</button>
                        </div>
                    </div>
                `;
                
                elements.container.appendChild(premiumContainer);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
                elements.reelsContainer = document.getElementById('reels-container');
                elements.spinBtn = document.getElementById('spin-btn');
                elements.betDisplay = document.getElementById('bet-amount');
                elements.winDisplay = document.getElementById('win-display');
                elements.jackpotDisplay = document.getElementById('jackpot-amount');
                elements.comboDisplay = document.getElementById('combo-multiplier');
                elements.soundToggle = document.getElementById('sound-toggle');
                elements.autoSpinBtn = document.getElementById('auto-spin-btn');
                elements.turboBtn = document.getElementById('turbo-btn');
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
                injectStyles();
                
                app.log('Slots', '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                return true;
                
            } catch (error) {
                app.log('Slots', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ${error.message}`, true);
                return false;
            }
        };
        
        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å–ª–æ—Ç–æ–≤
         */
        const createSlotMatrix = function() {
            try {
                if (!elements.reelsContainer) return false;
                
                elements.reelsContainer.innerHTML = '';
                state.reels = [];
                
                // –°–æ–∑–¥–∞–µ–º 3x3 —Å–µ—Ç–∫—É
                for (let row = 0; row < 3; row++) {
                    const rowElement = document.createElement('div');
                    rowElement.className = 'slot-row';
                    
                    for (let col = 0; col < 3; col++) {
                        const reel = document.createElement('div');
                        reel.className = 'reel';
                        reel.dataset.row = row;
                        reel.dataset.col = col;
                        
                        const reelStrip = document.createElement('div');
                        reelStrip.className = 'reel-strip';
                        
                        // –ù–∞—á–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                        const symbol = document.createElement('div');
                        symbol.className = 'symbol';
                        symbol.textContent = getRandomSymbol();
                        reelStrip.appendChild(symbol);
                        
                        reel.appendChild(reelStrip);
                        rowElement.appendChild(reel);
                        state.reels.push(reelStrip);
                    }
                    
                    elements.reelsContainer.appendChild(rowElement);
                }
                
                app.log('Slots', '–ú–∞—Ç—Ä–∏—Ü–∞ —Å–ª–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞');
                return true;
                
            } catch (error) {
                app.log('Slots', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã: ${error.message}`, true);
                return false;
            }
        };
        
        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
         */
        const setupEventListeners = function() {
            try {
                // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞
                if (elements.spinBtn) {
                    elements.spinBtn.addEventListener('click', spin);
                }
                
                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–æ–π
                const betMinus = document.getElementById('bet-minus');
                const betPlus = document.getElementById('bet-plus');
                
                if (betMinus) betMinus.addEventListener('click', () => adjustBet(-1));
                if (betPlus) betPlus.addEventListener('click', () => adjustBet(1));
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
                if (elements.autoSpinBtn) {
                    elements.autoSpinBtn.addEventListener('click', toggleAutoSpin);
                }
                
                if (elements.turboBtn) {
                    elements.turboBtn.addEventListener('click', toggleTurboMode);
                }
                
                if (elements.soundToggle) {
                    elements.soundToggle.addEventListener('click', toggleSound);
                }
                
                app.log('Slots', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
                return true;
                
            } catch (error) {
                app.log('Slots', `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${error.message}`, true);
                return false;
            }
        };
        
        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
         */
        const loadGameState = function() {
            try {
                const savedState = localStorage.getItem('slotsGameState');
                if (savedState) {
                    const parsedState = JSON.parse(savedState);
                    Object.assign(state, parsedState);
                    updateDisplays();
                }
                return true;
            } catch (error) {
                app.log('Slots', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${error.message}`, true);
                return true; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            }
        };
        
        // === –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ===
        /**
         * –ó–∞–ø—É—Å–∫ –≤—Ä–∞—â–µ–Ω–∏—è
         */
        const spin = async function() {
            if (state.isSpinning) return;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if (!state.initialized) {
                app.log('Slots', '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
                const success = await init();
                if (!success) {
                    app.log('Slots', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É', true);
                    return;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if (window.GreenLightApp.user.balance < state.currentBet) {
                if (window.casinoApp) {
                    window.casinoApp.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
                }
                return;
            }
            
            state.isSpinning = true;
            state.totalSpins++;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            if (elements.spinBtn) {
                elements.spinBtn.disabled = true;
                elements.spinBtn.querySelector('.spin-text').textContent = 'SPINNING...';
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (elements.winDisplay) {
                elements.winDisplay.style.display = 'none';
            }
            
            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const matrix = generateMatrix();
                state.currentMatrix = matrix;
                
                // –ê–Ω–∏–º–∏—Ä—É–µ–º –±–∞—Ä–∞–±–∞–Ω—ã
                await animateReels(matrix);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
                const result = checkWin(matrix);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await processResult(result);
                
            } catch (error) {
                app.log('Slots', `–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è: ${error.message}`, true);
            } finally {
                state.isSpinning = false;
                
                if (elements.spinBtn) {
                    elements.spinBtn.disabled = false;
                    elements.spinBtn.querySelector('.spin-text').textContent = 'SPIN';
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Å–ø–∏–Ω –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
                if (state.autoSpinning && state.autoSpinsLeft > 0) {
                    state.autoSpinsLeft--;
                    if (state.autoSpinsLeft === 0) {
                        toggleAutoSpin();
                    } else {
                        setTimeout(spin, state.turboMode ? 500 : 1000);
                    }
                }
            }
        };
        
        /**
         * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
         */
        const generateMatrix = function() {
            const matrix = [];
            
            for (let row = 0; row < 3; row++) {
                matrix[row] = [];
                for (let col = 0; col < 3; col++) {
                    matrix[row][col] = getRandomSymbol();
                }
            }
            
            // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –≤—ã–∏–≥—Ä—ã—à–∞
            if (Math.random() < 0.2) {
                const winType = Math.random();
                const symbol = getRandomSymbol(false);
                
                if (winType < 0.5) {
                    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    const row = Math.floor(Math.random() * 3);
                    for (let col = 0; col < 3; col++) {
                        matrix[row][col] = symbol;
                    }
                } else if (winType < 0.8) {
                    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    const col = Math.floor(Math.random() * 3);
                    for (let row = 0; row < 3; row++) {
                        matrix[row][col] = symbol;
                    }
                } else {
                    // –î–∏–∞–≥–æ–Ω–∞–ª—å
                    if (Math.random() < 0.5) {
                        matrix[0][0] = matrix[1][1] = matrix[2][2] = symbol;
                    } else {
                        matrix[2][0] = matrix[1][1] = matrix[0][2] = symbol;
                    }
                }
            }
            
            return matrix;
        };
        
        /**
         * –ê–Ω–∏–º–∞—Ü–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
         */
        const animateReels = function(matrix) {
            const duration = state.turboMode ? 
                CONFIG.REEL_ANIMATION_DURATION * CONFIG.TURBO_MULTIPLIER : 
                CONFIG.REEL_ANIMATION_DURATION;
            
            const promises = state.reels.map((reel, index) => {
                return animateReel(reel, matrix[Math.floor(index / 3)][index % 3], index * CONFIG.REEL_ANIMATION_DELAY);
            });
            
            return Promise.all(promises);
        };
        
        /**
         * –ê–Ω–∏–º–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
         */
        const animateReel = function(reel, finalSymbol, delay) {
            return new Promise((resolve) => {
                setTimeout(() => {
                    const duration = state.turboMode ? 
                        CONFIG.REEL_ANIMATION_DURATION * CONFIG.TURBO_MULTIPLIER : 
                        CONFIG.REEL_ANIMATION_DURATION;
                    
                    // –û—á–∏—â–∞–µ–º –±–∞—Ä–∞–±–∞–Ω
                    reel.innerHTML = '';
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
                    const symbolCount = 15;
                    for (let i = 0; i < symbolCount; i++) {
                        const symbol = document.createElement('div');
                        symbol.className = 'symbol';
                        symbol.textContent = getRandomSymbol();
                        reel.appendChild(symbol);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                    const finalSymbolElement = document.createElement('div');
                    finalSymbolElement.className = 'symbol';
                    finalSymbolElement.textContent = finalSymbol;
                    reel.appendChild(finalSymbolElement);
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    const symbolHeight = CONFIG.SYMBOL_SIZE + CONFIG.SYMBOL_MARGIN * 2;
                    const totalDistance = symbolHeight * symbolCount;
                    
                    reel.style.transition = `transform ${duration}ms cubic-bezier(0.25, 0.1, 0.25, 1)`;
                    requestAnimationFrame(() => {
                        reel.style.transform = `translateY(-${totalDistance}px)`;
                    });
                    
                    // –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
                    setTimeout(() => {
                        reel.style.transition = 'none';
                        reel.style.transform = 'translateY(0)';
                        reel.innerHTML = '';
                        
                        const symbol = document.createElement('div');
                        symbol.className = 'symbol final';
                        symbol.textContent = finalSymbol;
                        reel.appendChild(symbol);
                        
                        resolve();
                    }, duration);
                }, delay);
            });
        };
        
        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
         */
        const checkWin = function(matrix) {
            const winLines = [];
            let totalMultiplier = 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            for (let row = 0; row < 3; row++) {
                if (matrix[row][0] === matrix[row][1] && matrix[row][1] === matrix[row][2]) {
                    const symbol = matrix[row][0];
                    const multiplier = payTable[symbol]?.value || 1;
                    winLines.push({ type: 'horizontal', row, symbol, multiplier });
                    totalMultiplier += multiplier;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            for (let col = 0; col < 3; col++) {
                if (matrix[0][col] === matrix[1][col] && matrix[1][col] === matrix[2][col]) {
                    const symbol = matrix[0][col];
                    const multiplier = payTable[symbol]?.value || 1;
                    winLines.push({ type: 'vertical', col, symbol, multiplier });
                    totalMultiplier += multiplier;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª–∏
            if (matrix[0][0] === matrix[1][1] && matrix[1][1] === matrix[2][2]) {
                const symbol = matrix[0][0];
                const multiplier = payTable[symbol]?.value || 1;
                winLines.push({ type: 'diagonal', direction: 'main', symbol, multiplier });
                totalMultiplier += multiplier;
            }
            
            if (matrix[2][0] === matrix[1][1] && matrix[1][1] === matrix[0][2]) {
                const symbol = matrix[2][0];
                const multiplier = payTable[symbol]?.value || 1;
                winLines.push({ type: 'diagonal', direction: 'anti', symbol, multiplier });
                totalMultiplier += multiplier;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–±–æ –º–Ω–æ–∂–∏—Ç–µ–ª—å
            if (totalMultiplier > 0) {
                totalMultiplier *= state.comboMultiplier;
            }
            
            return {
                win: winLines.length > 0,
                winLines,
                totalMultiplier
            };
        };
        
        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
         */
        const processResult = async function(result) {
            let winAmount = 0;
            
            if (result.win) {
                winAmount = Math.floor(state.currentBet * result.totalMultiplier);
                state.totalWins++;
                state.currentCombo++;
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ –º–Ω–æ–∂–∏—Ç–µ–ª—å
                if (state.currentCombo > 1) {
                    state.comboMultiplier = Math.min(
                        CONFIG.MAX_COMBO_MULTIPLIER,
                        1 + (state.currentCombo - 1) * CONFIG.COMBO_MULTIPLIER_INCREASE
                    );
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
                if (winAmount > state.biggestWin) {
                    state.biggestWin = winAmount;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
                showWin(winAmount, result);
                
            } else {
                state.currentCombo = 0;
                state.comboMultiplier = 1;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∂–µ–∫–ø–æ—Ç
            state.jackpotAmount += Math.floor(state.currentBet * CONFIG.JACKPOT_INCREMENT);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à
            state.lastWinAmount = winAmount;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateDisplays();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if (window.casinoApp) {
                await window.casinoApp.processGameResult(
                    'slots',
                    state.currentBet,
                    result.win ? 'win' : 'lose',
                    winAmount,
                    {
                        matrix: state.currentMatrix,
                        winLines: result.winLines,
                        multiplier: result.totalMultiplier
                    }
                );
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            saveGameState();
        };
        
        /**
         * –ü–æ–∫–∞–∑ –≤—ã–∏–≥—Ä—ã—à–∞
         */
        const showWin = function(amount, result) {
            if (!elements.winDisplay) return;
            
            elements.winDisplay.style.display = 'block';
            elements.winDisplay.className = 'win-display animate';
            
            let message = `–ü–û–ë–ï–î–ê! ${amount} ‚≠ê`;
            if (result.totalMultiplier >= CONFIG.EPIC_WIN_THRESHOLD) {
                message = `–≠–ü–ò–ß–ï–°–ö–ò–ô –í–´–ò–ì–†–´–®! ${amount} ‚≠ê`;
            } else if (result.totalMultiplier >= CONFIG.MEGA_WIN_THRESHOLD) {
                message = `–ú–ï–ì–ê –í–´–ò–ì–†–´–®! ${amount} ‚≠ê`;
            }
            
            elements.winDisplay.innerHTML = `
                <div class="win-message">${message}</div>
                <div class="win-multiplier">x${result.totalMultiplier.toFixed(2)}</div>
            `;
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            highlightWinningSymbols(result.winLines);
        };
        
        /**
         * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
         */
        const highlightWinningSymbols = function(winLines) {
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
            document.querySelectorAll('.symbol.winning').forEach(symbol => {
                symbol.classList.remove('winning');
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
            winLines.forEach(line => {
                switch (line.type) {
                    case 'horizontal':
                        for (let col = 0; col < 3; col++) {
                            const reel = document.querySelector(`.reel[data-row="${line.row}"][data-col="${col}"]`);
                            if (reel) {
                                const symbol = reel.querySelector('.symbol');
                                if (symbol) symbol.classList.add('winning');
                            }
                        }
                        break;
                    case 'vertical':
                        for (let row = 0; row < 3; row++) {
                            const reel = document.querySelector(`.reel[data-row="${row}"][data-col="${line.col}"]`);
                            if (reel) {
                                const symbol = reel.querySelector('.symbol');
                                if (symbol) symbol.classList.add('winning');
                            }
                        }
                        break;
                    case 'diagonal':
                        if (line.direction === 'main') {
                            for (let i = 0; i < 3; i++) {
                                const reel = document.querySelector(`.reel[data-row="${i}"][data-col="${i}"]`);
                                if (reel) {
                                    const symbol = reel.querySelector('.symbol');
                                    if (symbol) symbol.classList.add('winning');
                                }
                            }
                        } else {
                            for (let i = 0; i < 3; i++) {
                                const reel = document.querySelector(`.reel[data-row="${2-i}"][data-col="${i}"]`);
                                if (reel) {
                                    const symbol = reel.querySelector('.symbol');
                                    if (symbol) symbol.classList.add('winning');
                                }
                            }
                        }
                        break;
                }
            });
        };
        
        // === –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        /**
         * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
         */
        const adjustBet = function(direction) {
            const bets = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000];
            const currentIndex = bets.indexOf(state.currentBet);
            const newIndex = Math.max(0, Math.min(bets.length - 1, currentIndex + direction));
            
            state.currentBet = bets[newIndex];
            updateDisplays();
        };
        
        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–ø–∏–Ω–∞
         */
        const toggleAutoSpin = function() {
            state.autoSpinning = !state.autoSpinning;
            
            if (state.autoSpinning) {
                state.autoSpinsLeft = 50;
                elements.autoSpinBtn?.classList.add('active');
                if (!state.isSpinning) spin();
            } else {
                state.autoSpinsLeft = 0;
                elements.autoSpinBtn?.classList.remove('active');
            }
        };
        
        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º–∞
         */
        const toggleTurboMode = function() {
            state.turboMode = !state.turboMode;
            elements.turboBtn?.classList.toggle('active');
        };
        
        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
         */
        const toggleSound = function() {
            state.soundEnabled = !state.soundEnabled;
            if (elements.soundToggle) {
                elements.soundToggle.textContent = state.soundEnabled ? 'üîä' : 'üîá';
            }
        };
        
        // === –£–¢–ò–õ–ò–¢–´ ===
        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
         */
        const getRandomSymbol = function(includeSpecial = true) {
            if (includeSpecial && Math.random() < 0.1) {
                const specialKeys = Object.keys(symbols.special);
                return symbols.special[specialKeys[Math.floor(Math.random() * specialKeys.length)]];
            }
            return symbols.standard[Math.floor(Math.random() * symbols.standard.length)];
        };
        
        /**
         * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
         */
        const updateDisplays = function() {
            if (elements.betDisplay) {
                elements.betDisplay.textContent = state.currentBet;
            }
            
            if (elements.spinBtn) {
                const costElement = elements.spinBtn.querySelector('.spin-cost');
                if (costElement) {
                    costElement.textContent = `${state.currentBet} ‚≠ê`;
                }
            }
            
            if (elements.jackpotDisplay) {
                elements.jackpotDisplay.textContent = formatNumber(state.jackpotAmount);
            }
            
            if (elements.comboDisplay) {
                elements.comboDisplay.textContent = `x${state.comboMultiplier.toFixed(2)}`;
            }
        };
        
        /**
         * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
         */
        const formatNumber = function(num) {
            return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };
        
        /**
         * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
         */
        const saveGameState = function() {
            try {
                localStorage.setItem('slotsGameState', JSON.stringify({
                    totalSpins: state.totalSpins,
                    totalWins: state.totalWins,
                    biggestWin: state.biggestWin,
                    jackpotAmount: state.jackpotAmount
                }));
            } catch (error) {
                app.log('Slots', `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${error.message}`, true);
            }
        };
        
        /**
         * –ò–Ω—ä–µ–∫—Ü–∏—è —Å—Ç–∏–ª–µ–π
         */
        const injectStyles = function() {
            const styleId = 'slots-premium-styles';
            if (document.getElementById(styleId)) return;
            
            const styles = document.createElement('style');
            styles.id = styleId;
            styles.textContent = `
                .premium-slots-container {
                    background: linear-gradient(145deg, #1a1a1a, #2d2d2d);
                    border-radius: 15px;
                    padding: 20px;
                    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
                    max-width: 600px;
                    margin: 0 auto;
                }
                
                .slots-header {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 20px;
                }
                
                .jackpot-display, .combo-display {
                    background: rgba(0, 0, 0, 0.5);
                    padding: 10px 20px;
                    border-radius: 10px;
                    text-align: center;
                }
                
                .label {
                    display: block;
                    font-size: 12px;
                    color: #888;
                    margin-bottom: 5px;
                }
                
                #jackpot-amount, #combo-multiplier {
                    font-size: 20px;
                    font-weight: bold;
                    color: #FFD700;
                }
                
                .slots-main {
                    margin-bottom: 20px;
                    position: relative;
                }
                
                .reels-container {
                    background: #000;
                    border: 2px solid #FFD700;
                    border-radius: 10px;
                    padding: 10px;
                    display: flex;
                    flex-direction: column;
                    gap: 10px;
                }
                
                .slot-row {
                    display: flex;
                    gap: 10px;
                    justify-content: center;
                }
                
                .reel {
                    width: 80px;
                    height: 80px;
                    background: #111;
                    border: 1px solid #333;
                    border-radius: 8px;
                    overflow: hidden;
                    position: relative;
                }
                
                .reel-strip {
                    position: relative;
                    width: 100%;
                    height: 100%;
                }
                
                .symbol {
                    width: 100%;
                    height: 100%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 36px;
                    position: absolute;
                    top: 0;
                    left: 0;
                }
                
                .symbol.winning {
                    animation: symbolWin 0.5s ease-in-out infinite;
                    filter: drop-shadow(0 0 10px #FFD700);
                }
                
                @keyframes symbolWin {
                    0%, 100% { transform: scale(1); }
                    50% { transform: scale(1.2); }
                }
                
                .win-display {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: rgba(0, 0, 0, 0.9);
                    border: 2px solid #FFD700;
                    border-radius: 10px;
                    padding: 20px;
                    text-align: center;
                    z-index: 10;
                }
                
                .win-display.animate {
                    animation: winAppear 0.5s ease-out;
                }
                
                @keyframes winAppear {
                    from { transform: translate(-50%, -50%) scale(0); opacity: 0; }
                    to { transform: translate(-50%, -50%) scale(1); opacity: 1; }
                }
                
                .win-message {
                    font-size: 24px;
                    color: #FFD700;
                    font-weight: bold;
                    margin-bottom: 10px;
                }
                
                .win-multiplier {
                    font-size: 18px;
                    color: #FFF;
                }
                
                .slots-controls {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    gap: 20px;
                }
                
                .bet-controls {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }
                
                .bet-btn {
                    width: 40px;
                    height: 40px;
                    border-radius: 50%;
                    border: 2px solid #FFD700;
                    background: rgba(0, 0, 0, 0.7);
                    color: #FFD700;
                    font-size: 20px;
                    cursor: pointer;
                    transition: all 0.3s;
                }
                
                .bet-btn:hover {
                    background: #FFD700;
                    color: #000;
                }
                
                .bet-display {
                    text-align: center;
                    background: rgba(0, 0, 0, 0.5);
                    padding: 10px 20px;
                    border-radius: 10px;
                }
                
                #bet-amount {
                    font-size: 18px;
                    font-weight: bold;
                    color: #FFD700;
                }
                
                .spin-btn {
                    padding: 15px 30px;
                    background: linear-gradient(45deg, #00A86B, #00FF00);
                    border: none;
                    border-radius: 30px;
                    color: white;
                    font-size: 18px;
                    font-weight: bold;
                    cursor: pointer;
                    transition: all 0.3s;
                    position: relative;
                    overflow: hidden;
                }
                
                .spin-btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(0, 168, 107, 0.4);
                }
                
                .spin-btn:disabled {
                    background: #666;
                    cursor: not-allowed;
                    transform: none;
                    box-shadow: none;
                }
                
                .spin-text {
                    display: block;
                }
                
                .spin-cost {
                    display: block;
                    font-size: 14px;
                    opacity: 0.8;
                }
                
                .extra-controls {
                    display: flex;
                    gap: 10px;
                }
                
                .control-btn {
                    padding: 8px 15px;
                    background: rgba(0, 0, 0, 0.7);
                    border: 1px solid #FFD700;
                    border-radius: 5px;
                    color: #FFD700;
                    cursor: pointer;
                    transition: all 0.3s;
                }
                
                .control-btn:hover {
                    background: #FFD700;
                    color: #000;
                }
                
                .control-btn.active {
                    background: #FFD700;
                    color: #000;
                }
                
                @media (max-width: 768px) {
                    .slots-controls {
                        flex-direction: column;
                    }
                    
                    .symbol {
                        font-size: 28px;
                    }
                    
                    .reel {
                        width: 60px;
                        height: 60px;
                    }
                }
            `;
            document.head.appendChild(styles);
        };
        
        // === –ü–£–ë–õ–ò–ß–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° ===
        return {
            init: init,
            spin: spin,
            getStatus: function() {
                return {
                    initialized: state.initialized,
                    isSpinning: state.isSpinning,
                    stats: {
                        totalSpins: state.totalSpins,
                        totalWins: state.totalWins,
                        biggestWin: state.biggestWin
                    }
                };
            }
        };
    })();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É
    if (window.registerGame) {
        window.registerGame('slotsGame', slotsGame);
    }
    
    window.slotsGame = slotsGame;
    
    app.log('Slots', '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
})();