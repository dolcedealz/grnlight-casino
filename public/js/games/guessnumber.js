// public/js/games/guessnumber.js

// Guess the Number game implementation
const guessNumberGame = (() => {
  // Game elements
  let guessBtn;
  let guessBet;
  let guessInput;
  let guessResult;
  let minRange;
  let maxRange;
  
  // Game state
  let isProcessing = false;
  let minNumber = 1;
  let maxNumber = 100;
  
  // Init function
  function init() {
    console.log('[GuessNumber] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã Guess Number');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    guessBtn = document.getElementById('guess-btn');
    guessBet = document.getElementById('guess-bet');
    guessInput = document.getElementById('guess-input');
    guessResult = document.getElementById('guess-result');
    minRange = document.getElementById('min-range');
    maxRange = document.getElementById('max-range');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!guessBtn || !guessInput) {
      console.error('[GuessNumber] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM');
      return false;
    }
    
    // Add event listeners
    guessBtn.addEventListener('click', makeGuess);
    console.log('[GuessNumber] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è');
    
    // Set range display
    if (minRange && maxRange) {
      minRange.textContent = minNumber;
      maxRange.textContent = maxNumber;
    } else {
      console.warn('[GuessNumber] –≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // Set input limits
    if (guessInput) {
      guessInput.min = minNumber;
      guessInput.max = maxNumber;
      guessInput.value = Math.floor((minNumber + maxNumber) / 2);
    }
    
    console.log('[GuessNumber] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return true;
  }
  
  // Make a guess
  async function makeGuess() {
    console.log('[GuessNumber] –ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ casinoApp
    if (!window.casinoApp) {
      console.error('[GuessNumber] casinoApp –Ω–µ –Ω–∞–π–¥–µ–Ω');
      alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      return;
    }
    
    // Check if already processing
    if (isProcessing) {
      console.log('[GuessNumber] –ó–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!guessBet || !guessInput) {
      console.error('[GuessNumber] –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      window.casinoApp.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã');
      return;
    }
    
    // Get bet amount
    const betAmount = parseInt(guessBet.value);
    
    // Validate bet
    if (isNaN(betAmount) || betAmount <= 0) {
      window.casinoApp.showNotification('Please enter a valid bet amount');
      return;
    }
    
    // Check balance
    if (betAmount > window.casinoApp.currentUser.balance) {
      window.casinoApp.showNotification('Insufficient balance');
      return;
    }
    
    // Get player's guess
    const playerGuess = parseInt(guessInput.value);
    
    // Validate guess
    if (isNaN(playerGuess) || playerGuess < minNumber || playerGuess > maxNumber) {
      window.casinoApp.showNotification(`Please enter a number between ${minNumber} and ${maxNumber}`);
      return;
    }
    
    // Set processing state
    isProcessing = true;
    if (guessBtn) {
      guessBtn.disabled = true;
    }
    
    if (guessResult) {
      guessResult.textContent = '';
      guessResult.className = 'result';
    }
    
    try {
      // Generate winning number and check result
      const result = processGuess(playerGuess);
      
      // Calculate win amount
      const winAmount = result.win ? betAmount * result.multiplier : 0;
      
      // Display result
      displayResult(result.win, winAmount, result.number, playerGuess);
      
      // Process game result with the server
      const gameData = {
        playerGuess,
        winningNumber: result.number,
        difference: Math.abs(result.number - playerGuess)
      };
      
      await window.casinoApp.processGameResult(
        'guessnumber',
        betAmount,
        result.win ? 'win' : 'lose',
        winAmount,
        gameData
      );
      
      console.log(`[GuessNumber] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∑–∞–≥–∞–¥–∞–Ω–æ ${result.number}, –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª ${playerGuess}, ${result.win ? '–ø–æ–±–µ–¥–∞' : '–ø—Ä–æ–∏–≥—Ä—ã—à'}`);
    } catch (error) {
      console.error('[GuessNumber] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã:', error);
      window.casinoApp.showNotification('An error occurred. Please try again.');
    } finally {
      // Reset state
      isProcessing = false;
      if (guessBtn) {
        guessBtn.disabled = false;
      }
    }
  }
  
  // Process the guess and determine results
  function processGuess(playerGuess) {
    // Generate random number between min and max (inclusive)
    const winningNumber = Math.floor(Math.random() * (maxNumber - minNumber + 1)) + minNumber;
    
    // Calculate difference
    const difference = Math.abs(winningNumber - playerGuess);
    
    // Determine win and multiplier
    if (difference === 0) {
      // Exact match
      return {
        win: true,
        multiplier: 10,
        number: winningNumber
      };
    } else if (difference <= 5) {
      // Close (within 5)
      return {
        win: true,
        multiplier: 3,
        number: winningNumber
      };
    } else if (difference <= 10) {
      // Getting warmer (within 10)
      return {
        win: true,
        multiplier: 1.5,
        number: winningNumber
      };
    } else {
      // Loss
      return {
        win: false,
        multiplier: 0,
        number: winningNumber
      };
    }
  }
  
  // Display result to the player
  function displayResult(isWin, amount, winningNumber, playerGuess) {
    if (!guessResult) {
      console.error('[GuessNumber] –≠–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (isWin) {
      if (winningNumber === playerGuess) {
        guessResult.textContent = `Exact match! Number was ${winningNumber}. You won ${amount} Stars! üéâ`;
      } else {
        guessResult.textContent = `Close! Number was ${winningNumber}. You won ${amount} Stars! üéâ`;
      }
      guessResult.classList.add('win');
    } else {
      guessResult.textContent = `Not close enough. Number was ${winningNumber}. Better luck next time!`;
      guessResult.classList.add('lose');
    }
  }
  
  // Return public methods
  return {
    init,
    makeGuess
  };
})();

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω
window.guessNumberGame = guessNumberGame;

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä
if (window.registerGame) {
  window.registerGame('guessNumberGame', guessNumberGame);
  console.log('[GuessNumber] –ò–≥—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
} else {
  console.warn('[GuessNumber] –§—É–Ω–∫—Ü–∏—è registerGame –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç');
}

console.log('[GuessNumber] –≠–∫—Å–ø–æ—Ä—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏');