const { Telegraf } = require('telegraf');
const User = require('../models/User');
const Dispute = require('../models/Dispute'); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–ø–æ—Ä–æ–≤
const Transaction = require('../models/Transaction'); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–ø–æ—Ä–æ–≤

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ—Ç–∞
module.exports = (token) => {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ Casino –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', token);
  
  // Initialize the bot with passed token
  const bot = new Telegraf(token);
  
  // Welcome message
  bot.start(async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–ø–æ—Ä–∞
      if (ctx.message && ctx.message.text.includes('dispute_')) {
        return handleDisputeStartParam(ctx);
      }
      
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
      
      const { id, first_name, last_name, username } = ctx.from;
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { id, first_name, last_name, username });
      
      // Register user if they don't exist
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      let user = await User.findOne({ telegramId: id });
      
      if (!user) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ...');
        user = new User({
          telegramId: id,
          firstName: first_name,
          lastName: last_name || '',
          username: username || ''
        });
        
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await user.save();
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      // Create welcome message with mini app button
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      console.log('WEBAPP_URL:', process.env.WEBAPP_URL);
      
      await ctx.reply(`Welcome to Greenlight Casino, ${first_name}! üé∞‚ú®\n\nTap the button below to start playing.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ Play Greenlight Casino', web_app: { url: process.env.WEBAPP_URL || 'https://grnlight-casino.onrender.com' } }]
          ]
        }
      });
      console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error);
      ctx.reply('Sorry, there was an error. Please try again later.');
    }
  });

 // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ web_app_data - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
bot.on('web_app_data', async (ctx) => {
  try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const rawData = ctx.webAppData.data;
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', rawData);
      
      let data;
      try {
          // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ
          data = JSON.parse(rawData);
      } catch (e) {
          // –ï—Å–ª–∏ –Ω–µ JSON, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
          console.log('–î–∞–Ω–Ω—ã–µ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É');
          data = rawData;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (typeof data === 'object' && data.type) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–±—ä–µ–∫—Ç)
          switch(data.type) {
              case 'dispute_room_connect':
                  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–ø–æ—Ä–∞
                  await handleDisputeRoomConnect(ctx, data);
                  break;
                  
              case 'player_ready':
                  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
                  await handlePlayerReady(ctx, data);
                  break;
                  
              case 'dispute_result':
                  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞
                  await handleDisputeResult(ctx, data);
                  break;
                  
              case 'dispute_result_final':
                  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞
                  await handleDisputeResultFinal(ctx, data);
                  break;
                  
              default:
                  console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${data.type}`);
                  ctx.reply('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
          }
      } else if (typeof data === 'string' && data.startsWith('dispute_result_')) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
          await handleLegacyDisputeResult(ctx, data);
      } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
          console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
          ctx.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.');
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–ø–æ—Ä–∞
async function handleDisputeRoomConnect(ctx, data) {
  try {
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–ø–æ—Ä–∞:', data);
      
      const { disputeId, roomId, isCreator } = data;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dispute = await Dispute.findById(disputeId)
          .populate('creator', 'firstName username')
          .populate('opponent', 'firstName username');
      
      if (!dispute) {
          ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞
      const isValidParticipant = dispute.creatorTelegramId === userId || dispute.opponentTelegramId === userId;
      
      if (!isValidParticipant) {
          ctx.reply('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞');
          return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –≤ —Å–ø–æ—Ä–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!dispute.roomId) {
          dispute.roomId = roomId;
          await dispute.save();
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRole = dispute.creatorTelegramId === userId ? 'creator' : 'opponent';
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ
      const otherParticipantId = userRole === 'creator' ? dispute.opponentTelegramId : dispute.creatorTelegramId;
      
      if (otherParticipantId) {
          try {
              // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞
              const roomUrl = `${process.env.WEBAPP_URL}?dispute=${disputeId}`;
              
              await bot.telegram.sendMessage(
                  otherParticipantId,
                  `üéÆ –£—á–∞—Å—Ç–Ω–∏–∫ —Å–ø–æ—Ä–∞ ${ctx.from.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!`,
                  {
                      reply_markup: {
                          inline_keyboard: [[
                              { text: 'üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–ø–æ—Ä—É', web_app: { url: roomUrl } }
                          ]]
                      }
                  }
              );
          } catch (notifyError) {
              console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:', notifyError);
          }
      }
      
      ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–ø–æ—Ä–∞');
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–ø–æ—Ä–∞:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–ø–æ—Ä–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
async function handlePlayerReady(ctx, data) {
  try {
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞:', data);
      
      const { disputeId, isCreator, ready } = data;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dispute = await Dispute.findById(disputeId);
      
      if (!dispute) {
          ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞
      const isValidParticipant = dispute.creatorTelegramId === userId || dispute.opponentTelegramId === userId;
      
      if (!isValidParticipant) {
          ctx.reply('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞');
          return;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRole = dispute.creatorTelegramId === userId ? 'creator' : 'opponent';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–ª–∏
      if ((userRole === 'creator' && !isCreator) || (userRole === 'opponent' && isCreator)) {
          ctx.reply('‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      if (userRole === 'creator') {
          dispute.creatorReady = ready;
      } else {
          dispute.opponentReady = ready;
      }
      
      await dispute.save();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
      const bothReady = dispute.creatorReady && dispute.opponentReady;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
      const otherParticipantId = userRole === 'creator' ? dispute.opponentTelegramId : dispute.creatorTelegramId;
      
      if (otherParticipantId) {
          try {
              await bot.telegram.sendMessage(
                  otherParticipantId,
                  `üì¢ –£—á–∞—Å—Ç–Ω–∏–∫ ${ctx.from.first_name} ${ready ? '–≥–æ—Ç–æ–≤' : '–æ—Ç–º–µ–Ω–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å'} –∫ —Å–ø–æ—Ä—É.\n\n${bothReady ? '‚ö†Ô∏è –û–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥–æ—Ç–æ–≤—ã! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏!' : ''}`
              );
          } catch (notifyError) {
              console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', notifyError);
          }
      }
      
      // –ï—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞—Ç–µ–ª—å, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (bothReady && userRole === 'creator') {
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
          setTimeout(() => {
              determineDisputeResult(dispute);
          }, 3000);
      }
      
      ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${ready ? '–≥–æ—Ç–æ–≤' : '–Ω–µ –≥–æ—Ç–æ–≤'}`);
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞
async function determineDisputeResult(dispute) {
  try {
      console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞ ${dispute._id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω
      if (dispute.status !== 'active') {
          console.log(`–°–ø–æ—Ä ${dispute._id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${dispute.status}`);
          return;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - "heads" –∏–ª–∏ "tails"
      const result = Math.random() < 0.5 ? 'heads' : 'tails';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      const creatorWins = (dispute.creatorSide === result);
      const winner = creatorWins ? dispute.creator : dispute.opponent;
      const winnerId = creatorWins ? dispute.creator : dispute.opponent;
      const winnerTelegramId = creatorWins ? dispute.creatorTelegramId : dispute.opponentTelegramId;
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%
      const totalAmount = dispute.bet.amount * 2;
      const commission = Math.floor(totalAmount * 0.05);
      const winAmount = totalAmount - commission;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–æ—Ä
      dispute.result = result;
      dispute.winner = winnerId;
      dispute.winnerTelegramId = winnerTelegramId;
      dispute.commission = commission;
      dispute.status = 'completed';
      dispute.completedAt = new Date();
      
      await dispute.save();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      const winnerUser = await User.findOne({ telegramId: winnerTelegramId });
      if (winnerUser) {
          winnerUser.balance += winAmount;
          await winnerUser.save();
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
          const winTransaction = new Transaction({
              userId: winnerUser._id,
              telegramId: winnerTelegramId,
              amount: winAmount,
              type: 'win',
              game: 'dispute'
          });
          
          await winTransaction.save();
      }
      
      console.log(`–°–ø–æ—Ä ${dispute._id} –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerTelegramId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
      await notifyDisputeResult(dispute, result, creatorWins, winAmount);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã messageId –∏ chatId
      if (dispute.messageId && dispute.chatId) {
          try {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
              const resultText = result === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
              const creatorSideText = dispute.creatorSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
              const opponentSideText = dispute.opponentSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
              const winnerName = creatorWins ? 
                  (dispute.creator.firstName || '–°–æ–∑–¥–∞—Ç–µ–ª—å') : 
                  (dispute.opponent.firstName || '–û–ø–ø–æ–Ω–µ–Ω—Ç');
              const winnerSide = creatorWins ? creatorSideText : opponentSideText;
              
              // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
              const messageText = `üéâ <b>–°–ø–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n`
                  + `<b>–¢–µ–º–∞:</b> ${dispute.question}\n`
                  + `<b>–°—É–º–º–∞:</b> ${dispute.bet.amount} ‚≠ê\n\n`
                  + `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> ${dispute.creator.firstName || '–°–æ–∑–¥–∞—Ç–µ–ª—å'} (${creatorSideText})\n`
                  + `<b>–û–ø–ø–æ–Ω–µ–Ω—Ç:</b> ${dispute.opponent.firstName || '–û–ø–ø–æ–Ω–µ–Ω—Ç'} (${opponentSideText})\n\n`
                  + `<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –í—ã–ø–∞–ª ${resultText}!\n`
                  + `<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> ${winnerName} (${winnerSide})\n`
                  + `<b>–í—ã–∏–≥—Ä—ã—à:</b> ${winAmount} ‚≠ê`;
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
              await bot.telegram.editMessageText(
                  dispute.chatId,
                  dispute.messageId,
                  null,
                  messageText,
                  { parse_mode: 'HTML' }
              );
              
              console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–æ—Ä–∞ ${dispute._id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
          } catch (messageError) {
              console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–æ—Ä–∞:', messageError);
          }
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞:', error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–ø–æ—Ä–∞
async function notifyDisputeResult(dispute, result, creatorWins, winAmount) {
  try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º
      const resultText = result === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
      
      // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      const winnerMessage = `üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞: –≤—ã–ø–∞–ª ${resultText}!\n\n`
          + `üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} ‚≠ê!\n\n`
          + `‚ùì ${dispute.question}`;
      
      // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
      const loserMessage = `üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞: –≤—ã–ø–∞–ª ${resultText}!\n\n`
          + `üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n\n`
          + `‚ùì ${dispute.question}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (dispute.creatorTelegramId) {
          await bot.telegram.sendMessage(
              dispute.creatorTelegramId,
              creatorWins ? winnerMessage : loserMessage
          );
      }
      
      if (dispute.opponentTelegramId) {
          await bot.telegram.sendMessage(
              dispute.opponentTelegramId,
              creatorWins ? loserMessage : winnerMessage
          );
      }
      
      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–ø–æ—Ä–∞ ${dispute._id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º`);
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–ø–æ—Ä–∞:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞
async function handleDisputeResult(ctx, data) {
  try {
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞:', data);
      
      const { disputeId, result } = data;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dispute = await Dispute.findById(disputeId);
      
      if (!dispute) {
          ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞
      const isValidParticipant = dispute.creatorTelegramId === userId || dispute.opponentTelegramId === userId;
      
      if (!isValidParticipant) {
          ctx.reply('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞');
          return;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRole = dispute.creatorTelegramId === userId ? 'creator' : 'opponent';
      
      // –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (userRole !== 'creator') {
          ctx.reply('‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–ø–æ—Ä–∞ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
          return;
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      await determineDisputeResult(dispute);
      
      ctx.reply('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞
async function handleDisputeResultFinal(ctx, data) {
  try {
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞:', data);
      
      const { disputeId, result, playerWon } = data;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dispute = await Dispute.findById(disputeId);
      
      if (!dispute) {
          ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã messageId –∏ chatId
      if (dispute.status === 'completed') {
          ctx.reply('‚úÖ –°–ø–æ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
      } else {
          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ —Å–ø–æ—Ä –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
          await determineDisputeResult(dispute);
          ctx.reply('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
async function handleLegacyDisputeResult(ctx, data) {
  try {
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç):', data);
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "dispute_result_DISPUTE_ID_RESULT"
      const parts = data.split('_');
      const disputeId = parts[2];
      const result = parts[3]; // 'heads' –∏–ª–∏ 'tails'
      
      if (!disputeId || !result || (result !== 'heads' && result !== 'tails')) {
          ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
          return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dispute = await Dispute.findById(disputeId);
      
      if (!dispute) {
          ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
      }
      
      // –ï—Å–ª–∏ —Å–ø–æ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
      if (dispute.status === 'completed') {
          ctx.reply('‚úÖ –°–ø–æ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
          return;
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      await determineDisputeResult(dispute);
      
      ctx.reply('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç):', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dispute –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start
async function handleDisputeStartParam(ctx) {
  try {
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dispute –≤ –∫–æ–º–∞–Ω–¥–µ start');
      
      // –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–æ—Ä–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start
      const startCommand = ctx.message.text;
      const disputeParam = startCommand.split('dispute_')[1];
      
      if (!disputeParam) {
          ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä');
          return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dispute = await Dispute.findById(disputeParam);
      
      if (!dispute) {
          ctx.reply('‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞
      const userId = ctx.from.id;
      const isCreator = dispute.creatorTelegramId === userId;
      const isOpponent = dispute.opponentTelegramId === userId;
      
      if (!isCreator && !isOpponent) {
          ctx.reply('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞');
          return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞
      const roomUrl = `${process.env.WEBAPP_URL}?dispute=${dispute._id}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–æ—Ä–∞
      await ctx.reply(
          `üéÆ –°–ø–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é!\n\n`
          + `<b>–¢–µ–º–∞:</b> ${dispute.question}\n`
          + `<b>–°—É–º–º–∞:</b> ${dispute.bet.amount} ‚≠ê\n\n`
          + `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –∏ –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É:`,
          {
              parse_mode: 'HTML',
              reply_markup: {
                  inline_keyboard: [
                      [{ text: '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä üëë', web_app: { url: roomUrl } }]
                  ]
              }
          }
      );
      
      console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–æ—Ä ${dispute._id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dispute:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–æ—Ä–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline —Ä–µ–∂–∏–º–∞ (–î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨)
bot.on('inline_query', async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id, '–ó–∞–ø—Ä–æ—Å:', ctx.inlineQuery.query);
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å: [—Å—É–º–º–∞] [–≤–æ–ø—Ä–æ—Å]
    const query = ctx.inlineQuery.query.trim();
    
    if (!query) {
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      await ctx.answerInlineQuery([{
        type: 'article',
        id: 'help',
        title: '–°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä',
        description: '–í–≤–µ–¥–∏—Ç–µ: [—Å—É–º–º–∞] [–≤–æ–ø—Ä–æ—Å]. –ù–∞–ø—Ä–∏–º–µ—Ä: 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ?',
        input_message_content: {
          message_text: '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: @' + ctx.botInfo.username + ' 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ?'
        }
      }]);
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–ø—Ä–æ—Å–µ (—Å—É–º–º–∞)
    const parts = query.split(' ');
    const amount = parseInt(parts[0]);
    const question = parts.slice(1).join(' ');
    
    if (isNaN(amount) || amount <= 0 || !question) {
      // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
      await ctx.answerInlineQuery([{
        type: 'article',
        id: 'error',
        title: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ: [—Å—É–º–º–∞] [–≤–æ–ø—Ä–æ—Å]. –ù–∞–ø—Ä–∏–º–µ—Ä: 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ?',
        input_message_content: {
          message_text: '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: @' + ctx.botInfo.username + ' 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ?'
        }
      }]);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ telegramId: ctx.from.id });
    
    if (!user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      await ctx.answerInlineQuery([{
        type: 'article',
        id: 'not_registered',
        title: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã',
        description: '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É',
        input_message_content: {
          message_text: '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @' + ctx.botInfo.username
        }
      }]);
      return;
    }
    
    if (user.balance < amount) {
      // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
      await ctx.answerInlineQuery([{
        type: 'article',
        id: 'insufficient_funds',
        title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
        description: `–£ –≤–∞—Å ${user.balance} –∑–≤–µ–∑–¥, –∞ –¥–ª—è —Å–ø–æ—Ä–∞ –Ω—É–∂–Ω–æ ${amount}`,
        input_message_content: {
          message_text: `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ –Ω–∞ ${amount} –∑–≤–µ–∑–¥ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance} –∑–≤–µ–∑–¥.`
        }
      }]);
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await ctx.answerInlineQuery([{
      type: 'article',
      id: 'create_dispute',
      title: `–°–ø–æ—Ä –Ω–∞ ${amount} –∑–≤–µ–∑–¥`,
      description: question,
      input_message_content: {
        message_text: `üé≤ <b>–ü—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–∫–ª—é—á–∏—Ç—å —Å–ø–æ—Ä!</b>\n\n<b>–¢–µ–º–∞:</b> ${question}\n<b>–°—É–º–º–∞:</b> ${amount} ‚≠ê\n\n–ö—Ç–æ –≤—ã–∏–≥—Ä–∞–µ—Ç, —Ä–µ—à–∏—Ç –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã.`,
        parse_mode: 'HTML'
      },
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–ø–æ—Ä', callback_data: `accept_dispute_${ctx.from.id}_${amount}_${Buffer.from(question).toString('base64')}` }]
        ]
      }
    }]);
    
    console.log('Inline –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline –∑–∞–ø—Ä–æ—Å–∞:', error);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.answerInlineQuery([{
      type: 'article',
      id: 'error',
      title: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
      description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
      input_message_content: {
        message_text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      }
    }]);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ø–æ—Ä–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
bot.action(/accept_dispute_(\d+)_(\d+)_(.+)/, async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–ø–æ—Ä–∞');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    const creatorId = parseInt(ctx.match[1]);
    const amount = parseInt(ctx.match[2]);
    const questionBase64 = ctx.match[3];
    const question = Buffer.from(questionBase64, 'base64').toString();
    
    // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π –∂–µ —Å–ø–æ—Ä
    if (ctx.from.id === creatorId) {
      await ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Ä!', true);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const creator = await User.findOne({ telegramId: creatorId });
    const opponent = await User.findOne({ telegramId: ctx.from.id });
    
    if (!creator || !opponent) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (creator.balance < amount) {
      await ctx.answerCbQuery('–°–æ–∑–¥–∞—Ç–µ–ª—å —Å–ø–æ—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', true);
      await ctx.editMessageText(`üé≤ <b>–°–ø–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å —Å–ø–æ—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (${amount} ‚≠ê)`, { parse_mode: 'HTML' });
      return;
    }
    
    if (opponent.balance < amount) {
      await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ø–æ—Ä–∞', true);
      return;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º messageId –∏ chatId, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    let messageId = null;
    let chatId = null;
    
    if (ctx.callbackQuery && ctx.callbackQuery.message) {
      messageId = ctx.callbackQuery.message.message_id;
      chatId = ctx.callbackQuery.message.chat.id;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Ä
    const dispute = new Dispute({
      creator: creator._id,
      creatorTelegramId: creatorId,
      opponent: opponent._id,
      opponentTelegramId: ctx.from.id,
      question,
      bet: {
        amount: amount
      },
      status: 'active',
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–Ω–µ—Ç–∫–∏
      creatorSide: Math.random() < 0.5 ? 'heads' : 'tails',
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      creatorReady: false,
      opponentReady: false,
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
      messageId: messageId,
      chatId: chatId
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å–æ–∑–¥–∞—Ç–µ–ª—é
    dispute.opponentSide = dispute.creatorSide === 'heads' ? 'tails' : 'heads';
    
    await dispute.save();
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    creator.balance -= amount;
    opponent.balance -= amount;
    
    await creator.save();
    await opponent.save();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const creatorTransaction = new Transaction({
      userId: creator._id,
      telegramId: creatorId,
      amount: -amount,
      type: 'bet',
      game: 'dispute',
      disputeId: dispute._id
    });
    
    const opponentTransaction = new Transaction({
      userId: opponent._id,
      telegramId: ctx.from.id,
      amount: -amount,
      type: 'bet',
      game: 'dispute',
      disputeId: dispute._id
    });
    
    await creatorTransaction.save();
    await opponentTransaction.save();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã —Å–ø–æ—Ä–∞
    const roomUrl = `${process.env.WEBAPP_URL}?dispute=${dispute._id}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å message_id –∏ chat.id
    if (messageId && chatId) {
      try {
        await ctx.editMessageText(
          `üèÜ <b>–°–ø–æ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>\n\n`
          + `<b>–¢–µ–º–∞:</b> ${question}\n`
          + `<b>–°—É–º–º–∞:</b> ${amount} ‚≠ê\n\n`
          + `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> ${creator.firstName} (${dispute.creatorSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'})\n`
          + `<b>–û–ø–ø–æ–Ω–µ–Ω—Ç:</b> ${opponent.firstName} (${dispute.opponentSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'})\n\n`
          + `<b>–°—Ç–∞—Ç—É—Å:</b> –°–ø–æ—Ä –ø—Ä–∏–Ω—è—Ç\n\n`
          + `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –∏ –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É!`,
          { 
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä üëë', web_app: { url: roomUrl } }]
              ]
            }
          }
        );
      } catch (editError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', editError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      try {
        await ctx.reply(
          `üèÜ <b>–°–ø–æ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>\n\n`
          + `<b>–¢–µ–º–∞:</b> ${question}\n`
          + `<b>–°—É–º–º–∞:</b> ${amount} ‚≠ê\n\n`
          + `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> ${creator.firstName} (${dispute.creatorSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'})\n`
          + `<b>–û–ø–ø–æ–Ω–µ–Ω—Ç:</b> ${opponent.firstName} (${dispute.opponentSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'})\n\n`
          + `<b>–°—Ç–∞—Ç—É—Å:</b> –°–ø–æ—Ä –ø—Ä–∏–Ω—è—Ç\n\n`
          + `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –∏ –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É!`,
          { 
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä üëë', web_app: { url: roomUrl } }]
              ]
            }
          }
        );
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', replyError);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    try {
      await bot.telegram.sendMessage(
        creatorId,
        `üéÆ –í–∞—à —Å–ø–æ—Ä –ø–æ —Ç–µ–º–µ "${question}" –±—ã–ª –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${opponent.firstName}!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É —Å–ø–æ—Ä–∞:`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä üëë', web_app: { url: roomUrl } }]
            ]
          }
        }
      );
    } catch (notifyError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é:', notifyError);
    }
    
    await ctx.answerCbQuery('–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–ø–æ—Ä! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É.');
    
    console.log(`–°–ø–æ—Ä ${dispute._id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–Ω—è—Ç`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ø–æ—Ä–∞:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ø–æ—Ä–∞', true);
  }
});

// –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command('test', (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    ctx.reply('–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /test:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ');
  }
});

// Balance command
bot.command('balance', async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /balance –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    const { id } = ctx.from;
    
    console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const user = await User.findOne({ telegramId: id });
    
    if (!user) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return ctx.reply('You need to start the bot first. Please send /start.');
    }
    
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –±–∞–ª–∞–Ω—Å:', user.balance);
    ctx.reply(`Your current balance: ${user.balance} Stars ‚≠ê`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /balance:', error);
    ctx.reply('Sorry, there was an error. Please try again later.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
bot.command('dispute', async (ctx) => {
  try {
    ctx.replyWithHTML(
      '<b>üé≤ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞</b>\n\n' +
      '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–æ—Ä—ã –ø—Ä—è–º–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ!\n\n' +
      '1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ: @' + ctx.botInfo.username + '\n' +
      '2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç –≤ –º–∞—Ç—á–µ?\n' +
      '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–æ—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É\n\n' +
      '–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã: –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–µ–ª–∞—é—Ç —Å—Ç–∞–≤–∫—É, –∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ–º –º–æ–Ω–µ—Ç—ã.'
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ dispute:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// Help command - –æ–±–Ω–æ–≤–ª—è–µ–º, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ä–∞—Ö
bot.help((ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
  ctx.replyWithHTML(`<b>–ó–¥–∞—Ä–æ–≤–∞ —á–µ–ø—É—Ö–∞ –ª—É–¥–æ–º–∞–Ω–æ–≤—Å–∫–∞—è!</b> üé©‚ú®

Available commands:
/start - Start the bot and get the game link
/balance - Check your current Stars balance
/dispute - Create a dispute (see new inline method!)
/help - Show this help message
/test - Test the bot functionality

To create a dispute:
1. In any chat, type @${ctx.botInfo.username}
2. Enter: amount question (e.g., 100 Who will win?)
3. Send to your opponent

Games available:
üé∞ Slots
üé≤ Roulette
üî¢ Guess the Number
üí£ Miner
üìà Crush
üé≤ Disputes (use inline mode!)

Good luck and enjoy the Gatsby-inspired experience!`);
});

// Handle other messages
bot.on('message', (ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
  ctx.reply('Use /start to begin playing or /help for more information.');
});

return bot;
};