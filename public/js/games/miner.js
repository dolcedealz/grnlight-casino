/**
 * miner.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã Miner
 * –í–µ—Ä—Å–∏—è 2.0.2
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä
 * - –°–æ–∑–¥–∞–Ω–∏–µ DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
 */

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ä–µ–¥—É
(function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (!window.GreenLightApp) {
      console.error('[Miner] GreenLightApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
      window.GreenLightApp = {
          log: function(source, message, isError) {
              if (isError) console.error(`[${source}] ${message}`);
              else console.log(`[${source}] ${message}`);
          }
      };
  }
  
  const app = window.GreenLightApp;
  app.log('Miner', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏–≥—Ä—ã Miner v2.0.2');
  
  // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
  const minerGame = (function() {
      // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
      let elements = {
          newGameBtn: null,
          cashoutBtn: null,
          minerBet: null,
          minesCount: null,
          minerGrid: null,
          potentialWin: null,
          minerResult: null,
          container: null
      };
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      return {
          // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
          init: init,
          startNewGame: startNewGame,
          cashout: cashout,
          updateMineCount: updateMineCount,
          
          // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          getStatus: function() {
              return {
                  initialized: state.initialized,
                  initializationStarted: state.initializationStarted,
                  isPlaying: state.isPlaying,
                  elementsFound: {
                      newGameBtn: !!elements.newGameBtn,
                      cashoutBtn: !!elements.cashoutBtn,
                      minerBet: !!elements.minerBet,
                      minerGrid: !!elements.minerGrid
                  },
                  gameState: {
                      minesCount: state.gameData.minesCount,
                      revealedCells: state.gameData.revealedCells.length,
                      currentMultiplier: state.gameData.currentMultiplier
                  }
              };
          }
      };
  })();
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  try {
      // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
      if (window.registerGame) {
          window.registerGame('minerGame', minerGame);
          app.log('Miner', '–ò–≥—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É registerGame');
      }
      
      // 2. –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
      window.minerGame = minerGame;
      app.log('Miner', '–ò–≥—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω');
      
      // 3. –°–æ–æ–±—â–∞–µ–º –≤ –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
      app.log('Miner', '–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      
      // 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      document.addEventListener('DOMContentLoaded', function() {
          setTimeout(() => {
              if (!minerGame.getStatus().initialized && !minerGame.getStatus().initializationStarted) {
                  app.log('Miner', '–ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
                  minerGame.init();
              }
          }, 500);
      });
      
      // 5. –ï—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
          setTimeout(() => {
              if (!minerGame.getStatus().initialized && !minerGame.getStatus().initializationStarted) {
                  app.log('Miner', '–ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω)');
                  minerGame.init();
              }
          }, 500);
      }
      
  } catch (error) {
      app.log('Miner', `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã: ${error.message}`, true);
  }
})();
      /**
       * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫
       */
      const automaticCashout = async function() {
          try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
              if (!state.isPlaying) {
                  return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ casinoApp
              if (!ensureCasinoApp()) {
                  return;
              }
              
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
              const winAmount = Math.floor(state.gameData.betAmount * state.gameData.currentMultiplier);
              
              // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
              if (window.casinoApp.provideTactileFeedback) {
                  window.casinoApp.provideTactileFeedback('success');
                  setTimeout(() => window.casinoApp.provideTactileFeedback('success'), 300);
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
              if (elements.minerResult) {
                  elements.minerResult.innerHTML = `
                      <div class="win-icon">üèÜ</div>
                      <div class="win-title">–ò–¥–µ–∞–ª—å–Ω–æ! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏!</div>
                      <div class="win-amount">–í—ã–∏–≥—Ä—ã—à: ${winAmount} ‚≠ê</div>
                      <div class="win-multiplier">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${state.gameData.currentMultiplier.toFixed(2)}</div>
                  `;
                  elements.minerResult.classList.add('win', 'big-win');
              }
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              state.isPlaying = false;
              
              if (elements.cashoutBtn) {
                  elements.cashoutBtn.disabled = true;
              }
              
              if (elements.newGameBtn) {
                  elements.newGameBtn.disabled = false;
              }
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
              revealAllMines();
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
              await window.casinoApp.processGameResult(
                  'miner',
                  0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
                  'win',
                  winAmount,
                  {
                      revealedCells: state.gameData.revealedCells,
                      multiplier: state.gameData.currentMultiplier,
                      mines: state.gameData.mines,
                      perfectGame: true
                  }
              );
              
              app.log('Miner', `–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º ${winAmount}`);
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞: ${error.message}`, true);
          }
      };
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      let state = {
          isPlaying: false,
          initialized: false,
          initializationStarted: false,
          gameData: {
              grid: [],
              mines: [],
              revealedCells: [],
              totalCells: 25,  // 5x5 —Å–µ—Ç–∫–∞
              minesCount: 3,
              currentMultiplier: 1,
              betAmount: 0,
              baseMultiplier: 1.2 // –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
          }
      };
      
      /**
       * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã
       */
      const createGameContainer = function() {
          try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
              let container = document.querySelector('.miner-container');
              if (container) {
                  elements.container = container;
                  return container;
              }
              
              // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
              let gameArea = document.querySelector('.games-area');
              if (!gameArea) {
                  // –ï—Å–ª–∏ –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                  gameArea = document.createElement('div');
                  gameArea.className = 'games-area';
                  
                  // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                  const appContainer = document.querySelector('.app-container');
                  if (appContainer) {
                      appContainer.appendChild(gameArea);
                  } else {
                      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ body
                      document.body.appendChild(gameArea);
                  }
                  
                  app.log('Miner', '–°–æ–∑–¥–∞–Ω–∞ –æ–±—â–∞—è –∏–≥—Ä–æ–≤–∞—è –∑–æ–Ω–∞');
              }
              
              // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä—ã
              container = document.createElement('div');
              container.className = 'miner-container game-container';
              gameArea.appendChild(container);
              
              elements.container = container;
              app.log('Miner', '–°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä—ã');
              
              return container;
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${error.message}`, true);
              return null;
          }
      };
      
      /**
       * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã
       */
      const createGameInterface = function() {
          try {
              const container = elements.container || createGameContainer();
              if (!container) {
                  app.log('Miner', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                  return false;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
              if (container.querySelector('#miner-grid')) {
                  app.log('Miner', '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω');
                  return true;
              }
              
              // –°–æ–∑–¥–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∏–≥—Ä—ã
              container.innerHTML = `
                  <h2>Miner</h2>
                  <div class="game-controls">
                      <div class="bet-control">
                          <label for="miner-bet">–°—Ç–∞–≤–∫–∞:</label>
                          <input type="number" id="miner-bet" min="1" max="1000" value="10">
                      </div>
                      
                      <div class="mines-control">
                          <label for="mines-count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:</label>
                          <select id="mines-count">
                              <option value="3">3 –º–∏–Ω—ã</option>
                              <option value="5">5 –º–∏–Ω</option>
                              <option value="7">7 –º–∏–Ω</option>
                              <option value="10">10 –º–∏–Ω</option>
                          </select>
                      </div>
                      
                      <div class="potential-win-container">
                          <span>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: <span id="potential-win">0</span> ‚≠ê</span>
                      </div>
                      
                      <div class="miner-buttons">
                          <button id="new-game-btn" class="action-btn">–ù–û–í–ê–Ø –ò–ì–†–ê</button>
                          <button id="cashout-btn" class="action-btn" disabled>–ó–ê–ë–†–ê–¢–¨</button>
                      </div>
                  </div>
                  
                  <div id="miner-grid" class="miner-grid">
                      <!-- –°–µ—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                  </div>
                  
                  <div id="miner-result" class="result"></div>
              `;
              
              // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
              if (!document.getElementById('miner-styles')) {
                  const styleElement = document.createElement('style');
                  styleElement.id = 'miner-styles';
                  styleElement.textContent = `
                      .miner-container {
                          padding: 15px;
                          margin: 10px auto;
                          border: 1px solid #ccc;
                          border-radius: 8px;
                          max-width: 500px;
                          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                      }
                      
                      .game-controls {
                          margin-bottom: 15px;
                          display: flex;
                          flex-direction: column;
                          gap: 10px;
                      }
                      
                      .action-btn {
                          padding: 10px 15px;
                          background-color: #4CAF50;
                          color: white;
                          border: none;
                          border-radius: 4px;
                          cursor: pointer;
                          font-weight: bold;
                      }
                      
                      .action-btn:disabled {
                          background-color: #cccccc;
                          cursor: not-allowed;
                      }
                      
                      .miner-grid {
                          display: grid;
                          grid-template-columns: repeat(5, 1fr);
                          gap: 8px;
                          max-width: 350px;
                          margin: 0 auto;
                      }
                      
                      .grid-cell {
                          width: 60px;
                          height: 60px;
                          background-color: #f1f1f1;
                          border-radius: 5px;
                          display: flex;
                          align-items: center;
                          justify-content: center;
                          font-size: 24px;
                          cursor: pointer;
                          transition: all 0.2s;
                      }
                      
                      .active-cell:hover {
                          background-color: #e0e0e0;
                          transform: scale(1.05);
                      }
                      
                      .grid-cell.revealed {
                          background-color: #c8e6c9;
                      }
                      
                      .grid-cell.mine {
                          background-color: #ffcdd2;
                      }
                      
                      .grid-cell.exploded {
                          background-color: #ef5350;
                          animation: explode 0.5s;
                      }
                      
                      .result {
                          margin-top: 15px;
                          padding: 10px;
                          border-radius: 4px;
                          text-align: center;
                      }
                      
                      .result.win {
                          background-color: rgba(76, 175, 80, 0.2);
                          color: #4CAF50;
                      }
                      
                      .result.lose {
                          background-color: rgba(244, 67, 54, 0.2);
                          color: #F44336;
                      }
                      
                      @keyframes explode {
                          0% { transform: scale(1); }
                          50% { transform: scale(1.2); }
                          100% { transform: scale(1); }
                      }
                  `;
                  document.head.appendChild(styleElement);
              }
              
              app.log('Miner', '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
              return true;
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ${error.message}`, true);
              return false;
          }
      };
      
      /**
       * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
       * –° –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
       */
      const init = async function() {
          // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          if (state.initialized || state.initializationStarted) {
              app.log('Miner', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
              return true;
          }
          
          state.initializationStarted = true;
          app.log('Miner', '–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã');
          
          try {
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
              const initPromise = new Promise(async (resolve) => {
                  try {
                      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                      if (!createGameInterface()) {
                          app.log('Miner', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã', true);
                          resolve(false);
                          return;
                      }
                      
                      // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
                      await findDOMElements();
                      
                      // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Ç–∫—É
                      createGrid();
                      
                      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
                      updatePotentialWin();
                      
                      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                      setupEventListeners();
                      
                      state.initialized = true;
                      app.log('Miner', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                      resolve(true);
                  } catch (innerError) {
                      app.log('Miner', `–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${innerError.message}`, true);
                      resolve(false);
                  }
              });
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç (3 —Å–µ–∫—É–Ω–¥—ã)
              const timeoutPromise = new Promise((resolve) => {
                  setTimeout(() => {
                      app.log('Miner', '–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', true);
                      resolve(false);
                  }, 3000);
              });
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
              const result = await Promise.race([initPromise, timeoutPromise]);
              
              return result;
              
          } catch (error) {
              app.log('Miner', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, true);
              return false;
          }
      };
      
      /**
       * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç null
       */
      const findDOMElements = async function() {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
          return new Promise((resolve, reject) => {
              try {
                  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
                  setTimeout(() => {
                      elements.newGameBtn = document.getElementById('new-game-btn');
                      elements.cashoutBtn = document.getElementById('cashout-btn');
                      elements.minerBet = document.getElementById('miner-bet');
                      elements.minesCount = document.getElementById('mines-count');
                      elements.minerGrid = document.getElementById('miner-grid');
                      elements.potentialWin = document.getElementById('potential-win');
                      elements.minerResult = document.getElementById('miner-result');
                      
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–æ–æ–±—â–∞–µ–º –æ –Ω–∏—Ö
                      if (!elements.newGameBtn) {
                          app.log('Miner', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —ç–ª–µ–º–µ–Ω—Ç new-game-btn –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                      } else {
                          app.log('Miner', '–≠–ª–µ–º–µ–Ω—Ç new-game-btn –Ω–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                      }
                      
                      if (!elements.minerGrid) {
                          app.log('Miner', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —ç–ª–µ–º–µ–Ω—Ç miner-grid –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                      } else {
                          app.log('Miner', '–≠–ª–µ–º–µ–Ω—Ç miner-grid –Ω–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                      }
                      
                      resolve();
                  }, 100);
              } catch (error) {
                  app.log('Miner', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${error.message}`, true);
                  reject(error);
              }
          });
      };
      
      /**
       * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
       */
      const setupEventListeners = function() {
          try {
              // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
              if (elements.newGameBtn) {
                  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
                  const newGameBtn = elements.newGameBtn.cloneNode(true);
                  if (elements.newGameBtn.parentNode) {
                      elements.newGameBtn.parentNode.replaceChild(newGameBtn, elements.newGameBtn);
                  }
                  elements.newGameBtn = newGameBtn;
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                  elements.newGameBtn.addEventListener('click', startNewGame);
                  app.log('Miner', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
              } else {
                  app.log('Miner', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
              }
              
              // –ö–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∞ –≤—ã–∏–≥—Ä—ã—à–∞
              if (elements.cashoutBtn) {
                  const cashoutBtn = elements.cashoutBtn.cloneNode(true);
                  if (elements.cashoutBtn.parentNode) {
                      elements.cashoutBtn.parentNode.replaceChild(cashoutBtn, elements.cashoutBtn);
                  }
                  elements.cashoutBtn = cashoutBtn;
                  
                  elements.cashoutBtn.addEventListener('click', cashout);
                  app.log('Miner', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
              }
              
              // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
              if (elements.minesCount) {
                  elements.minesCount.addEventListener('change', updateMineCount);
                  app.log('Miner', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
              }
              
              app.log('Miner', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${error.message}`, true);
          }
      };
      
      /**
       * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ç–∫–∏
       */
      const createGrid = function() {
          try {
              if (!elements.minerGrid) {
                  app.log('Miner', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É: —ç–ª–µ–º–µ–Ω—Ç minerGrid –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                  return;
              }
              
              // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ç–∫—É
              elements.minerGrid.innerHTML = '';
              
              // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 5x5
              for (let i = 0; i < 5; i++) {
                  for (let j = 0; j < 5; j++) {
                      const cell = document.createElement('div');
                      cell.className = 'grid-cell';
                      cell.dataset.row = i;
                      cell.dataset.col = j;
                      cell.dataset.index = i * 5 + j;
                      
                      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
                      if (state.isPlaying) {
                          cell.addEventListener('click', () => revealCell(i * 5 + j));
                          // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                          cell.classList.add('active-cell');
                      }
                      
                      elements.minerGrid.appendChild(cell);
                  }
              }
              
              app.log('Miner', '–ò–≥—Ä–æ–≤–∞—è —Å–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏: ${error.message}`, true);
          }
      };
      
      /**
       * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
       */
      const updateMineCount = function() {
          try {
              if (!elements.minesCount) {
                  app.log('Miner', '–≠–ª–µ–º–µ–Ω—Ç minesCount –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                  return;
              }
              
              state.gameData.minesCount = parseInt(elements.minesCount.value);
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
              switch (state.gameData.minesCount) {
                  case 3: 
                      state.gameData.baseMultiplier = 1.2;
                      break;
                  case 5:
                      state.gameData.baseMultiplier = 1.5;
                      break;
                  case 7:
                      state.gameData.baseMultiplier = 2.0;
                      break;
                  case 10:
                      state.gameData.baseMultiplier = 3.0;
                      break;
                  default:
                      state.gameData.baseMultiplier = 1.2;
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              updatePotentialWin();
              
              // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
              if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                  window.casinoApp.provideTactileFeedback('light');
              }
              
              app.log('Miner', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${state.gameData.minesCount}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${state.gameData.baseMultiplier}`);
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω: ${error.message}`, true);
          }
      };
      
      /**
       * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
       */
      const updatePotentialWin = function() {
          try {
              if (!elements.potentialWin || !elements.minerBet) {
                  return;
              }
              
              const betAmt = parseInt(elements.minerBet.value) || 0;
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
              const multiplier = calculateMultiplier(
                  state.gameData.revealedCells.length,
                  state.gameData.totalCells,
                  state.gameData.minesCount,
                  state.gameData.baseMultiplier
              );
              
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
              const potential = Math.floor(betAmt * multiplier);
              elements.potentialWin.textContent = potential;
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
              state.gameData.currentMultiplier = multiplier;
              
              app.log('Miner', `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –æ–±–Ω–æ–≤–ª–µ–Ω: ${potential}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`);
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞: ${error.message}`, true);
          }
      };
      
      /**
       * –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
       */
      const calculateMultiplier = function(revealed, total, mines, baseMultiplier) {
          if (revealed === 0) return baseMultiplier;
          
          try {
              // –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
              const safeCells = total - mines;
              const remainingSafe = safeCells - revealed;
              
              // –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
              // –∏ —Ä–∞—Å—Ç–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–ª–µ—Ç–∫–æ–π
              let multiplier = baseMultiplier * Math.pow(safeCells / remainingSafe, 1.2);
              
              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
              const maxMultiplier = 50;
              multiplier = Math.min(multiplier, maxMultiplier);
              
              // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
              return Math.floor(multiplier * 100) / 100;
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è: ${error.message}`, true);
              return baseMultiplier; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          }
      };
      
      /**
       * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ casinoApp
       */
      const ensureCasinoApp = function() {
          if (window.casinoApp) return true;
          
          // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é casinoApp, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
          app.log('Miner', 'casinoApp –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é', true);
          window.casinoApp = {
              showNotification: function(message) {
                  alert(message);
              },
              provideTactileFeedback: function() {
                  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏
              },
              processGameResult: function(gameType, bet, result, win, data) {
                  app.log('Miner', `–ò–≥—Ä–∞: ${gameType}, –°—Ç–∞–≤–∫–∞: ${bet}, –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}, –í—ã–∏–≥—Ä—ã—à: ${win}`, false);
                  return Promise.resolve({success: true});
              }
          };
          
          return true;
      };
      
      /**
       * –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
       */
      const startNewGame = async function() {
          app.log('Miner', '–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
          if (!state.initialized) {
              app.log('Miner', '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é', true);
              await init();
              
              // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—ã—Ö–æ–¥–∏–º
              if (!state.initialized) {
                  app.log('Miner', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', true);
                  return;
              }
          }
          
          try {
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è casinoApp
              if (!ensureCasinoApp()) {
                  return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
              if (!elements.minerBet) {
                  app.log('Miner', '–≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
                  return;
              }
              
              // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
              const betAmount = parseInt(elements.minerBet.value);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
              if (isNaN(betAmount) || betAmount <= 0) {
                  window.casinoApp.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É');
                  return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
              if (window.GreenLightApp && window.GreenLightApp.user && 
                  betAmount > window.GreenLightApp.user.balance) {
                  window.casinoApp.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏');
                  return;
              }
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              state.isPlaying = true;
              state.gameData = {
                  grid: Array(state.gameData.totalCells).fill('empty'),
                  mines: [],
                  revealedCells: [],
                  totalCells: 25,
                  minesCount: parseInt(elements.minesCount ? elements.minesCount.value : 3),
                  currentMultiplier: state.gameData.baseMultiplier,
                  betAmount: betAmount,
                  baseMultiplier: state.gameData.baseMultiplier
              };
              
              // –†–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã
              placeMines();
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
              createGrid();
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
              if (elements.cashoutBtn) {
                  elements.cashoutBtn.disabled = false;
              }
              
              if (elements.newGameBtn) {
                  elements.newGameBtn.disabled = true;
              }
              
              // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              if (elements.minerResult) {
                  elements.minerResult.textContent = '';
                  elements.minerResult.className = 'result';
              }
              
              // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
              if (window.casinoApp.provideTactileFeedback) {
                  window.casinoApp.provideTactileFeedback('medium');
              }
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
              await window.casinoApp.processGameResult(
                  'miner',
                  betAmount,
                  'bet',
                  0,
                  { 
                      minesCount: state.gameData.minesCount,
                      baseMultiplier: state.gameData.baseMultiplier 
                  }
              );
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
              updatePotentialWin();
              
              app.log('Miner', '–ù–æ–≤–∞—è –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞');
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã: ${error.message}`, true);
              state.isPlaying = false;
              
              if (elements.newGameBtn) {
                  elements.newGameBtn.disabled = false;
              }
          }
      };
      
      /**
       * –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω
       */
      const placeMines = function() {
          try {
              // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∏–Ω—ã
              state.gameData.mines = [];
              // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
              state.gameData.grid = Array(state.gameData.totalCells).fill('empty');
              
              // –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–≤—ã–µ –º–∏–Ω—ã
              while (state.gameData.mines.length < state.gameData.minesCount) {
                  const randomIndex = Math.floor(Math.random() * state.gameData.totalCells);
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∏–Ω–∞
                  if (!state.gameData.mines.includes(randomIndex)) {
                      state.gameData.mines.push(randomIndex);
                      state.gameData.grid[randomIndex] = 'mine';
                  }
              }
              
              app.log('Miner', `–ú–∏–Ω—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã: ${state.gameData.mines.join(', ')}`);
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∏–Ω: ${error.message}`, true);
          }
      };
      
      /**
       * –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
       */
      const revealCell = async function(index) {
          try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞
              if (state.gameData.revealedCells.includes(index)) {
                  return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
              if (!state.isPlaying) {
                  return;
              }
              
              // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —è—á–µ–π–∫–∏
              const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
              if (!cell) {
                  app.log('Miner', `–Ø—á–µ–π–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, true);
                  return;
              }
              
              // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
              if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                  window.casinoApp.provideTactileFeedback('light');
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –º–∏–Ω–æ–π
              if (state.gameData.mines.includes(index)) {
                  // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ - –Ω–∞—à–ª–∏ –º–∏–Ω—É
                  revealAllMines();
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                  cell.classList.add('mine', 'exploded');
                  cell.innerHTML = 'üí•';
                  
                  // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤–∑—Ä—ã–≤–µ
                  if (window.casinoApp && window.casinoApp.provideTactileFeedback) {
                      window.casinoApp.provideTactileFeedback('error');
                  }
                  
                  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                  state.isPlaying = false;
                  
                  if (elements.cashoutBtn) {
                      elements.cashoutBtn.disabled = true;
                  }
                  
                  if (elements.newGameBtn) {
                      elements.newGameBtn.disabled = false;
                  }
                  
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                  if (elements.minerResult) {
                      elements.minerResult.textContent = '–ë—É–º! –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
                      elements.minerResult.classList.add('lose');
                  }
                  
                  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à
                  if (window.casinoApp) {
                      await window.casinoApp.processGameResult(
                          'miner',
                          0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
                          'lose',
                          0,
                          {
                              revealedCells: state.gameData.revealedCells,
                              hitMine: index,
                              mines: state.gameData.mines,
                              finalMultiplier: state.gameData.currentMultiplier
                          }
                      );
                  }
              } else {
                  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞
                  state.gameData.revealedCells.push(index);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                  cell.classList.add('revealed');
                  cell.innerHTML = 'üí∞';
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
                  updatePotentialWin();
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã (—É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã)
                  const safeCellsCount = state.gameData.totalCells - state.gameData.mines.length;
                  if (state.gameData.revealedCells.length === safeCellsCount) {
                      // –ò–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏
                      await automaticCashout();
                  }
              }
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏: ${error.message}`, true);
          }
      };
      
      /**
       * –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–∏–Ω
       */
      const revealAllMines = function() {
          try {
              state.gameData.mines.forEach(index => {
                  const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
                  if (cell && !cell.classList.contains('exploded')) {
                      cell.classList.add('mine');
                      cell.innerHTML = 'üí£';
                      
                      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–Ω—ã
                      const delay = Math.random() * 300;
                      setTimeout(() => {
                          cell.classList.add('mine-reveal');
                      }, delay);
                  }
              });
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–∏–Ω: ${error.message}`, true);
          }
      };
      
      /**
       * –í—ã–≤–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞
       */
      const cashout = async function() {
          try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
              if (!state.isPlaying || state.gameData.revealedCells.length === 0) {
                  return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ casinoApp
              if (!ensureCasinoApp()) {
                  return;
              }
              
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
              const winAmount = Math.floor(state.gameData.betAmount * state.gameData.currentMultiplier);
              
              // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
              if (window.casinoApp.provideTactileFeedback) {
                  window.casinoApp.provideTactileFeedback('success');
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
              if (elements.minerResult) {
                  elements.minerResult.innerHTML = `
                      <div class="win-icon">üéâ</div>
                      <div class="win-title">–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} Stars!</div>
                      <div class="win-multiplier">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${state.gameData.currentMultiplier.toFixed(2)}</div>
                  `;
                  elements.minerResult.classList.add('win');
              }
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              state.isPlaying = false;
              
              if (elements.cashoutBtn) {
                  elements.cashoutBtn.disabled = true;
              }
              
              if (elements.newGameBtn) {
                  elements.newGameBtn.disabled = false;
              }
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
              revealAllMines();
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
              await window.casinoApp.processGameResult(
                  'miner',
                  0, // –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
                  'win',
                  winAmount,
                  {
                      revealedCells: state.gameData.revealedCells,
                      multiplier: state.gameData.currentMultiplier,
                      mines: state.gameData.mines
                  }
              );
              
              app.log('Miner', `–£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞: ${winAmount} —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º ${state.gameData.currentMultiplier.toFixed(2)}`);
          } catch (error) {
              app.log('Miner', `–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –≤—ã–∏–≥—Ä—ã—à–∞: ${error.message}`, true);
          }
      };