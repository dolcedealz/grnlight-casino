/**
 * dispute.js - –ú–æ–¥—É–ª—å –¥–ª—è –∏–≥—Ä—ã "–°–ø–æ—Ä" (–ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏)
 * –í–µ—Ä—Å–∏—è 1.0.0
 */

(function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (!window.GreenLightApp) {
      console.error('[Dispute] GreenLightApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
      window.GreenLightApp = {
          log: function(source, message, isError) {
              if (isError) console.error(`[${source}] ${message}`);
              else console.log(`[${source}] ${message}`);
          }
      };
  }
  
  const app = window.GreenLightApp;
  app.log('Dispute', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏–≥—Ä—ã Dispute v1.0.0');
  
  // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
  const disputeGame = (function() {
      // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
      let elements = {
          disputeContainer: null,
          headsBtn: null,
          tailsBtn: null,
          flipBtn: null,
          coinAnimation: null,
          disputeResult: null,
          disputeInfo: null,
          opponentChoice: null,
          myChoice: null
      };
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      let state = {
          initialized: false,
          disputeId: null,
          myTelegramId: null,
          opponentTelegramId: null,
          disputeData: null,
          myChoice: null,
          isFlipping: false
      };
      
      /**
       * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
       */
      const init = async function() {
          if (state.initialized) {
              app.log('Dispute', '–ò–≥—Ä–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
              return true;
          }
          
          try {
              app.log('Dispute', '–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã');
              
              // –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–æ—Ä–∞ –∏–∑ URL
              const urlParams = new URLSearchParams(window.location.search);
              state.disputeId = urlParams.get('disputeId');
              
              if (!state.disputeId) {
                  app.log('Dispute', 'ID —Å–ø–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL', true);
                  return false;
              }
              
              // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
                  state.myTelegramId = window.Telegram.WebApp.initDataUnsafe.user?.id;
              }
              
              // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
              await findDOMElements();
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞
              await loadDisputeData();
              
              // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
              setupEventListeners();
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
              updateUI();
              
              state.initialized = true;
              app.log('Dispute', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
              return true;
              
          } catch (error) {
              app.log('Dispute', `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, true);
              return false;
          }
      };
      
      /**
       * –ü–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
       */
      const findDOMElements = async function() {
          return new Promise((resolve) => {
              elements.disputeContainer = document.getElementById('dispute-container');
              elements.headsBtn = document.getElementById('heads-btn');
              elements.tailsBtn = document.getElementById('tails-btn');
              elements.flipBtn = document.getElementById('flip-btn');
              elements.coinAnimation = document.getElementById('coin-animation');
              elements.disputeResult = document.getElementById('dispute-result');
              elements.disputeInfo = document.getElementById('dispute-info');
              elements.opponentChoice = document.getElementById('opponent-choice');
              elements.myChoice = document.getElementById('my-choice');
              
              resolve();
          });
      };
      
      /**
       * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä–∞
       */
      const loadDisputeData = async function() {
          try {
              const response = await fetch(`/api/disputes/${state.disputeId}`);
              
              if (!response.ok) {
                  throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä–∞');
              }
              
              const data = await response.json();
              state.disputeData = data.dispute;
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –º—ã –≤ —ç—Ç–æ–º —Å–ø–æ—Ä–µ
              if (state.myTelegramId === data.dispute.creatorId) {
                  state.opponentTelegramId = data.dispute.opponentId;
              } else {
                  state.opponentTelegramId = data.dispute.creatorId;
              }
              
              app.log('Dispute', '–î–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
              
          } catch (error) {
              app.log('Dispute', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, true);
              throw error;
          }
      };
      
      /**
       * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
       */
      const setupEventListeners = function() {
          if (elements.headsBtn) {
              elements.headsBtn.addEventListener('click', () => chooseSide('heads'));
          }
          
          if (elements.tailsBtn) {
              elements.tailsBtn.addEventListener('click', () => chooseSide('tails'));
          }
          
          if (elements.flipBtn) {
              elements.flipBtn.addEventListener('click', flipCoin);
          }
      };
      
      /**
       * –í—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–Ω–µ—Ç—ã
       */
      const chooseSide = async function(side) {
          if (state.myChoice) {
              app.log('Dispute', '–°—Ç–æ—Ä–æ–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞');
              return;
          }
          
          try {
              const response = await fetch(`/api/disputes/${state.disputeId}/choose-side`, {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                      telegramId: state.myTelegramId,
                      side: side
                  })
              });
              
              if (!response.ok) {
                  throw new Error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã');
              }
              
              const data = await response.json();
              state.disputeData = data.dispute;
              state.myChoice = side;
              
              updateUI();
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
              checkReadyToFlip();
              
          } catch (error) {
              app.log('Dispute', `–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã: ${error.message}`, true);
              if (window.casinoApp) {
                  window.casinoApp.showNotification('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã');
              }
          }
      };
      
      /**
       * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –±—Ä–æ—Å–∫—É
       */
      const checkReadyToFlip = function() {
          if (state.disputeData.status === 'in_progress') {
              if (elements.flipBtn) {
                  elements.flipBtn.disabled = false;
                  elements.flipBtn.textContent = '–ü–û–î–ë–†–û–°–ò–¢–¨ –ú–û–ù–ï–¢–£';
              }
          }
      };
      
      /**
       * –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
       */
      const flipCoin = async function() {
          if (state.isFlipping) return;
          
          try {
              state.isFlipping = true;
              
              // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
              if (elements.coinAnimation) {
                  elements.coinAnimation.classList.add('flipping');
              }
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
              const response = await fetch(`/api/disputes/${state.disputeId}/flip`, {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  }
              });
              
              if (!response.ok) {
                  throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã');
              }
              
              const data = await response.json();
              
              // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
              setTimeout(() => {
                  if (elements.coinAnimation) {
                      elements.coinAnimation.classList.remove('flipping');
                      elements.coinAnimation.classList.add(data.coinResult);
                  }
                  
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                  showResult(data);
              }, 2000);
              
          } catch (error) {
              app.log('Dispute', `–û—à–∏–±–∫–∞ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã: ${error.message}`, true);
              state.isFlipping = false;
          }
      };
      
      /**
       * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
       */
      const showResult = function(data) {
          if (!elements.disputeResult) return;
          
          const isWinner = data.winnerId === state.myTelegramId;
          const resultText = isWinner ? 
              `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${data.winAmount} ‚≠ê!` : 
              `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${state.disputeData.amount} ‚≠ê`;
          
          elements.disputeResult.innerHTML = `
              <div class="result-icon">${isWinner ? 'üèÜ' : '‚ùå'}</div>
              <div class="result-text">${resultText}</div>
              <div class="coin-result">–í—ã–ø–∞–ª–æ: ${data.coinResult === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}</div>
              <button class="action-btn" onclick="window.location.href='/'">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–∑–∏–Ω–æ</button>
          `;
          
          elements.disputeResult.classList.add(isWinner ? 'win' : 'lose');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          if (window.GreenLightApp && window.GreenLightApp.user) {
              if (isWinner) {
                  window.GreenLightApp.user.balance += data.winAmount;
              } else {
                  window.GreenLightApp.user.balance -= state.disputeData.amount;
              }
              
              if (window.casinoApp && window.casinoApp.updateBalance) {
                  window.casinoApp.updateBalance();
              }
          }
      };
      
      /**
       * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
       */
      const updateUI = function() {
          if (!state.disputeData) return;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ä–µ
          if (elements.disputeInfo) {
              elements.disputeInfo.innerHTML = `
                  <div>–°—É–º–º–∞ —Å–ø–æ—Ä–∞: ${state.disputeData.amount} ‚≠ê</div>
                  <div>–°—Ç–∞—Ç—É—Å: ${getStatusText(state.disputeData.status)}</div>
              `;
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
          if (elements.myChoice && state.myChoice) {
              elements.myChoice.textContent = `–í–∞—à –≤—ã–±–æ—Ä: ${state.myChoice === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}`;
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏)
          if (elements.opponentChoice && state.disputeData.status === 'in_progress') {
              elements.opponentChoice.textContent = '–û–ø–ø–æ–Ω–µ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä';
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
          if (state.myChoice) {
              if (elements.headsBtn) elements.headsBtn.disabled = true;
              if (elements.tailsBtn) elements.tailsBtn.disabled = true;
          }
          
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞ –µ—Å–ª–∏ –æ–±–∞ –≥–æ—Ç–æ–≤—ã
          if (state.disputeData.status === 'in_progress' && elements.flipBtn) {
              elements.flipBtn.disabled = false;
          }
      };
      
      /**
       * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
       */
      const getStatusText = function(status) {
          switch (status) {
              case 'pending': return '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞';
              case 'accepted': return '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã';
              case 'in_progress': return '–ì–æ—Ç–æ–≤ –∫ –±—Ä–æ—Å–∫—É';
              case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
              default: return status;
          }
      };
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      return {
          init: init,
          getStatus: function() {
              return {
                  initialized: state.initialized,
                  disputeId: state.disputeId,
                  myChoice: state.myChoice,
                  isFlipping: state.isFlipping
              };
          }
      };
  })();
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É
  if (window.registerGame) {
      window.registerGame('disputeGame', disputeGame);
      app.log('Dispute', '–ò–≥—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É registerGame');
  }
  
  window.disputeGame = disputeGame;
  app.log('Dispute', '–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
})();